{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"crypto-js\"","webpack:///external \"axios\"","webpack:///external \"bignumber.js\"","webpack:///external \"bip39\"","webpack:///external \"base64-url\"","webpack:///external \"sm.js\"","webpack:///external \"elliptic\"","webpack:///external \"bs58\"","webpack:///external \"js-sha3\"","webpack:///external \"long\"","webpack:///external \"secure-random\"","webpack:///external \"@ont-community/hdkey-secp256r1\"","webpack:///external \"wif\"","webpack:///external \"crypto\"","webpack:///external \"scrypt-async\"","webpack:///external \"milagro-crypto-js\"","webpack:///external \"@ont-community/html5-websocket\"","webpack:///external \"websocket-as-promised\"","webpack:///external \"uuid\"","webpack:///./src/error.ts","webpack:///./src/transaction/opcode.ts","webpack:///./src/consts.ts","webpack:///./src/utils.ts","webpack:///./src/common/bigInt.ts","webpack:///./src/crypto/SignatureScheme.ts","webpack:///./src/crypto/KeyType.ts","webpack:///./src/crypto/CurveLabel.ts","webpack:///./src/crypto/Key.ts","webpack:///./src/crypto/PublicKey.ts","webpack:///./src/transaction/program.ts","webpack:///./src/smartcontract/abi/parameter.ts","webpack:///./src/smartcontract/abi/struct.ts","webpack:///./src/transaction/scriptBuilder.ts","webpack:///./src/crypto/address.ts","webpack:///./src/scrypt.ts","webpack:///./src/crypto/Signature.ts","webpack:///./src/crypto/PrivateKey.ts","webpack:///./src/crypto/PrivateKeyFactory.ts","webpack:///./src/crypto/AnonymousCredential.ts","webpack:///./src/common/fixed64.ts","webpack:///./src/smartcontract/abi/abiFunction.ts","webpack:///./src/transaction/payload/deployCode.ts","webpack:///./src/transaction/txAttribute.ts","webpack:///./src/transaction/payload/invokeCode.ts","webpack:///./src/transaction/txSignature.ts","webpack:///./src/transaction/transaction.ts","webpack:///./src/transaction/transfer.ts","webpack:///./src/transaction/transactionBuilder.ts","webpack:///./src/account.ts","webpack:///./src/network/rest/urlConsts.ts","webpack:///./src/network/rest/restClient.ts","webpack:///./src/network/websocket/deferred.ts","webpack:///./src/network/websocket/websocketBuilder.ts","webpack:///./src/network/websocket/websocketSender.ts","webpack:///./src/network/websocket/websocketClient.ts","webpack:///./src/smartcontract/abi/abiInfo.ts","webpack:///./src/smartcontract/neovm/attestClaimTxBuilder.ts","webpack:///./src/smartcontract/data/attestClaim.ts","webpack:///./src/claim/attestNotifyEvent.ts","webpack:///./src/smartcontract/abi/nativeVmParamsBuilder.ts","webpack:///./src/smartcontract/nativevm/ontidContractTxBuilder.ts","webpack:///./src/transaction/ddo.ts","webpack:///./src/claim/message.ts","webpack:///./src/claim/claim.ts","webpack:///./src/identity.ts","webpack:///./src/neocore/TransactionNeo.ts","webpack:///./src/neocore/InvocationTransaction.ts","webpack:///./src/neocore/NeoRpc.ts","webpack:///./src/neocore/Program.ts","webpack:///./src/neocore/SmartContract.ts","webpack:///./src/neocore/TransactionInput.ts","webpack:///./src/neocore/TransactionOutput.ts","webpack:///./src/network/rpc/rpcClient.ts","webpack:///./src/smartcontract/nativevm/ontAssetTxBuilder.ts","webpack:///./src/smartcontract/neovm/oep8TxBuilder.ts","webpack:///./src/wallet.ts","webpack:///./src/sdk/index.ts","webpack:///./src/smartcontract/nativevm/governanceContractTxBuilder.ts","webpack:///./src/smartcontract/nativevm/token.ts","webpack:///./src/smartcontract/neovm/oep4TxBuilder.ts","webpack:///./src/smartcontract/neovm/oep5TxBuilder.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ERROR_CODE","OPCODE","ADDR_VERSION","DEFAULT_SCRYPT","cost","blockSize","parallel","size","OEP_HEADER","OEP_FLAG","WEBVIEW_SCHEME","DEFAULT_ALGORITHM","algorithm","parameters","curve","DEFAULT_SM2_ID","TEST_NODE","MAIN_NODE","HTTP_REST_PORT","HTTP_WS_PORT","HTTP_JSON_PORT","REST_API","getBalance","sendRawTx","getMerkleProof","ONT_NETWORK","MAIN","TEST","TEST_ONT_URL","SOCKET_URL","RPC_URL","REST_URL","sendRawTxByRestful","MAIN_ONT_URL","TOKEN_TYPE","ONT","ONG","DEFAULT_GAS_LIMIT","NATIVE_INVOKE_NAME","TX_MAX_SIG_SIZE","ONT_BIP44_PATH","UNBOUND_GENERATION_AMOUNT","UNBOUND_TIME_INTERVAL","ONT_TOTAL_SUPPLY","GENESIS_BLOCK_TIMESTAMP","opcode","hexstring2ab","str","result","length","push","parseInt","substring","ab2hexstring","arr","uint8Arr","Uint8Array","byteLength","toString","ab2str","buf","String","fromCharCode","apply","str2ab","ArrayBuffer","bufView","strLen","charCodeAt","str2hexstr","hexstr2str","hex2VarBytes","hex","num2VarInt","str2VarBytes","bool2VarByte","v","hexXor","str1","str2","Error","result8","substr","num2hexstring","num","arguments","undefined","littleEndian","RangeError","Number","isSafeInteger","hexstring","repeat","reverseHex","out","bigIntFromBytes","bytes","buff","Buffer","from","data","Array","subarray","concat","fill","external_long_","bigIntToBytes","toBytesLE","negData","neg","stop","b","isNegative","pos","slice","StringReader","_classCallCheck","this","_createClass","isEmpty","index","indexOf","bytesToRead","readNextLen","read","len","EventEmitter","handlers","type","handler","event","utils_sendBackResult2Native","callback","window","prompt","utils_axiosPost","url","params","external_axios_default","a","post","then","res","console","log","catch","err","JSON","stringify","now","Math","floor","Date","sha256","external_crypto_js_","Hex","parse","ripemd160","hash160","SignatureScript","generateRandomArray","external_secure_random_","randomBytes","generateMnemonic","random","external_bip39_","parseMnemonic","varifyPositiveInt","test","INVALID_PARAMS","isBase64","isHexString","unboundDeadline","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","return","numInterval","calcUnboundOng","balance","startOffset","endOffset","amount","UNBOUND_DEADLINE","ustart","istart","uend","iend","BigInt","bigInt_classCallCheck","bi","external_bignumber_js_","isInteger","SignatureScheme","label","labelJWS","SignatureScheme_classCallCheck","values","SignatureScheme_createClass","item","find","ECDSAwithSHA224","ECDSAwithSHA256","ECDSAwithSHA384","ECDSAwithSHA512","ECDSAwithSHA3_224","ECDSAwithSHA3_256","ECDSAwithSHA3_384","ECDSAwithSHA3_512","ECDSAwithRIPEMD160","SM2withSM3","EDDSAwithSHA512","KeyType","defaultSchema","KeyType_classCallCheck","KeyType_createClass","ECDSA","SM2","EDDSA","CurveLabel","preset","CurveLabel_classCallCheck","CurveLabel_createClass","SECP224R1","SECP256R1","SECP384R1","SECP521R1","SM2P256V1","ED25519","Key_KeyParameters","KeyParameters","Key_classCallCheck","Key_createClass","json","fromLabel","Key_Key","Key","deserializeJson","msg","scheme","external_js_sha3_","external_sm_js_","sum","schema","serializeJson","PublicKey_PublicKey","_Key","PublicKey","PublicKey_classCallCheck","_possibleConstructorReturn","__proto__","getPrototypeOf","_inherits","PublicKey_createClass","signature","isSchemaSupported","getSignContent","hash","computeHash","verifySignature","verifyEcDSASignature","verifyEdDSASignature","verifySM2Signature","external_elliptic_","verify","reader","id","readNullTerminated","SM2KeyPair","sr","algorithmHex","curveHex","fromHex","PublicKey_PublicKeyStatus","PublicKeyStatus","hexLabel","comparePublicKeys","ec","paKey","keyFromPublic","pbKey","pa","getPublic","pb","getX","getY","pka","pkb","_pubFromString","pushOpCode","op","pushBigInt","PUSHM1","PUSH0","PUSH1","pushNum","pushBytes","bigInt","toHexstr","hexstr","PUSHBYTES75","PUSHBYTES1","PUSHDATA1","PUSHDATA2","PUSHDATA4","program_programFromPubKey","pk","serializeHex","pushPubKey","CHECKSIG","program_programFromMultiPubKey","pubkeys","sort","CHECKMULTISIG","program_programFromParams","sigs","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","readOpcode","readBytes","code","keylen","readUint32","readUint16","readUint8","readPubKey","pkStr","readNextBytes","deserializeHex","IN_USE","REVOKED","ProgramInfo","program_classCallCheck","ParameterType","ParameterTypeVal","Parameter","parameter_classCallCheck","parameter_createClass","Struct","struct_classCallCheck","list","_len","args","_key","scriptBuilder_pushBool","param","PUSHT","PUSHF","scriptBuilder_pushInt","biHex","scriptBuilder_pushHexString","scriptBuilder_pushBigNum","isEqualTo","isGreaterThan","isLessThan","toNumber","scriptBuilder_getStructBytes","val","ByteArray","scriptBuilder_getMapBytes","Map","keys","k","getType","getValue","Integer","Long","scriptBuilder_pushMap","NEWMAP","TOALTSTACK","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","DUPFROMALTSTACK","scriptBuilder_pushParam","SETITEM","FROMALTSTACK","pushParam","Boolean","BOOLOR","PACK","ADD","scriptBuilder_serializeAbiFunction","abiFunction","tmp","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","convertMap","scriptBuilder_createCodeParamsScript","convertArray","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","map","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","pVal","set","deserializeItem","readBoolean","ele","_length","_i","createCodeParamsScript","abi_struct","structBytes","scriptBuilder_buildSmartContractParam","functionName","mapBytes","scriptBuilder_buildWasmContractParam","pList","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","Int","IntArray","LongArray","Params","address_Address","Address","address_classCallCheck","address_createClass","publicKey","ontid","vmCode","publicKeys","fromPubKey","toBase58","hexToBase58","base58ToHex","address","hexEncoded","datas","external_bs58_","base58Encoded","scrypt","keyphrase","addressHash","derived","external_scrypt_async_","normalize","N","dkLen","encryptWithCtr","privateKey","publicKeyEncoded","scryptParams","getB58Checksum","derived1","derived2","iv","assembled","encrypt","CTR","padding","NoPadding","ciphertext","decryptWithCtr","encryptedKey","saltOrAddress","encrypted","salt","ciphertexts","decrypt","checkCtrDecrypted","Decrypto_ERROR","encryptWithEcb","addresshash","xor","ECB","decryptWithEcb","checkEcbDecrypted","decryptedKey","encryptWithGcm","aad","cipher","external_crypto_","setAAD","plainText","update","final","authTag","getAuthTag","decryptWithGcm","decipher","setAuthTag","decrypted","Signature_Signature","Signature","publicKeyId","Signature_classCallCheck","Signature_createClass","encoded","external_base64_url_","pgpSignature","Value","deserialzedValue","Algorithm","keyId","PublicKeyId","Format","HDKey","PrivateKey_PrivateKey","PrivateKey","PrivateKey_classCallCheck","PrivateKey_possibleConstructorReturn","PrivateKey_inherits","PrivateKey_createClass","signed","computeSignature","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_context","prev","abrupt","sign","_x","_x2","_x3","getEcDSAPublicKey","getEdDSAPublicKey","getSM2PublicKey","getPublicKey","INVALID_ADDR","keyFromPrivate","keyFromSecret","pubToString","computeEcDSASignature","computeEdDSASignature","computeSM2Signature","canonical","toArrayLike","R","S","external_wif_","keyType","wifkey","mnemonic","derivePath","split","seed","pri","fromMasterSeed","derive","keyDeserializers","defaultKeyDeserializer","DefaultKeyDeserializer","PrivateKeyFactory_classCallCheck","PrivateKeyFactory_createClass","registerKeyDeserializer","deserializer","deserializeFromJson","external","deserialize","Issuer","AnonymousCredential_classCallCheck","AnonymousCredential_CryptoSuite","sk","SecretKey","AnonymousCredential_createClass","Rand","GenerateSk","GenerateIssuerPublicKey","AttributeName","GenerateAttr","Nym","attrs","e","getRandBN","B","ECP","copy","g1","add","PAIR","G1mul","h0","attr","h","A","BIG","invmodp","order","cred","Credential","Set","IssuerPublicKey","COPY","CR","VerifyCredentialRequest","User","ipk","nonce","h_sk","t1","C","hashToBN","modmul","mod","pi","genAttrBN","Cred","wg2e","ECP2","w","G2mul","g2","sig","affine","left","ate","fexp","right","equals","Copy","D","r1","A_","r3","_e","modneg","_A","r2","_r2","B_","s_","r_a","r_e","r_r2","r_r3","r_s_","r_sk","E","t2","c_","s_sk","s_a","_i2","sub","s_e","s_r2","s_r3","s_s_","proof","O","g2Dup","_t1","_t2","c1","c2","comp","CryptoSuite","ctx","external_milagro_crypto_js_","rng","RAND","getG1Generator","getG2Generator","getOrder","x","y","rcopy","ROM_CURVE","CURVE_Gx","CURVE_Gy","setxy","qx","FP2","qy","CURVE_Pxa","CURVE_Pxb","bset","CURVE_Pya","CURVE_Pyb","CURVE_Order","clean","randomnum","all","points","forEach","isArray","pp","toBytes","H","HASH256","process_array","fromBytes","HAttr","getRandG1","CryptoBase","_CryptoBase","_this","AnonymousCredential_possibleConstructorReturn","AnonymousCredential_inherits","setValue","_g1","_g2","SetBasicValue","_CryptoBase2","_this2","target","SetAttrValue","_i3","genAttrElement","_C","_CryptoBase3","_this3","Fixed64","fixed64_classCallCheck","f","Fixed64Size","AbiFunction","returntype","abiFunction_classCallCheck","getName","j","payload_payload","needStorage","version","author","email","description","boolValue","codeVersion","TransactionAttributeUsage","InvokeCode","invokeCode_classCallCheck","invokeCode_possibleConstructorReturn","txAttribute_TransactionAttribute","TransactionAttribute","txAttribute_classCallCheck","txAttribute_createClass","usage","Script","DescriptionUrl","Description","Nonce","ss","dataLen","TxType","txSignature_TxSignature","TxSignature","txSignature_classCallCheck","txSignature_createClass","invocationScript","sigData","verificationScript","pubKeys","M","getParamsFromProgram","info","end","_sr","getProgramInfo","txSignature_asyncToGenerator","signAsync","t0","sent","Fee","transaction_classCallCheck","transaction_createClass","serialize","payer","fee","fixed64","transaction_Transaction","Transaction","txAttributes","gasPrice","gasLimit","serializeUnsignedData","serializeSignedData","payload","ProgramHexString","ProgramSha256","tx","Invoke","invokeCode","Deploy","deployCode","attributeLength","txAttribute","sigLength","Transfer","_Transaction","transfer_classCallCheck","transfer_possibleConstructorReturn","transfer_inherits","Default_params","Action","Version","Type","Op","transactionBuilder_signTransaction","signTransactionAsync","transactionBuilder_asyncToGenerator","createAsync","transactionBuilder_addSign","transactionBuilder_equalPks","pks1","pks2","transactionBuilder_signTx","signData","makeNativeContractTx","funcName","contractAddr","SYSCALL","transactionBuilder_makeInvokeTransaction","abiFunc","abi_abiFunction","APPCALL","makeDeployCodeTransaction","desp","dc","buildTxParam","PreExec","serialized","assign","Data","buildRpcParam","method","jsonrpc","buildRestfulParam","sendRawTxRestfulUrl","preExec","charAt","restUrl","account_HDKey","account_Account","Account","account_classCallCheck","account_createClass","toJsonObj","_extends","lock","enc-alg","isDefault","signatureScheme","password","exportPrivateKey","encryptedPrivateKey","saltBase64","account","trim","parseJsonObj","obj","extra","urlConsts","RestClient","restClient_classCallCheck","action","encodeURIComponent","hexData","userId","concatParams","body","txHash","codeHash","asset","to","toLowerCase","Deferred","deferred_classCallCheck","resolve","_resolve","reject","reason","_reject","_promise","Promise","deferred_createClass","websocketBuilder_sendSubscribe","SubscribeEvent","SubscribeJsonBlock","SubscribeRawBlock","SubscribeBlockTxHashs","websocketBuilder_sendRawTransaction","websocketBuilder_getRawTransaction","Hash","Raw","websocketBuilder_getRawTransactionJson","websocketBuilder_getBlock","Height","websocketBuilder_getBlockJson","websocketBuilder_getBalance","Addr","getUnboundOng","websocketBuilder_getContract","websocketBuilder_getContractJson","websocketBuilder_getSmartCodeEvent","websocketBuilder_getBlockHeightByTxHash","websocketBuilder_getStorage","websocketBuilder_getMerkleProof","websocketBuilder_getAllowance","Asset","From","To","websocketBuilder_getBlockHash","websocketBuilder_getBlockTxsByHeight","websocketBuilder_getGrantOng","websocketBuilder_getMempoolTxState","websocketSender_WebsocketSender","WebsocketSender","debug","websocketSender_classCallCheck","wsp","external_websocket_as_promised_","createWebSocket","socketUrl","html5_websocket_","attachRequestId","websocketSender_extends","Id","extractRequestId","packMessage","unpackMessage","message","onOpen","addListener","onClose","onSend","onMessage","onError","websocketSender_createClass","websocketSender_asyncToGenerator","response","close","open","sendRequest","requestId","generateReqId","finish","_x4","listener","onUnpackedMessage","websocketClient_WebsocketClient","WebsocketClient","autoClose","websocketClient_classCallCheck","promises","sender","notifyListener","websocketClient_createClass","websocketClient_asyncToGenerator","raw","send","_ref2","_callee2","subscribeEvent","subscribeJsonBlock","subscribeRawBlock","subscribeBlockTxHashes","_context2","_ref3","_callee3","sendResult","deferred","waitNotify","_context3","Result","promise","_x10","_ref4","_callee4","_context4","_x11","_ref5","_callee5","_context5","_x12","_ref6","_callee6","_context6","_ref7","_callee7","_context7","_ref8","_callee8","_context8","_x13","_ref9","_callee9","_context9","_x14","_ref10","_callee10","_context10","_x15","_ref11","_callee11","_context11","_x16","_ref12","_callee12","_context12","_x17","_ref13","_callee13","_context13","_x18","_ref14","_callee14","_context14","_x19","_ref15","_callee15","_context15","_x20","_ref16","_callee16","_context16","_x21","_x22","_ref17","_callee17","_context17","_x23","_ref18","_callee18","_context18","_x24","_x25","_x26","_ref19","_callee19","height","_context19","_x27","_ref20","_callee20","_context20","_x28","_ref21","_callee21","_context21","_ref22","_callee22","_context22","_x29","_ref23","_callee23","_context23","_ref24","_callee24","_context24","_x30","_ref25","_callee25","_context25","_ref26","_callee26","_context26","_ref27","_callee27","_context27","_x32","TxHash","delete","warn","AbiInfo","abiInfo_classCallCheck","functions","entrypoint","attestClaimTxBuilder_abiInfo","abi_abiInfo","parseJson","events","attestClaimTxBuilder_contractHash","getHash","replace","contractAddress","buildCommitRecordTx","claimId","issuer","subject","getFunction","p1","p2","p3","buildRevokeRecordTx","revokerOntid","name1","type1","buildGetRecordStatusTx","AttestNotifyEvent","attestNotifyEvent_classCallCheck","attestNotifyEvent_createClass","Desc","attestNotifyEvent_Result","State","GasConsumed","Notify","ContractAddress","States","createCodeParamScript","SWAP","APPEND","buildNativeCodeScript","NEWSTRUCT","isTypedArray","ONTID_CONTRACT","ONTID_METHOD","regIDWithPublicKey","regIDWithAttributes","addAttributes","removeAttribute","getAttributes","getDDO","addKey","removeKey","getPublicKeys","addRecovery","changeRecovery","getKeyState","buildRegisterOntidTx","struct","buildRegIdWithAttributes","attributes","attrLen","buildAddAttributeTx","buildRemoveAttributeTx","buildGetAttributesTx","buildGetDDOTx","buildAddControlKeyTx","newPk","userKey","buildRemoveControlKeyTx","pk2Remove","buildGetPublicKeysTx","buildAddRecoveryTx","recovery","buildChangeRecoveryTx","newrecovery","oldrecovery","buildGetPublicKeyStateTx","pkId","ddo_PublicKeyWithId","PublicKeyWithId","ddo_classCallCheck","ddo_createClass","ddo_DDOAttribute","DDOAttribute","ddo_DDO","DDO","ddo","pkLen","recoveryLen","message_Message","Message","metadata","message_classCallCheck","messageId","external_uuid_","message_createClass","jwt","creator","parts","header","deserializeHeader","deserializePayload","deserializeJWT","payloadFromJSON","rest","stringified","_JSON$parse","jti","iss","issuedAt","iat","expireAt","exp","_objectWithoutProperties","alg","fromLabelJWS","kid","message_asyncToGenerator","retrievePublicKey","serializeUnsigned","verifyKeyOwnership","verifyExpiration","retrievePublicKeyState","_x5","serializeHeader","serializePayload","signatureEncoded","serializeJWT","typ","extractOntId","payloadToJSON","message_extends","ontId","client","extractKeyId","rest_restClient","sendRawTransaction","_x6","_x7","fromHexLabel","_x8","_x9","RevocationType","Status","claim_Claim","_Message","Claim","useProof","claim_classCallCheck","claim_possibleConstructorReturn","claim_inherits","claim_createClass","_get","claim_asyncToGenerator","checkAttest","getStatus","serializeProof","attesterId","subjectId","claim_GetStatusResponse","status","ATTESTED","issuerId","ver","@context","context","clm","content","clm-rev","revocation","GetStatusResponse","NOTFOUND","identity_ControlData","ControlData","identity_classCallCheck","identity_createClass","_extends2","identity_extends","_defineProperty","cd","identity_Identity","Identity","controls","control","toJson","identity","generateOntid","fromOntid","fromJson","TransactionNeo_TransactionNeo","TransactionNeo","TransactionNeo_classCallCheck","TransactionNeo_createClass","scripts","serializeExclusiveData","inputs","outputs","getHashData","InvocationTransaction_InvocationTransaction","_TransactionNeo","InvocationTransaction","InvocationTransaction_classCallCheck","InvocationTransaction_possibleConstructorReturn","InvocationTransaction_inherits","InvocationTransaction_createClass","script","gas","NeoRpc_NeoRpc","NeoRpc","NeoRpc_classCallCheck","NeoRpc_createClass","req","makeRequest","toHexString","Program_Program","Program","Program_classCallCheck","Program_createClass","parameter","program","pks","SmartContract_SmartContract","SmartContract","SmartContract_classCallCheck","SmartContract_createClass","addr","makeInvocationTransaction","attr1","attr2","TransactionInput_TransactionInput","TransactionInput","TransactionInput_classCallCheck","TransactionInput_createClass","prevHash","prevIndex","input","TransactionOutput_TransactionOutput","TransactionOutput","TransactionOutput_classCallCheck","TransactionOutput_createClass","assetId","scriptHash","output","readLong","RpcClient","rpcClient_classCallCheck","ONT_CONTRACT","ONG_CONTRACT","getTokenContract","tokenType","verifyAmount","lte","ontAssetTxBuilder_makeTransferTx","contract","makeWithdrawOngTx","ontAssetTxBuilder_makeQueryAllowanceTx","makeQueryBalanceTx","deserializeTransferTx","contractIndex1","lastIndexOf","contractIndex2","contractIndex","max","paramsEnd","methodStr","_methodStr","numTmp","fromHexstr","_from","_to","_numTmp","_amount","oep8TxBuilder_Oep8State","Oep8State","tokenId","oep8TxBuilder_classCallCheck","oep8TxBuilder_TransferFrom","TransferFrom","spender","FunctionNames","oep8TxBuilder_Oep8TxBuilder","Oep8TxBuilder","oep8TxBuilder_createClass","sendAddr","recvAddr","func","states","temp","state","owner","compoundNum","wallet_Wallet","Wallet","wallet_classCallCheck","defaultOntid","defaultAccountAddress","identities","accounts","wallet_createClass","createTime","wallet","toISOString","sdk_HDKey","CONTRACT_HASH","NEO_NODE","sdk_SDK","SDK","sdk_classCallCheck","sdk_createClass","node","SERVER_NODE","port","REST_PORT","restClient","SOCKET_PORT","error","transformPassword","addIdentity","errResult","PreExec_ERROR","NETWORK_ERROR","encryptedPrivateKeyObj","importIdentity","getDecryptError","SUCCESS","UNKNOWN_ONTID","walletStr","mnemonicHex","generateFromMnemonic","mnemonicEnc","decMne","importAccount","claimData","saltHex","claim","path","valueObj","Context","_obj","serializePgp","addressObj","request","_obj2","token","fromAddress","toAddress","_result","_result2","_result3","_result4","identityDataStr","accountDataStr","_obj3","wif","serializeWIF","deserializeWIF","keystore","keyStoreObj","_obj4","_obj5","getAllowance","getSmartCodeEvent","requiredSignatureNum","allRelatedPks","pubs","fromMultiPubKeys","_result5","txData","txDada","_result6","signedHash","recv","abiInfo","setParamsValue","makeInvokeTransaction","programFromParams","programFromPubKey","contractHash","oep8","makeQueryBalanceOfTx","makeQueryBalancesTx","vals","makeQueryTotalBalanceTx","payerAddress","makeTransferTx","makeCompoundTx","governanceContractTxBuilder_contractAddress","makeRegisterCandidateTx","peerPubKey","keyNo","userAddr","initPos","makeUnregisterCandidateTx","makeApproveCandidateTx","makeRejectCandidateTx","makeVoteForPeerTx","peerPubKeys","posList","makeUnvoteForPeerTx","makeWithdrawTx","withdrawList","makeQuitNodeTx","makeChangeAuthorizationTx","maxAuthorize","makeSetPeerCostTx","peerCost","makeWithdrawFeeTx","makeAuthorizeForPeerTx","peerPubKeyList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","makeUnauthorizeForPeerTx","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","makeAddInitPosTx","peerPubkey","makeReduceInitPosTx","makeWithdrawPeerUnboundOngTx","governanceContractTxBuilder_asyncToGenerator","getStorage","governanceContractTxBuilder_PeerAttributes","getSplitFeeAddress","governanceContractTxBuilder_SplitFeeAddress","getAuthorizeInfo","governanceContractTxBuilder_AuthorizeInfo","getGovernanceView","viewRes","view","governanceView","governanceContractTxBuilder_GovernanceView","getPeerPoolMap","key1","key2","keyP","readInt","governanceContractTxBuilder_PeerPoolItem","getGlobalParam","governanceContractTxBuilder_GlobalParam","getTotalStake","governanceContractTxBuilder_TotalStake","getPeerUnboundOng","totalStake","blockHeight","block","timeStamp","getBlockHeight","getBlockJson","Header","Timestamp","stake","timeOffset","GovernanceView","governanceContractTxBuilder_classCallCheck","txhash","governanceContractTxBuilder_createClass","g","PeerPoolItem","totalPos","PeerAttributes","t2PeerCost","t1PeerCost","tPeerCost","field1","field2","field3","field4","pr","SplitFeeAddress","sfa","AuthorizeInfo","consensusPos","freezePos","newPos","withdrawPos","withdrawFreezePos","withdrawUnfreezePos","ai","GlobalParam","gp","feeHexStr","candidateFeeStr","candidateFee","minStr","minInitState","candidateNumStr","candidateNum","posLimitStr","posLimit","aStr","bStr","yStr","yita","pStr","penalty","TotalStake","ts","token_Transfers","Transfers","token_classCallCheck","token_createClass","stateLen","token_State","token_TokenTransfer","TokenTransfer","tf","token_Contract","Contract","token_TransferFrom","functionNames","oep4TxBuilder_Oep4State","Oep4State","oep4TxBuilder_classCallCheck","oep4TxBuilder_Oep4TxBuilder","Oep4TxBuilder","oep4TxBuilder_createClass","Oep5Param","toAcct","oep5TxBuilder_classCallCheck","oep5TxBuilder_FunctionNames","oep5TxBuilder_Oep5TxBuilder","Oep5TxBuilder","oep5TxBuilder_createClass","oep5Param","oep5Params","src_ONT","src_classCallCheck","TransactionBuilder","transactionBuilder_namespaceObject","OntAssetTxBuilder","ontAssetTxBuilder_namespaceObject","GovernanceTxBuilder","governanceContractTxBuilder_namespaceObject","utils","utils_namespaceObject","scrypt_namespaceObject","CONST","consts_namespaceObject","Token","token_namespaceObject","OntidContract","ontidContractTxBuilder_namespaceObject","rpcClient","Crypto","crypto_namespaceObject","ScriptBuilder","scriptBuilder_namespaceObject","NeoCore","neocore_namespaceObject","Oep4","oep4TxBuilder_namespaceObject","Oep8","oep8TxBuilder_namespaceObject","Oep5","oep5TxBuilder_namespaceObject","__webpack_exports__"],"mappings":"2BACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,oBClFAhC,EAAAD,QAAAkC,QAAA,4BCAAjC,EAAAD,QAAAkC,QAAA,wBCAAjC,EAAAD,QAAAkC,QAAA,+BCAAjC,EAAAD,QAAAkC,QAAA,wBCAAjC,EAAAD,QAAAkC,QAAA,6BCAAjC,EAAAD,QAAAkC,QAAA,wBCAAjC,EAAAD,QAAAkC,QAAA,2BCAAjC,EAAAD,QAAAkC,QAAA,uBCAAjC,EAAAD,QAAAkC,QAAA,0BCAAjC,EAAAD,QAAAkC,QAAA,uBCAAjC,EAAAD,QAAAkC,QAAA,gCCAAjC,EAAAD,QAAAkC,QAAA,iDCAAjC,EAAAD,QAAAkC,QAAA,sBCAAjC,EAAAD,QAAAkC,QAAA,yBCAAjC,EAAAD,QAAAkC,QAAA,+BCAAjC,EAAAD,QAAAkC,QAAA,oCCAAjC,EAAAD,QAAAkC,QAAA,iDCAAjC,EAAAD,QAAAkC,QAAA,wCCAAjC,EAAAD,QAAAkC,QAAA,8rQCkBYC,ECAPC,SCCQC,EAAe,KAEfC,GACTC,KAAM,KACNC,UAAW,EACXC,SAAU,EACVC,KAAM,IAIGC,EAAa,OAEbC,EAAW,KAGXC,EAAiB,MAEjBC,GACTC,UAAW,QACXC,YACIC,MAAO,UAIFC,EAAiB,mBAEjBC,EAAY,kBAKZC,EAAY,mBAEZC,EAAiB,QACjBC,EAAe,QACfC,EAAiB,QAEjBC,GACTC,WAAY,kBACZC,UAAW,sBACXC,eAAgB,uBAGPC,GACTC,KAAM,UACNC,KAAM,WAGGC,GACTC,WAAA,QAAoBb,EAApB,IAAiCG,EAEjCW,QAAA,UAAmBd,EAAnB,IAAgCI,EAEhCW,SAAA,UAAoBf,EAApB,IAAiCE,EAEjCc,mBAAA,UAA8BhB,EAA9B,IAA2CE,EAAiBG,EAASE,WAG5DU,GACTJ,WAAA,QAAoBZ,EAApB,IAAiCE,EAEjCW,QAAA,UAAmBb,EAAnB,IAAgCG,EAAhC,IAEAW,SAAA,UAAoBd,EAApB,IAAiCC,EAAjC,IAEAc,mBAAA,UAA8BhB,EAA9B,IAA2CE,EAAiBG,EAASE,WAI5DW,GACTC,IAAK,MACLC,IAAK,OAGIC,EAAoB,IAEpBC,EAAqB,yBAErBC,EAAkB,GAGlBC,EAAiB,qBAEjBC,GAA6B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEhFC,EAAwB,QAExBC,EAAmB,IAEnBC,EAA0B,0BF1FvC,SAAY5C,GACRA,IAAA,qBACAA,IAAA,yCACAA,IAAA,yCACAA,IAAA,+CACAA,IAAA,yCACAA,IAAA,uCACAA,IAAA,uCACAA,IAAA,iDACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,iDACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,yCACAA,IAAA,uCACAA,IAAA,yCAEAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,sCACAA,IAAA,mCAEAA,IAAA,oCAvBJ,CAAYA,WCAZ,SAAKC,GAEDA,IAAA,iBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,0BACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBAGAA,IAAA,cACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,yBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,yBACAA,IAAA,uCAGAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBAGAA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBAGAA,IAAA,qBACAA,IAAA,eACAA,IAAA,aACAA,IAAA,eACAA,IAAA,mBAOAA,IAAA,eACAA,IAAA,eAGAA,IAAA,qBACAA,IAAA,eACAA,IAAA,eACAA,IAAA,aACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,uBACAA,IAAA,qBACAA,IAAA,yBACAA,IAAA,+BACAA,IAAA,aACAA,IAAA,aACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,qBAIAA,IAAA,iBACAA,IAAA,qBACAA,IAAA,uBACAA,IAAA,uBAEAA,IAAA,yBAEAA,IAAA,mCAIAA,IAAA,2BACHA,IAAA,iBACAA,IAAA,qBACAA,IAAA,yBACAA,IAAA,uBACAA,IAAA,yBACAA,IAAA,2BACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,uBACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,iBACAA,IAAA,qBAGAA,IAAA,mBACAA,IAAA,6BArID,CAAKA,WAwIL,IAAA4C,EAAA,4YE9HM,SAAAC,GAAuBC,GAGzB,IAFA,IAAMC,KAECD,EAAIE,QAAU,GACjBD,EAAOE,KAAKC,SAASJ,EAAIK,UAAU,EAAG,GAAI,KAC1CL,EAAMA,EAAIK,UAAU,EAAGL,EAAIE,QAG/B,OAAOD,EAOL,SAAAK,GAAuBC,GAGzB,IAFA,IAAIN,EAAiB,GACfO,EAAuB,IAAIC,WAAWF,GACnCvF,EAAI,EAAGA,EAAIwF,EAASE,WAAY1F,IAAK,CAC1C,IAAIgF,EAAMQ,EAASxF,GAAG2F,SAAS,IAM/BV,GALAD,EAAqB,IAAfA,EAAIE,OACJ,KACe,IAAfF,EAAIE,OACA,IAAMF,EACNA,EAGd,OAAOC,EAOL,SAAAW,GAAiBC,GACnB,OAAOC,OAAOC,aAAaC,MAAM,KAAM,IAAIP,WAAWI,IAOpD,SAAAI,GAAiBjB,GAGnB,IAFA,IAAMa,EAAM,IAAIK,YAAYlB,EAAIE,QAC1BiB,EAAU,IAAIV,WAAWI,GACtB7F,EAAI,EAAGoG,EAASpB,EAAIE,OAAQlF,EAAIoG,EAAQpG,IAC7CmG,EAAQnG,GAAKgF,EAAIqB,WAAWrG,GAEhC,OAAO6F,EAOL,SAAAS,GAAqBtB,GACvB,OAAOM,GAAaW,GAAOjB,IAOzB,SAAAuB,GAAqBvB,GACvB,OAAOY,GAAOb,GAAaC,IAOzB,SAAAwB,GAAuBC,GACzB,IAAIxB,EAAS,GAGb,OAFAA,GAAUyB,GAAWD,EAAIvB,OAAS,GAClCD,GAAUwB,EAQR,SAAAE,GAAuB3B,GACzB,IAAIC,EAAS,GACPwB,EAAMH,GAAWtB,GAIvB,OAFAC,GADeyB,GAAWD,EAAIvB,OAAS,GAEvCD,GAAUwB,EAQR,SAAAG,GAAuBC,GACzB,OAAOA,EAAI,KAAO,KAQhB,SAAAC,GAAiBC,EAAcC,GACjC,GAAID,EAAK7B,SAAW8B,EAAK9B,OACrB,MAAM,IAAI+B,MAAM,iCAEpB,GAAIF,EAAK7B,OAAS,GAAM,EACpB,MAAM,IAAI+B,MAAM,uBAKpB,IAFA,IAAMhC,EAAS,IAAIiB,YAAYa,EAAK7B,OAAS,GACvCgC,EAAU,IAAIzB,WAAWR,GACtBjF,EAAI,EAAGA,EAAI+G,EAAK7B,OAAQlF,GAAK,EAElCkH,EAAQlH,EAAI,GAAMoF,SAAS2B,EAAKI,OAAOnH,EAAG,GAAI,IAAMoF,SAAS4B,EAAKG,OAAOnH,EAAG,GAAI,IAEpF,OAAOsF,GAAaL,GAUjB,IAAMmC,GAAgB,SAACC,GAA+C,IAAlC7E,EAAkC8E,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAA3B,EAAGE,EAAwBF,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GACzE,GAAID,EAAM,EACN,MAAM,IAAII,WAAW,mBAEzB,GAAIjF,EAAO,GAAM,EACb,MAAM,IAAIyE,MAAM,gCAEpB,IAAKS,OAAOC,cAAcN,GACtB,MAAM,IAAII,WAAJ,QAAuBJ,EAAvB,4BAGV7E,GAAc,EACd,IAAIoF,EAAYP,EAAI1B,SAAS,IAK7B,OAJAiC,EAAYA,EAAU1C,OAAS1C,GAAS,EAAIoF,GAAa,IAAIC,OAAOrF,GAAQoF,GAAWvC,UAAUuC,EAAU1C,QACvGsC,IACAI,EAAYE,GAAWF,IAEpBA,GAQElB,GAAa,SAACW,GACvB,OAAIA,EAAM,IACCD,GAAcC,GACdA,GAAO,MAEP,KAAOD,GAAcC,EAAK,GAAG,GAC7BA,GAAO,WAEP,KAAOD,GAAcC,EAAK,GAAG,GAG7B,KAAOD,GAAcC,EAAK,GAAG,IAW/BS,GAAa,SAACrB,GACvB,GAAIA,EAAIvB,OAAS,GAAM,EACnB,MAAM,IAAI+B,MAAJ,qBAA+BR,GAGzC,IADA,IAAIsB,EAAM,GACD/H,EAAIyG,EAAIvB,OAAS,EAAGlF,GAAK,EAAGA,GAAK,EACtC+H,GAAOtB,EAAIU,OAAOnH,EAAG,GAEzB,OAAO+H,GAGL,SAAAC,GAA0BC,GAC5B,IAAMC,EAAOC,OAAOC,KAAKH,EAAO,OAC5BI,EAAOC,MAAMF,KAAKF,EAAKK,SAAS,IAMpC,OALUF,EAAKA,EAAKnD,OAAS,IAEpB,GAAM,IACXmD,EAAOA,EAAKG,OAAOF,MAAM,EAAID,EAAKnD,QAAQuD,KAAK,OAE5CC,EAAA,YAAiBL,GAGtB,SAAAM,GAAwB1H,GAW1B,IAVA,IAAIoH,EAAOpH,EAAM2H,YACXC,EAAU5H,EAAM6H,MAAMF,YACxBG,OAAA,EAMAC,EAJAD,EADA9H,EAAMgI,aACC,IAEA,EAGPC,EAAM,EACDlJ,EAAIqI,EAAKnD,OAAS,EAAGlF,GAAK,EAAGA,IAClC,GAAIqI,EAAKrI,KAAO+I,EAAM,CAClBC,EAAI/H,EAAMgI,aAAeJ,EAAQ7I,GAAKqI,EAAKrI,GAC3CkJ,EAAMlJ,EAAI,EACV,MAQR,OALAqI,EAAOA,EAAKc,MAAM,EAAGD,GAEjBF,GAAK,GAAM,GACXX,EAAKlD,KAAKlE,EAAMgI,aAAe,IAAM,GAElC,IAAId,OAAOE,GAAM1C,SAAS,OAQrC,IAAMyD,GAAN,WAII,SAAAA,IAAoB,IAARpE,EAAQsC,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAF,GACd,GADgB+B,GAAAC,KAAAF,GACZpE,EAAIE,OAAS,GAAM,EACnB,MAAM,IAAI+B,MAAM,+BAEpBqC,KAAKtE,IAAMA,EACXsE,KAAKJ,IAAM,EACXI,KAAK9G,KAAO8G,KAAKtE,IAAIE,OAAS,EAVtC,OAAAqE,GAAAH,IAAA7H,IAAA,UAAAN,MAAA,WAiBQ,OAAOqI,KAAKJ,KAAOI,KAAKtE,IAAIE,UAjBpC3D,IAAA,OAAAN,MAAA,SAwBSgH,GACD,GAAIqB,KAAKE,UACL,MAAM,IAAIvC,MAAM,iCAEpB,IAAMc,EAAMuB,KAAKtE,IAAImC,OAAOmC,KAAKJ,IAAa,EAARjB,GAEtC,OADAqB,KAAKJ,KAAe,EAARjB,EACLF,KA9BfxG,IAAA,cAAAN,MAAA,SAiCgBgH,GACR,GAAMqB,KAAKJ,IAAc,EAARjB,EAAa,EAC1B,MAAM,IAAIhB,MAAM,kCAEpBqC,KAAKJ,KAAe,EAARjB,KArCpB1G,IAAA,qBAAAN,MAAA,WA6CQ,IAAMwI,EAAQH,KAAKtE,IAAI0E,QAAQ,KAAMJ,KAAKJ,KAC1C,IAAe,IAAXO,EACA,MAAM,IAAIxC,MAAM,wBAGpB,IAAMc,EAAMuB,KAAKtE,IAAIK,UAAUiE,KAAKJ,IAAKO,GAEzC,OADAH,KAAKJ,IAAMO,EAAQ,EACZ1B,KApDfxG,IAAA,gBAAAN,MAAA,WA2DQ,IAAM0I,EAAcL,KAAKM,cACzB,OAAoB,IAAhBD,EACO,GAGJL,KAAKO,KAAKF,MAhEzBpI,IAAA,cAAAN,MAAA,WAwEQ,IAAI6I,EAAM1E,SAASkE,KAAKO,KAAK,GAAI,IAUjC,OARY,MAARC,EACAA,EAAM1E,SAAS0C,GAAWwB,KAAKO,KAAK,IAAK,IAC1B,MAARC,EACPA,EAAM1E,SAAS0C,GAAWwB,KAAKO,KAAK,IAAK,IAC1B,MAARC,IACPA,EAAM1E,SAAS0C,GAAWwB,KAAKO,KAAK,IAAK,KAGtCC,KAlFfvI,IAAA,YAAAN,MAAA,WAyFQ,OAAOmE,SAAS0C,GAAWwB,KAAKO,KAAK,IAAK,OAzFlDtI,IAAA,aAAAN,MAAA,WAgGQ,OAAOmE,SAAS0C,GAAWwB,KAAKO,KAAK,IAAK,OAhGlDtI,IAAA,aAAAN,MAAA,WAuGQ,OAAOmE,SAAS0C,GAAWwB,KAAKO,KAAK,IAAK,OAvGlDtI,IAAA,UAAAN,MAAA,WA8GQ,OAAOmE,SAAS0C,GAAWwB,KAAKO,KAAK,IAAK,OA9GlDtI,IAAA,WAAAN,MAAA,WAqHQ,OAAOmE,SAAS0C,GAAWwB,KAAKO,KAAK,IAAK,OArHlDtI,IAAA,cAAAN,MAAA,WAyHQ,OAAsC,IAA/BmE,SAASkE,KAAKO,KAAK,GAAI,QAzHtCT,EAAA,GA6HMW,GAAN,oBAAAA,IAAAV,GAAAC,KAAAS,GACIT,KAAAU,YADJ,OAAAT,GAAAQ,IAAAxI,IAAA,KAAAN,MAAA,SAIOgJ,EAAcC,QACsB,IAAxBZ,KAAKU,SAASC,KACrBX,KAAKU,SAASC,OAElBX,KAAKU,SAASC,GAAM9E,KAAK+E,MARjC3I,IAAA,UAAAN,MAAA,SAgBYgJ,EAAcE,GAClB,GAAIb,KAAKU,SAASC,aAAiB3B,MAE/B,IADA,IAAM0B,EAAWV,KAAKU,SAASC,GACtBjK,EAAI,EAAG8J,EAAME,EAAS9E,OAAQlF,EAAI8J,EAAK9J,IAC5CgK,EAAShK,GAAGmK,MApB5B5I,IAAA,MAAAN,MAAA,SA0BQgJ,UACOX,KAAKU,SAASC,OA3B7BF,EAAA,GA+BaK,GAAwB,SAACnF,EAAgBoF,GAC9CC,QAAUA,OAAOC,QACjBD,OAAOC,OAAU5H,EAAjB,MAAqC0H,EAArC,WAAwDpF,IAInDuF,GAAY,SAACC,EAAaC,GACnC,OAAOC,EAAAC,EAAMC,KAAKJ,EAAKC,GAAQI,KAAK,SAACC,GAGjC,OADAC,QAAQC,IAAI,aAAeF,GACpBA,IACRG,MAAM,SAACC,GAIN,OAFAH,QAAQC,IAAI,aAAeG,KAAKC,UAAUF,IAEnCA,KAOT,SAAAG,KACF,OAAOC,KAAKC,MAAMC,KAAKH,MAAQ,KAQ7B,SAAAI,GAAiBrD,GACnB,IAAM5B,EAAMkF,EAAA,IAAaC,IAAIC,MAAMxD,GAEnC,OADYsD,EAAA,OAAgBlF,GAAKd,WAS/B,SAAAmG,GAAoBzD,GACtB,IAAM5B,EAAMkF,EAAA,IAAaC,IAAIC,MAAMxD,GAEnC,OADesD,EAAA,UAAmBlF,GAAKd,WASrC,SAAAoG,GAAkBC,GACpB,OAAOF,GAAUJ,GAAOM,IAQtB,SAAAC,GAA8BnC,GAChC,OAAOoC,GAAapC,GAQlB,SAAAqC,GAAsBrC,GACxB,OAAOxE,GAAa2G,GAAoBnC,IAGtC,SAAAsC,KAA4C,IACxCC,EAAS/G,GAAa2G,GADkB3E,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAF,KAE5C,OAAOgF,EAAA,kBAAwBD,GAG7B,SAAAE,GAAwBvH,GAC1B,OAAOsH,EAAA,kBAAwBtH,GAG7B,SAAAwH,GAA4B3F,GAC9B,IAAK,aAAa4F,KAAK5F,EAAElB,YACrB,MAAM1D,EAAWyK,eAKnB,SAAAC,GAAmB3H,GACrB,OAAOmD,OAAOC,KAAKpD,EAAK,UAAUW,SAAS,YAAcX,EAGvD,SAAA4H,GAAsB5H,GAExB,MADe,iBACDyH,KAAKzH,IAASA,EAAIE,OAAS,GAAM,EAG7C,SAAA2H,KACF,IAAIC,EAAQ,EADVC,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAEF,QAAA2F,EAAAC,EAAgBzI,EAAhB3D,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA2C,CACvCD,GADuCI,EAAAjM,OAFzC,MAAAkK,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAKFH,GAASnI,EACT,IAAM6I,EAAc9I,EAA0BQ,OAC9C,GAAmD,IAA/CR,EAA0B8I,EAAc,MACpCV,EAAQnI,EAAwBC,GAAqBA,GAAoBkI,GAC7E,MAAM,IAAI7F,MAAM,kCAEpB,OAAOtC,EAAwB6I,GAAeV,EAAQlI,GAGpD,SAAA6I,GAAyBC,EAAiBC,EAAqBC,GACjE,IAAIC,EAAS,EACb,GAAIF,GAAeC,EACf,OAAO,EAEX,IAAME,EAAmBjB,KACzB,GAAIc,EAAcG,EAAkB,CAChC,IAAIC,EAASxC,KAAKC,MAAMmC,EAAchJ,GAClCqJ,EAASL,EAAchJ,EACvBiJ,GAAaE,IACbF,EAAYE,GAIhB,IAFA,IAAMG,EAAO1C,KAAKC,MAAMoC,EAAYjJ,GAC9BuJ,EAAON,EAAYjJ,EAClBoJ,EAASE,GACZJ,IAAWlJ,EAAwBqJ,GAAUtJ,EAA0BqJ,GACvEA,IACAC,EAAS,EAEbH,IAAWK,EAAOF,GAAUtJ,EAA0BqJ,GAE1D,OAAOF,EAASH,8QC3fhB,SAAAS,EAAYlN,gGAAsBmN,CAAA9E,KAAA6E,GAC9B,IAAME,EAAK,IAAIC,EAAA,UAAUrN,GACzB,IAAKoN,EAAGE,aAAeF,EAAGpF,aACtB,MAAMhH,EAAWyK,eAErBpD,KAAKrI,MAAQA,qDAbCwF,GAGd,OAFAA,EAAMqB,GAAWrB,GAEV,IAAI0H,EADA,IAAIG,EAAA,UAAU7H,EAAK,IAAId,uDAoBlC,OADYgD,GADDD,EAAA,UAAeY,KAAKrI,uQC/BvC,IAAMuN,GAAN,WAiEI,SAAAA,EAAYC,EAAehI,EAAaiI,gGAAgBC,CAAArF,KAAAkF,GACpDlF,KAAKmF,MAAQA,EACbnF,KAAK7C,IAAMA,EACX6C,KAAKoF,SAAWA,EAEhBF,EAAgBI,OAAOzJ,KAAKmE,MAtEpC,OAAAuF,GAAAL,EAAA,OAAAjN,IAAA,UAAAN,MAAA,SAwBmBwF,GACX,IAAMqI,EAAON,EAAgBI,OAAOG,KAAK,SAAClI,GAAD,OAAOA,EAAEJ,MAAQA,IAC1D,QAAac,IAATuH,EACA,MAAM,IAAI7H,MAAM,wBAGpB,OAAO6H,KA9BfvN,IAAA,YAAAN,MAAA,SAsCqBwN,GACb,IAAMK,EAAON,EAAgBI,OAAOG,KAAK,SAAClI,GAAD,OAAOA,EAAE4H,QAAUA,IAC5D,QAAalH,IAATuH,EACA,MAAM,IAAI7H,MAAM,wBAGpB,OAAO6H,KA5CfvN,IAAA,eAAAN,MAAA,SAoDwBwN,GAChB,IAAMK,EAAON,EAAgBI,OAAOG,KAAK,SAAClI,GAAD,OAAOA,EAAE6H,WAAaD,IAC/D,QAAalH,IAATuH,EACA,MAAM,IAAI7H,MAAM,wBAGpB,OAAO6H,MA1DfN,EAAA,GACWA,GAAAI,UAEAJ,GAAAQ,gBAAkB,IAAIR,GAAgB,kBAAmB,EAAG,SAC5DA,GAAAS,gBAAkB,IAAIT,GAAgB,kBAAmB,EAAG,SAC5DA,GAAAU,gBAAkB,IAAIV,GAAgB,kBAAmB,EAAG,SAC5DA,GAAAW,gBAAkB,IAAIX,GAAgB,kBAAmB,EAAG,SAE5DA,GAAAY,kBAAoB,IAAIZ,GAAgB,oBAAqB,EAAG,WAEhEA,GAAAa,kBAAoB,IAAIb,GAAgB,oBAAqB,EAAG,WAEhEA,GAAAc,kBAAoB,IAAId,GAAgB,oBAAqB,EAAG,WAEhEA,GAAAe,kBAAoB,IAAIf,GAAgB,oBAAqB,EAAG,WAChEA,GAAAgB,mBAAqB,IAAIhB,GAAgB,qBAAsB,EAAG,SAClEA,GAAAiB,WAAa,IAAIjB,GAAgB,aAAc,EAAG,MAClDA,GAAAkB,gBAAkB,IAAIlB,GAAgB,kBAAmB,GAAI,oQCfxE,IAAMmB,GAAN,WAuCI,SAAAA,EAAYlB,EAAehI,EAAamJ,gGAA8BC,CAAAvG,KAAAqG,GAClErG,KAAKmF,MAAQA,EACbnF,KAAK7C,IAAMA,EACX6C,KAAKsG,cAAgBA,EAErBD,EAAQf,OAAOzJ,KAAKmE,MA5C5B,OAAAwG,GAAAH,EAAA,OAAApO,IAAA,UAAAN,MAAA,SAYmBwF,GACX,IAAMqI,EAAOa,EAAQf,OAAOG,KAAK,SAAClI,GAAD,OAAOA,EAAEJ,MAAQA,IAClD,QAAac,IAATuH,EACA,MAAM,IAAI7H,MAAM,wBAGpB,OAAO6H,KAlBfvN,IAAA,YAAAN,MAAA,SA0BqBwN,GACb,IAAMK,EAAOa,EAAQf,OAAOG,KAAK,SAAClI,GAAD,OAAOA,EAAE4H,QAAUA,IACpD,QAAalH,IAATuH,EACA,MAAM,IAAI7H,MAAM,wBAGpB,OAAO6H,MAhCfa,EAAA,GACWA,GAAAf,UAEAe,GAAAI,MAAQ,IAAIJ,GAAQ,QAAS,GAAMnB,GAAgBS,iBACnDU,GAAAK,IAAM,IAAIL,GAAQ,MAAO,GAAMnB,GAAgBiB,YAC/CE,GAAAM,MAAQ,IAAIN,GAAQ,QAAS,GAAMnB,GAAgBkB,2QCP9D,IAAMQ,GAAN,WA0CI,SAAAA,EAAYzB,EAAehI,EAAa0J,gGAAcC,CAAA9G,KAAA4G,GAClD5G,KAAKmF,MAAQA,EACbnF,KAAK7C,IAAMA,EACX6C,KAAK6G,OAASA,EAEdD,EAAWtB,OAAOzJ,KAAKmE,MA/C/B,OAAA+G,GAAAH,EAAA,OAAA3O,IAAA,UAAAN,MAAA,SAemBwF,GACX,IAAMqI,EAAOoB,EAAWtB,OAAOG,KAAK,SAAClI,GAAD,OAAOA,EAAEJ,MAAQA,IACrD,QAAac,IAATuH,EACA,MAAM,IAAI7H,MAAM,wBAGpB,OAAO6H,KArBfvN,IAAA,YAAAN,MAAA,SA6BqBwN,GACb,IAAMK,EAAOoB,EAAWtB,OAAOG,KAAK,SAAClI,GAAD,OAAOA,EAAE4H,QAAUA,IACvD,QAAalH,IAATuH,EACA,MAAM,IAAI7H,MAAM,wBAGpB,OAAO6H,MAnCfoB,EAAA,GACWA,GAAAtB,UAEAsB,GAAAI,UAAY,IAAIJ,GAAW,QAAS,EAAG,QACvCA,GAAAK,UAAY,IAAIL,GAAW,QAAS,EAAG,QACvCA,GAAAM,UAAY,IAAIN,GAAW,QAAS,EAAG,QACvCA,GAAAO,UAAY,IAAIP,GAAW,QAAS,EAAG,QACvCA,GAAAQ,UAAY,IAAIR,GAAW,YAAa,GAAI,aAC5CA,GAAAS,QAAU,IAAIT,GAAW,UAAW,GAAI,4WCCnD,IAAMU,GAAN,WAYI,SAAAC,EAAY9N,GAAiB+N,GAAAxH,KAAAuH,GACzBvH,KAAKvG,MAAQA,EAbrB,OAAAgO,GAAAF,EAAA,OAAAtP,IAAA,kBAAAN,MAAA,SAK2B+P,GACnB,OAAO,IAAIH,EACXX,GAAWe,UAAUD,EAAKjO,YAPlCgO,GAAAF,IAAAtP,IAAA,gBAAAN,MAAA,WAoBQ,OACI8B,MAAOuG,KAAKvG,MAAM0L,WArB9BoC,EAAA,GA6BMK,GAAN,WA2BI,SAAAC,EAAY5P,EAAasB,EAAqBC,GAA0BgO,GAAAxH,KAAA6H,GACpE7H,KAAK/H,IAAMA,OAEOgG,IAAd1E,IACAA,EAAY8M,GAAQsB,UAAUrO,EAAkBC,iBAGjC0E,IAAfzE,IACAA,EAAa8N,GAAcQ,gBAAgBxO,EAAkBE,aAGjEwG,KAAKzG,UAAYA,EACjByG,KAAKxG,WAAaA,EAvC1B,OAAAiO,GAAAI,IAAA5P,IAAA,cAAAN,MAAA,SAgDgBoQ,EAAaC,GACrB,OAAQA,GACR,KAAK9C,GAAgBQ,gBACjB,OAAOrD,EAAA,OAAgBA,EAAA,IAAaC,IAAIC,MAAMwF,IAAM1L,WACxD,KAAK6I,GAAgBS,gBACjB,OAAOtD,EAAA,OAAgBA,EAAA,IAAaC,IAAIC,MAAMwF,IAAM1L,WACxD,KAAK6I,GAAgBU,gBACjB,OAAOvD,EAAA,OAAgBA,EAAA,IAAaC,IAAIC,MAAMwF,IAAM1L,WACxD,KAAK6I,GAAgBW,gBACrB,KAAKX,GAAgBkB,gBACjB,OAAO/D,EAAA,OAAgBA,EAAA,IAAaC,IAAIC,MAAMwF,IAAM1L,WACxD,KAAK6I,GAAgBY,kBACjB,OAAO1O,OAAA6Q,GAAA,SAAA7Q,CAASqE,GAAasM,IACjC,KAAK7C,GAAgBa,kBACjB,OAAO3O,OAAA6Q,GAAA,SAAA7Q,CAASqE,GAAasM,IACjC,KAAK7C,GAAgBc,kBACjB,OAAO5O,OAAA6Q,GAAA,SAAA7Q,CAASqE,GAAasM,IACjC,KAAK7C,GAAgBe,kBACjB,OAAO7O,OAAA6Q,GAAA,SAAA7Q,CAASqE,GAAasM,IACjC,KAAK7C,GAAgBgB,mBACjB,OAAO7D,EAAA,UAAmBA,EAAA,IAAaC,IAAIC,MAAMwF,IAAM1L,WAC3D,KAAK6I,GAAgBiB,WACjB,OAAQ,IAAI+B,EAAA,KAAOC,IAAI1M,GAAasM,GAAM,OAC9C,QACI,MAAM,IAAIpK,MAAM,mCAxE5B1F,IAAA,oBAAAN,MAAA,SAiFsByQ,GACd,OAAQA,GACR,KAAKlD,GAAgBQ,gBACrB,KAAKR,GAAgBS,gBACrB,KAAKT,GAAgBU,gBACrB,KAAKV,GAAgBW,gBACrB,KAAKX,GAAgBY,kBACrB,KAAKZ,GAAgBa,kBACrB,KAAKb,GAAgBc,kBACrB,KAAKd,GAAgBe,kBACrB,KAAKf,GAAgBgB,mBACjB,OAAOlG,KAAKzG,YAAc8M,GAAQI,MACtC,KAAKvB,GAAgBkB,gBACjB,OAAOpG,KAAKzG,YAAc8M,GAAQM,MACtC,KAAKzB,GAAgBiB,WACjB,OAAOnG,KAAKzG,YAAc8M,GAAQK,IACtC,QACI,MAAM,IAAI/I,MAAM,qCAlG5B1F,IAAA,gBAAAN,MAAA,WA0GQ,OACI4B,UAAWyG,KAAKzG,UAAU4L,MAC1B3L,WAAYwG,KAAKxG,WAAW6O,gBAC5BpQ,IAAK+H,KAAK/H,SA7GtB4P,EAAA,wVC3BA,IAAMS,GAAN,SAAAC,GAAA,SAAAC,IAAA,OAAAC,GAAAzI,KAAAwI,oKAAAE,CAAA1I,MAAAwI,EAAAG,WAAAvR,OAAAwR,eAAAJ,IAAA9L,MAAAsD,KAAAhC,YAAA,gUAAA6K,CAAAL,EAA+BZ,IAA/BkB,GAAAN,IAAAvQ,IAAA,SAAAN,MAAA,SAkCWoQ,EAAwBgB,GAC3B,IAAK/I,KAAKgJ,kBAAkBD,EAAUxP,WAClC,MAAM,IAAIoE,MAAM,6CAID,iBAARoK,IACPA,EAAMA,EAAIkB,kBAGd,IAAIC,OAAA,EAQJ,OALIA,EAFAH,EAAUxP,YAAc2L,GAAgBiB,WAEjC4B,EAEA/H,KAAKmJ,YAAYpB,EAAKgB,EAAUxP,WAGpCyG,KAAKoJ,gBAAgBF,EAAMH,EAAUpR,MAAOoR,EAAUxP,cApDrEtB,IAAA,eAAAN,MAAA,WA6DQ,IAAIgE,EAAS,GACb,OAAQqE,KAAKzG,WACb,KAAK8M,GAAQI,MACT9K,GAAUqE,KAAK/H,IACf,MACJ,KAAKoO,GAAQM,MACb,KAAKN,GAAQK,IACT/K,GAAUmC,GAAckC,KAAKzG,UAAU4D,KACvCxB,GAAUmC,GAAckC,KAAKxG,WAAWC,MAAM0D,KAC9CxB,GAAUqE,KAAK/H,IAGnB,OAAO0D,KAzEf1D,IAAA,kBAAAN,MAAA,SAkFoBuR,EAAcH,EAAmBX,GAC7C,OAAQA,GACR,KAAKlD,GAAgBQ,gBACrB,KAAKR,GAAgBS,gBACrB,KAAKT,GAAgBU,gBACrB,KAAKV,GAAgBW,gBACrB,KAAKX,GAAgBY,kBACrB,KAAKZ,GAAgBa,kBACrB,KAAKb,GAAgBc,kBACrB,KAAKd,GAAgBe,kBACrB,KAAKf,GAAgBgB,mBACjB,OAAOlG,KAAKqJ,qBAAqBH,EAAMH,GAC3C,KAAK7D,GAAgBkB,gBACjB,OAAOpG,KAAKsJ,qBAAqBJ,EAAMH,GAC3C,KAAK7D,GAAgBiB,WACjB,OAAOnG,KAAKuJ,mBAAmBL,EAAMH,GACzC,QACI,MAAM,IAAIpL,MAAM,qCAnG5B1F,IAAA,uBAAAN,MAAA,SA6GyBuR,EAAcH,GAC/B,IAAMvR,EAAIuR,EAAUlL,OAAO,EAAG,IACxBpF,EAAIsQ,EAAUlL,OAAO,GAAI,IAG/B,OADW,IAAI2L,EAAA,GAAYxJ,KAAKxG,WAAWC,MAAMoN,QACvC4C,OAAOP,GAAQ1R,IAAGiB,KAAKuH,KAAK/H,IAAK,UAlHnDA,IAAA,uBAAAN,MAAA,SA2HyBuR,EAAcH,GAC/B,IAAMvR,EAAIuR,EAAUlL,OAAO,EAAG,IACxBpF,EAAIsQ,EAAUlL,OAAO,GAAI,IAG/B,OADc,IAAI2L,EAAA,MAAexJ,KAAKxG,WAAWC,MAAMoN,QAC1C4C,OAAOP,GAAQ1R,IAAGiB,KAAKuH,KAAK/H,IAAK,UAhItDA,IAAA,qBAAAN,MAAA,SA2IuBuR,EAAcH,GAC7B,IAAMW,EAAS,IAAI5J,GAAaiJ,GAE1BY,EAAK1M,GAAWyM,EAAOE,sBAC7B,GAAID,IAAOjQ,GAAyB,KAAPiQ,EACzB,MAAM,IAAIhM,MAAM,4BAGpB,IAAMnG,EAAIkS,EAAOnJ,KAAK,IAChB9H,EAAIiR,EAAOnJ,KAAK,IAGtB,OADgB2H,EAAA,IAAI2B,WAAW7J,KAAK/H,KACrBwR,OAAOhO,GAAayN,GAAO1R,EAAGiB,QAvJrDR,IAAA,iBAAAN,MAAA,SAQ0BmS,GAAqC,IAAnBlO,EAAmBoC,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAF,GACrD,GAAe,KAAXpC,EAAe,CACf,IAAMrC,EAAY8M,GAAQI,MACpBhN,EAAQmN,GAAWK,UAEzB,OAAO,IAAIuB,EADAsB,EAAGvJ,KAAK,IACMhH,EAAW,IAAI+N,GAAc7N,IAEtD,IAAMsQ,EAAejO,SAASgO,EAAGvJ,KAAK,GAAI,IACpCyJ,EAAWlO,SAASgO,EAAGvJ,KAAK,GAAI,IAGtC,OAAO,IAAIiI,EAFAsB,EAAGvJ,KAAK3E,EAAS,GAIxByK,GAAQ4D,QAAQF,GAChB,IAAIzC,GAAcV,GAAWqD,QAAQD,SAtBrDxB,EAAA,GA8JM0B,GAAN,WAyBI,SAAAC,EAAYhF,GAAasD,GAAAzI,KAAAmK,GACrBnK,KAAKmF,MAAQA,EAEbgF,EAAgB7E,OAAOzJ,KAAKmE,MA5BpC,OAAA8I,GAAAqB,EAAA,OAAAlS,IAAA,eAAAN,MAAA,SAYwByS,GAChB,IAAMjF,EAAQlI,GAAWmN,GAEnB5E,EAAO2E,EAAgB7E,OAAOG,KAAK,SAAClI,GAAD,OAAOA,EAAE4H,QAAUA,IAC5D,QAAalH,IAATuH,EACA,MAAM,IAAI7H,MAAM,wBAGpB,OAAO6H,MApBf2E,EAAA,GC5JM,SAAAE,GAA4B/I,EAAc5B,GAC5C,GAAI4B,EAAE/H,YAAcmG,EAAEnG,UAClB,OAAO+H,EAAE/H,UAAU4D,IAAMuC,EAAEnG,UAAU4D,IAEzC,OAAQmE,EAAE/H,WACV,KAAK8M,GAAQI,MACT,IAAM6D,EAAK,IAAId,EAAA,GAAYlI,EAAE9H,WAAWC,MAAMoN,QACxC0D,EAAQD,EAAGE,cAAclJ,EAAErJ,IAAK,OAAO,GACvCwS,EAAQH,EAAGE,cAAc9K,EAAEzH,IAAK,OAAO,GACvCyS,EAAKH,EAAMI,YACXC,EAAKH,EAAME,YACjB,OAAID,EAAGG,SAAWD,EAAGC,OACVH,EAAGG,OAASD,EAAGC,OAEfH,EAAGI,OAASF,EAAGE,OAE9B,KAAKzE,GAAQK,IACT,IAAMqE,EAAM,IAAI7C,EAAA,IAAI2B,WACdmB,EAAM,IAAI9C,EAAA,IAAI2B,WAGpB,OAFAkB,EAAIE,eAAe3J,EAAErJ,KACrB+S,EAAIC,eAAevL,EAAEzH,KACjB8S,EAAIF,OAAOxO,aAAe2O,EAAIH,OAAOxO,WAC9B+B,OAAO2M,EAAIF,OAAOxO,YAAc+B,OAAO4M,EAAIH,OAAOxO,YAElD+B,OAAO2M,EAAID,OAAOzO,YAAc+B,OAAO4M,EAAIF,OAAOzO,YAEjE,KAAKgK,GAAQM,MACT,OAAOvI,OAAOkD,EAAErJ,KAAOmG,OAAOsB,EAAEzH,KACpC,QACI,OAAO,GAIT,SAAAiT,GAAqBC,GACvB,OAAOrN,GAAcqN,GAQnB,SAAAC,GAAqBrN,GACvB,OAAa,IAATA,EACOD,GAActC,EAAO6P,QAEpB,IAARtN,EACOD,GAActC,EAAO8P,OAE5BvN,EAAM,GAAKA,GAAO,GACXD,GAActC,EAAO+P,MAAQ,EAAIxN,GAErCD,GAAcC,EAAK,GAAG,GAG3B,SAAAyN,GAAkBzN,GACpB,OAAa,IAARA,EACMmN,GAAW1P,EAAO8P,OACjBvN,GAAO,GACRD,GAAcC,EAAM,EAAIvC,EAAO+P,OAGnCE,GADM,IAAIC,GAAO3N,EAAI1B,YACNsP,YAGpB,SAAAF,GAAoBG,GACtB,IAAIjQ,EAAS,GACb,GAAsB,IAAlBiQ,EAAOhQ,OACP,MAAM,IAAI+B,MAAM,qCAEpB,IAAM6C,EAAMoL,EAAOhQ,OAAS,EAC5B,GAAI4E,GAAOhF,EAAOqQ,YAAc,EAAIrQ,EAAOsQ,WACvCnQ,GAAUmC,GAAc0C,EAAMhF,EAAOsQ,WAAa,QAC/C,GAAItL,EAAM,IACb7E,GAAUmC,GAActC,EAAOuQ,WAC/BpQ,GAAUmC,GAAc0C,QACrB,GAAIA,EAAM,MACb7E,GAAUmC,GAActC,EAAOwQ,WAC/BrQ,GAAUmC,GAAc0C,EAAK,GAAG,OAC7B,MAAIA,EAAM,YAIb,MAAM7H,EAAWyK,eAHjBzH,GAAUmC,GAActC,EAAOyQ,WAC/BtQ,GAAUmC,GAAc0C,EAAK,GAAG,GAKpC,OADA7E,GAAUiQ,EAIR,SAAAM,GAA4BC,GAC9B,IAAIxQ,EAAS,GAGb,OAFAA,GAtDE,SAAqBwQ,GAEvB,OAAOV,GADOU,EAAGC,gBAqDPC,CAAWF,GACrBxQ,GAAUuP,GAAW1P,EAAO8Q,UAI1B,SAAAC,GAAiCC,EAAsB1V,GACzD,IAAMqB,EAAIqU,EAAQ5Q,OAClB,KAAM,GAAK9E,GAAKA,GAAKqB,GAAKA,GAAK,MAC3B,MAAM,IAAIwF,MAAM,yBAKpB6O,EAAQC,KAAKpC,IAEb,IAAI1O,EAAS,GACbA,GAAU6P,GAAQ1U,GAXgD,IAAA2M,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAalE,QAAA2F,EAAAC,EAAiB2I,EAAjB/U,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA0B,CACtB9H,GAAU8P,GADY7H,EAAAjM,MACCyU,iBAduC,MAAAvK,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAkBlE,OAFAhI,GAAU6P,GAAQrT,GAClBwD,GAAUuP,GAAW1P,EAAOkR,eAI1B,SAAAC,GAA4BC,GAC9B,IAAIjR,EAAS,GACbiR,EAAKH,OAFuC,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAA9O,EAAA,IAG5C,QAAA+O,EAAAC,EAAiBL,EAAjBnV,OAAAqM,cAAA+I,GAAAG,EAAAC,EAAAlJ,QAAAC,MAAA6I,GAAA,EAAuB,CACnBlR,GAAU8P,GADSuB,EAAArV,QAHqB,MAAAkK,GAAAiL,GAAA,EAAAC,EAAAlL,EAAA,aAAAgL,GAAAI,EAAAhJ,QAAAgJ,EAAAhJ,SAAA,WAAA6I,EAAA,MAAAC,GAM5C,OAAOpR,EAGL,SAAAuR,GAAqBpD,GACvB,OAAOhO,SAASgO,EAAGvJ,KAAK,GAAI,IAuB1B,SAAA4M,GAAoBrD,GACtB,IAAMsD,EAAOF,GAAWpD,GACpBuD,OAAA,EACJ,GAAID,IAAS5R,EAAOyQ,UAChBoB,EAASvD,EAAGwD,kBACT,GAAIF,IAAS5R,EAAOwQ,UACvBqB,EAASvD,EAAGyD,kBACT,GAAIH,IAAS5R,EAAOuQ,UACvBsB,EAASvD,EAAG0D,gBACT,MAAIJ,GAAQ5R,EAAOqQ,aAAeuB,GAAQ5R,EAAOsQ,YAGpD,MAAM,IAAInO,MAAM,sBAAwByP,GAFxCC,EAASD,EAAO5R,EAAOsQ,WAAa,EAIxC,OAAOhC,EAAGvJ,KAAK8M,GAGb,SAAAI,GAAqB3D,GACvB,IAAM4D,EAAQ5D,EAAG6D,gBACjB,OAAOrF,GAAUsF,eAAe,IAAI9N,GAAa4N,IDZ1CxD,GAAA5E,UAEA4E,GAAA2D,OAAS,IAAI3D,GAAgB,UAE7BA,GAAA4D,QAAU,IAAI5D,GAAgB,WCoBzC,IAAM6D,GAAN,SAAAA,iGAAAC,CAAAhO,KAAA+N,QCtMYE,GAgBAC,0PAhBZ,SAAYD,GACRA,EAAA,kBACAA,EAAA,kBACAA,EAAA,sBACAA,EAAA,sBACAA,EAAA,cACAA,EAAA,gBACAA,EAAA,UACAA,EAAA,gBACAA,EAAA,UACAA,EAAA,YACAA,EAAA,oBACAA,EAAA,sBACAA,EAAA,kBAbJ,CAAYA,aAgBZ,SAAYC,GACRA,IAAA,yBACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,0BACAA,IAAA,mBACAA,IAAA,qBACAA,IAAA,eAPJ,CAAYA,aAaZ,IAAMC,GAAN,WAII,SAAAA,EAAYlX,EAAc0J,EAAqBhJ,gGAAUyW,CAAApO,KAAAmO,GACrDnO,KAAK/I,KAAOA,EACZ+I,KAAKW,KAAOA,EACZX,KAAKrI,MAAQA,EAPrB,OAAA0W,GAAAF,IAAAlW,IAAA,UAAAN,MAAA,WAWQ,OAAOqI,KAAK/I,QAXpBgB,IAAA,UAAAN,MAAA,WAeQ,OAAOqI,KAAKW,QAfpB1I,IAAA,WAAAN,MAAA,WAmBQ,OAAOqI,KAAKrI,SAnBpBM,IAAA,WAAAN,MAAA,SAsBaA,GACL,OAAIA,EAAMgJ,OAASX,KAAKW,MAAQhJ,EAAMV,OAAS+I,KAAK/I,MAAuB,MAAfU,EAAMA,QAC9DqI,KAAKrI,MAAQA,EAAMA,OACZ,OAzBnBwW,EAAA,2QCtBI,SAAAG,iGAAAC,CAAAvO,KAAAsO,GACItO,KAAKwO,iDAOS,QAAAC,EAAAzQ,UAAApC,OAAX8S,EAAW1P,MAAAyP,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAXD,EAAWC,GAAA3Q,UAAA2Q,GAAA,IAAAlL,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IACd,QAAA2F,EAAAC,EAAgB6K,EAAhBjX,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAsB,KAAXnC,EAAWsC,EAAAjM,MAClBqI,KAAKwO,KAAK3S,KAAKyF,IAFL,MAAAO,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,aCLTiL,GAAW,SAACC,GACrB,IAAIlT,EAAS,GAMb,OAJIA,GAAUmC,GADV+Q,EACwBrT,EAAOsT,MAEPtT,EAAOuT,QAK1BC,GAAU,SAACH,GACpB,IAAIlT,EAAS,GACb,IAAe,IAAXkT,EACAlT,EAASmC,GAActC,EAAO6P,aAC3B,GAAc,IAAVwD,EACPlT,EAASmC,GAActC,EAAO8P,YAC3B,GAAIuD,EAAQ,GAAKA,EAAQ,GAAI,CAChC,IAAM9Q,EAAMvC,EAAO+P,MAAQ,EAAIsD,EAC/BlT,EAASmC,GAAcC,OACpB,CACH,IAAMkR,EAAQ,IAAIvD,GAAOmD,EAAMxS,YAAYsP,WAC3ChQ,EAASuT,GAAcD,GAG3B,OAAOtT,GAGEwT,GAAa,SAACN,GACvB,IAAIlT,EAAS,GACb,GAAIkT,EAAMO,WAAW,GACjBzT,EAASmC,GAActC,EAAO6P,aAC3B,GAAIwD,EAAMO,UAAU,GACvBzT,EAASmC,GAActC,EAAO8P,YAC3B,GAAIuD,EAAMQ,cAAc,IAAMR,EAAMS,WAAW,IAAK,CACvD,IAAMvR,EAAMvC,EAAO+P,MAAQ,EAAIsD,EAAMU,WACrC5T,EAASmC,GAAcC,OACpB,CACH,IAAMkR,EAAQ,IAAIvD,GAAOmD,EAAMxS,YAAYsP,WAC3ChQ,EAASuT,GAAcD,GAE3B,OAAOtT,GAGEuT,GAAgB,SAACL,GAC1B,IAAIlT,EAAS,GACP6E,EAAMqO,EAAMjT,OAAS,EAc3B,OAbI4E,GAAOhF,EAAOqQ,YACdlQ,GAAUmC,GAAc0C,GACjBA,EAAM,KACb7E,GAAUmC,GAActC,EAAOuQ,WAC/BpQ,GAAUmC,GAAc0C,IACjBA,EAAM,OACb7E,GAAUmC,GAActC,EAAOwQ,WAC/BrQ,GAAUmC,GAAc0C,EAAK,GAAG,KAEhC7E,GAAUmC,GAActC,EAAOyQ,WAC/BtQ,GAAUmC,GAAc0C,EAAK,GAAG,IAEpC7E,GAAUkT,GAIDW,GAAiB,SAACC,GAC3B,IAAI9T,EAAS,GACbA,GAAUmC,GAAcoQ,GAAiBI,QACzC3S,GAAUmC,GAAc2R,EAAIjB,KAAK5S,QAHS,IAAA6H,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAI1C,QAAA2F,EAAAC,EAAgB4L,EAAIjB,KAApB/W,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA0B,KAAflG,EAAeqG,EAAAjM,MACtB,GAAiB,iBAAN4F,EACP5B,GAAUmC,GAAcoQ,GAAiBwB,WACzC/T,GAAUuT,GAAc3R,OACrB,IAAiB,iBAANA,EAId,MAAM5E,EAAWyK,eAHjBzH,GAAUmC,GAAcoQ,GAAiBwB,WACzC/T,GAAUuT,GAAc9R,GAAWG,MAVD,MAAAsE,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAe1C,OAAOhI,GAGEgU,GAAc,SAACF,GACxB,IAAI9T,EAAS,GACbA,GAAUmC,GAAcoQ,GAAiB0B,KACzCjU,GAAUmC,GAAc2R,EAAIvW,MAH2B,IAAA2T,GAAA,EAAAC,GAAA,EAAAC,OAAA9O,EAAA,IAIvD,QAAA+O,EAAAC,EAAgBwC,EAAII,OAApBpY,OAAAqM,cAAA+I,GAAAG,EAAAC,EAAAlJ,QAAAC,MAAA6I,GAAA,EAA4B,KAAjBiD,EAAiB9C,EAAArV,MACxBgE,GAAUmC,GAAcoQ,GAAiBwB,WACzC/T,GAAUuT,GAAclS,GAAW8S,IACnC,IAAMtX,EAAIiX,EAAIlY,IAAIuY,GAClB,GAAItX,GAAKA,EAAEuX,YAAc9B,GAAcyB,UACnC/T,GAAUmC,GAAcoQ,GAAiBwB,WACzC/T,GAAUuT,GAAc1W,EAAEwX,iBACvB,GAAIxX,GAAKA,EAAEuX,YAAc9B,GAAczR,OAC1Cb,GAAUmC,GAAcoQ,GAAiBwB,WACzC/T,GAAUuT,GAAclS,GAAWxE,EAAEwX,kBAClC,GAAIxX,GAAKA,EAAEuX,YAAc9B,GAAcgC,QAC1CtU,GAAUmC,GAAcoQ,GAAiB+B,SACzCtU,GAAUuT,GAAc9R,GAAW5E,EAAEwX,iBAClC,KAAIxX,GAAKA,EAAEuX,YAAc9B,GAAciC,KAI1C,MAAMvX,EAAWyK,eAHjBzH,GAAUmC,GAAcoQ,GAAiB+B,SACzCtU,GAAUuT,GAAc9R,GAAW5E,EAAEwX,eAnBU,MAAAnO,GAAAiL,GAAA,EAAAC,EAAAlL,EAAA,aAAAgL,GAAAI,EAAAhJ,QAAAgJ,EAAAhJ,SAAA,WAAA6I,EAAA,MAAAC,GAwBvD,OAAOpR,GAGEwU,GAAU,SAACV,GACpB,IAAI9T,EAAS,GACbA,GAAUmC,GAActC,EAAO4U,QAC/BzU,GAAUmC,GAActC,EAAO6U,YAHc,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAvS,EAAA,IAI7C,QAAAwS,EAAAC,EAAgBjB,EAAII,OAApBpY,OAAAqM,cAAAwM,GAAAG,EAAAC,EAAA3M,QAAAC,MAAAsM,GAAA,EAA4B,KAAjBR,EAAiBW,EAAA9Y,MACxBgE,GAAUmC,GAActC,EAAOmV,iBAC/BhV,GAAUuT,GAAclS,GAAW8S,IACnCnU,GAAUiV,GAAUnB,EAAIlY,IAAIuY,IAC5BnU,GAAUmC,GAActC,EAAOqV,UARU,MAAAhP,GAAA0O,GAAA,EAAAC,EAAA3O,EAAA,aAAAyO,GAAAI,EAAAzM,QAAAyM,EAAAzM,SAAA,WAAAsM,EAAA,MAAAC,GAW7C,OADA7U,GAAUmC,GAActC,EAAOsV,eAItBF,GAAY,SAAZG,EAAavY,GACtB,IAAKA,EACD,MAAMmF,MAAM,kCAEhB,IAAIhC,EAAS,GACb,GAAInD,EAAEmI,OAASsN,GAAcyB,UACzB/T,GAAUuT,GAAc1W,EAAEb,YACvB,GAAIa,EAAEmI,OAASsN,GAAczR,OAChCb,GAAUuT,GAAclS,GAAWxE,EAAEb,aAClC,GAAIa,EAAEmI,OAASsN,GAAc+C,QAChCrV,GAAUiT,GAASoC,QAAQxY,EAAEb,QAC7BgE,GAAUmC,GAActC,EAAO8P,OAC/B3P,GAAUmC,GAActC,EAAOyV,aAC5B,GAAIzY,aAAaoX,IACpBjU,GAAUwU,GAAQ3X,QACf,GAAIA,EAAEmI,OAASsN,GAAcjP,MAAO,CACvC,IAAK,IAAItI,EAAI8B,EAAEb,MAAMiE,OAAS,EAAGlF,GAAK,EAAGA,IACrCiF,GAAUoV,EAAUvY,EAAEb,MAAMjB,IAEhCiF,GAAUqT,GAAQxW,EAAEb,MAAMiE,QAC1BD,GAAUmC,GAActC,EAAO0V,WAC5B,GAAI1Y,EAAEmI,OAASsN,GAAcgC,QAChCtU,GAAUqT,GAAQxW,EAAEb,OACpBgE,GAAUmC,GAActC,EAAO8P,OAC/B3P,GAAUmC,GAActC,EAAO2V,SAC5B,IAAI3Y,EAAEmI,OAASsN,GAAciC,KAKhC,MAAMvS,MAAM,2BAA6BnF,EAAEmI,MAJ3ChF,GAAUwT,GAAW,IAAInK,EAAA,UAAUxM,EAAEb,QACrCgE,GAAUmC,GAActC,EAAO8P,OAC/B3P,GAAUmC,GAActC,EAAO2V,KAInC,OAAOxV,GAGEyV,GAAuB,SAACC,GACjC,IAAM7C,KACNA,EAAK3S,KAAKmB,GAAWqU,EAAYpa,OACjC,IAAMqa,KAHuDC,GAAA,EAAAC,GAAA,EAAAC,OAAAxT,EAAA,IAI7D,QAAAyT,EAAAC,EAAgBN,EAAY7X,WAA5B/B,OAAAqM,cAAAyN,GAAAG,EAAAC,EAAA5N,QAAAC,MAAAuN,GAAA,EAAwC,KAA7B/Y,EAA6BkZ,EAAA/Z,MAChCa,EAAEuX,YAAc9B,GAAczR,OAC9B8U,EAAIzV,KAAKmB,GAAWxE,EAAEwX,aACfxX,EAAEuX,YAAc9B,GAAciC,KACrCoB,EAAIzV,KAAK,IAAImJ,EAAA,UAAUxM,EAAEwX,aAClBxX,EAAEuX,YAAc9B,GAAc2B,IACrC0B,EAAIzV,KAAK+V,GAAWpZ,IAEpB8Y,EAAIzV,KAAKrD,EAAEwX,aAZ0C,MAAAnO,GAAA2P,GAAA,EAAAC,EAAA5P,EAAA,aAAA0P,GAAAI,EAAA1N,QAAA0N,EAAA1N,SAAA,WAAAuN,EAAA,MAAAC,GAmB7D,OAJIjD,EAAK5S,OAAS,GACd4S,EAAK3S,KAAKyV,GAECO,GAAuBrD,IAIpC,SAAAsD,GAAuBtD,GACzB,IAAM8C,KADoCS,GAAA,EAAAC,GAAA,EAAAC,OAAAhU,EAAA,IAE1C,QAAAiU,EAAAC,EAAgB3D,EAAhB/W,OAAAqM,cAAAiO,GAAAG,EAAAC,EAAApO,QAAAC,MAAA+N,GAAA,EAAsB,KAAXvZ,EAAW0Z,EAAAva,MACda,EAAEuX,SAAWvX,EAAEuX,YAAc9B,GAAczR,OAC3C8U,EAAIzV,KAAKmB,GAAWxE,EAAEwX,aACfxX,EAAEuX,SAAWvX,EAAEuX,YAAc9B,GAAciC,KAClDoB,EAAIzV,KAAK,IAAImJ,EAAA,UAAUxM,EAAEwX,aAClBxX,EAAEuX,SAAWvX,EAAEuX,YAAc9B,GAAcjP,MAClDsS,EAAIzV,KAAKiW,GAAatZ,EAAEb,QACjBa,EAAEuX,SAAWvX,EAAEuX,YAAc9B,GAAc2B,IAClD0B,EAAIzV,KAAK+V,GAAWpZ,IAEpB8Y,EAAIzV,KAAKrD,EAAEwX,SAAWxX,EAAEwX,WAAaxX,IAZH,MAAAqJ,GAAAmQ,GAAA,EAAAC,EAAApQ,EAAA,aAAAkQ,GAAAI,EAAAlO,QAAAkO,EAAAlO,SAAA,WAAA+N,EAAA,MAAAC,GAe1C,OAAOX,EAGL,SAAAM,GAAqBpZ,GACvB,IAAM4Z,EAAM,IAAIxC,IADmByC,GAAA,EAAAC,GAAA,EAAAC,OAAAtU,EAAA,IAEnC,QAAAuU,EAAAC,EAAgBrb,OAAOyY,KAAKrX,EAAEb,OAA9BF,OAAAqM,cAAAuO,GAAAG,EAAAC,EAAA1O,QAAAC,MAAAqO,GAAA,EAAsC,KAA3BvC,EAA2B0C,EAAA7a,MAC5B+a,EAAOla,EAAEb,MAAMmY,GAEjB4C,EAAK/R,MAAQ+R,EAAK/R,OAASsN,GAAc2B,IACzCwC,EAAIO,IAAI7C,EAAG8B,GAAWc,IAEtBN,EAAIO,IAAI7C,EAAG4C,IARgB,MAAA7Q,GAAAyQ,GAAA,EAAAC,EAAA1Q,EAAA,aAAAwQ,GAAAI,EAAAxO,QAAAwO,EAAAxO,SAAA,WAAAqO,EAAA,MAAAC,GAWnC,OAAOH,EAOL,SAAAQ,GAA0B9I,GAC5B,IAAMlS,EAAIkE,SAASgO,EAAGvJ,KAAK,GAAI,IAC/B,GAAK3I,IAAMsW,GAAiBwB,UACxB,OAAO5F,EAAG6D,gBACP,GAAI/V,IAAMsW,GAAiB8C,QAC9B,OAAOlH,EAAG+I,cACP,GAAIjb,IAAMsW,GAAiB+B,QAE9B,OADUvR,GAAgBoL,EAAG6D,iBAAiB4B,WAE3C,GAAI3X,IAAMsW,GAAiBlP,OAASpH,IAAMsW,GAAiBI,OAAS,CAGvE,IAFA,IACME,KACG9X,EAFMoT,EAAGxJ,cAEG5J,EAAI,EAAGA,IAAK,CAC7B,IAAMoc,EAAMF,GAAgB9I,GAC5B0E,EAAK3S,KAAKiX,GAEd,OAAOtE,EACJ,GAAI5W,IAAMsW,GAAiB0B,IAAM,CAGpC,IAFA,IAAMmD,EAASjJ,EAAGxJ,cACZ8R,EAAM,IAAIxC,IACPoD,EAAID,EAAQC,EAAI,EAAGA,IAAK,CAC7B,IAAM/a,EAAMgF,GAAW2V,GAAgB9I,IACjCnS,EAAQib,GAAgB9I,GAC9BsI,EAAIO,IAAI1a,EAAKN,GAEjB,OAAOya,EAEP,MAAMzU,MAAM,2BAA6B/F,GAI1C,IAAMia,GAAyB,SAAzBoB,EAA0BzE,GAEnC,IADA,IAAI7S,EAAS,GACJjF,EAAI8X,EAAK5S,OAAS,EAAGlF,GAAK,EAAGA,IAAK,CACvC,IAAM+Y,EAAMjB,EAAK9X,GACjB,GAAmB,iBAAR+Y,EACP9T,GAAUuT,GAAcO,QACrB,GAAmB,iBAARA,EACd9T,GAAUqT,GAAQS,QACf,GAAmB,kBAARA,EACd9T,GAAUiT,GAASa,QAChB,GAAIA,aAAezK,EAAA,UACtBrJ,GAAUwT,GAAWM,QAClB,GAAIA,aAAeG,IACtBjU,GAAUwU,GAAQV,QAGf,GAAIA,aAAeyD,GAAQ,CAC9B,IAAMC,EAAc3D,GAAeC,GACnC9T,GAAUuT,GAAciE,QACjB1D,aAAezQ,QACtBrD,GAAUsX,EAAuBnB,GAAarC,IAC9C9T,GAAUqT,GAAQS,EAAI7T,QACtBD,GAAUmC,GAActC,EAAO0V,OAGvC,OAAOvV,GAIEyX,GAA0B,SAACC,EAAsBjS,GAE1D,IADA,IAAIzF,EAAS,GACJjF,EAAI0K,EAAOxF,OAAS,EAAGlF,GAAK,EAAGA,IAAK,CAEzC,OADa0K,EAAO1K,GAAGqZ,WAEvB,KAAK9B,GAAc+C,QACfrV,GAAUiT,GAASxN,EAAO1K,GAAGsZ,YAC7B,MAEJ,KAAK/B,GAAcgC,QACftU,GAAUqT,GAAQ5N,EAAO1K,GAAGsZ,YAC5B,MAEJ,KAAK/B,GAAczR,OACf,IAAM7E,EAAQqF,GAAWoE,EAAO1K,GAAGsZ,YACnCrU,GAAUuT,GAAcvX,GACxB,MAEJ,KAAKsW,GAAcyB,UACf/T,GAAUuT,GAAc9N,EAAO1K,GAAGsZ,YAClC,MAEJ,KAAK/B,GAAc2B,IACf,IAAM0D,EAAW3D,GAAYvO,EAAO1K,GAAGsZ,YACvCrU,GAAUuT,GAAcoE,GACxB,MAEJ,KAAKrF,GAAcK,OACf,IAAM6E,EAAc3D,GAAepO,EAAO1K,GAAGsZ,YAC7CrU,GAAUuT,GAAciE,GACxB,MAMJ,QACI,MAAM,IAAIxV,MAAM,2BAA6BmE,KAAKC,UAAUX,EAAO1K,MAS3E,OALAiF,GAAUqT,GAAQ5N,EAAOxF,QACzBD,GAAUmC,GAActC,EAAO0V,MAE/BvV,GAAUuT,GAAclS,GAAWqW,KAK1BE,GAAyB,SAACnS,GACnC,IAAMoS,KADoDC,GAAA,EAAAC,GAAA,EAAAC,OAAA1V,EAAA,IAG1D,QAAA2V,EAAAC,EAAgBzS,EAAhB3J,OAAAqM,cAAA2P,GAAAG,EAAAC,EAAA9P,QAAAC,MAAAyP,GAAA,EAAwB,KAAbjb,EAAaob,EAAAjc,MAEhBR,OAAA,EAEJ,OAHaqB,EAAEuX,WAIf,KAAK9B,GAAczR,OACfrF,GACIwJ,KAAM,SACNhJ,MAAOa,EAAEwX,YAEb,MACJ,KAAK/B,GAAc6F,IACf3c,GACIwJ,KAAM,MACNhJ,MAAOa,EAAEwX,WAAW3T,YAExB,MACJ,KAAK4R,GAAciC,KACf/Y,GACIwJ,KAAM,QACNhJ,MAAOa,EAAEwX,YAEb,MACJ,KAAK/B,GAAc8F,SAMnB,KAAK9F,GAAc+F,UACf7c,GACIwJ,KAAM,YACNhJ,MAAOa,EAAEwX,YAMjBwD,EAAM3X,KAAK1E,IAzC2C,MAAA0K,GAAA6R,GAAA,EAAAC,EAAA9R,EAAA,aAAA4R,GAAAI,EAAA5P,QAAA4P,EAAA5P,SAAA,WAAAyP,EAAA,MAAAC,GA4C1D,IAAMhY,GACFsY,OAAQT,GAEZ,OAAOxW,GAAW8E,KAAKC,UAAUpG,2PCrWrC,IAAMuY,GAAN,WAiFI,SAAAC,EAAYxc,GACR,+FADqByc,CAAApU,KAAAmU,GACA,KAAjBxc,EAAMiE,QAAkC,KAAjBjE,EAAMiE,OAG7B,MAAMjD,EAAWyK,eAFjBpD,KAAKrI,MAAQA,EAnFzB,OAAA0c,GAAAF,EAAA,OAAAlc,IAAA,cAAAN,MAAA,SACuBmS,GACf,OAAO,IAAIqK,EAAQrK,EAAGvJ,KAAK,QAFnCtI,IAAA,aAAAN,MAAA,SASsB2c,GAId,OAAO,IAAIH,EADS1R,GAFJyJ,GAAkBoI,QAV1Crc,IAAA,YAAAN,MAAA,SAoBqB4c,GAEb,OAAO,IAAIJ,EADKI,EAAM1W,OAAO,OArBrC5F,IAAA,aAAAN,MAAA,SA8BsB6c,GAGd,OAAO,IAAIL,EAFS1R,GAAQ+R,OA/BpCvc,IAAA,mBAAAN,MAAA,SA6C4Bb,EAAW2d,GAC/B,IAAMtc,EAAIsc,EAAW7Y,OAErB,GAAI9E,GAAK,GAAKA,EAAIqB,GAAKA,EAAI,GACvB,MAAMQ,EAAWyK,eAKrBqR,EAAWhI,KAAKpC,IAChB,IAAI1O,EAAS,GACbA,GAAUyP,GAAWtU,GAXiC,IAAA2M,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAYtD,QAAA2F,EAAAC,EAAgB4Q,EAAhBhd,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA4B,KAAjBhL,EAAiBmL,EAAAjM,MACxBgE,GAAUuT,GAAczW,EAAE2T,iBAbwB,MAAAvK,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAkBtD,OAHAhI,GAAUyP,GAAWjT,GAGd,IAAIgc,EADS1R,GADpB9G,GAAUmC,GAActC,EAAOkR,oBA7DvCzU,IAAA,gBAAAN,MAAA,SAqEyB2c,GAIjB,MAFc,WADEH,EAAQO,WAAWJ,GACAK,eAvE3CN,GAAAF,IAAAlc,IAAA,WAAAN,MAAA,WA6FQ,OAA0B,KAAtBqI,KAAKrI,MAAMiE,OACJoE,KAAKrI,MAELid,GAAY5U,KAAKrI,UAhGpCM,IAAA,cAAAN,MAAA,WAwGQ,IAAI8X,OAAA,EAMJ,OAJIA,EADsB,KAAtBzP,KAAKrI,MAAMiE,OACLoE,KAAKrI,MAELkd,GAAY7U,KAAKrI,OAEpB6G,GAAWiR,MA9G1BxX,IAAA,YAAAN,MAAA,WAkHQ,OAA0B,KAAtBqI,KAAKrI,MAAMiE,OACJoE,KAAKrI,MAELkd,GAAY7U,KAAKrI,UArHpCM,IAAA,iBAAAN,MAAA,WA6HQ,IAAMmd,EAAU9U,KAAK2U,WAGrB,OADcvS,GADDC,EAAA,OAAgByS,GAASzY,YAEzBwD,MAAM,EAAG,OAhI9BsU,EAAA,GAwIA,SAAAS,GAAqBG,GACjB,IAAMhW,EAAOlG,EAAekc,EAMtBC,EAAQjW,EAHAqD,GADDA,GAAOrD,IAEGc,MAAM,EAAG,GAIhC,OAAOoV,EAAA,OAAc,IAAIpW,OAAOmW,EAAO,QAG3C,SAAAH,GAAqBK,GACjB,IACMH,EAAa/Y,GADHiZ,EAAA,OAAcC,IACWrX,OAAO,EAAG,IAEnD,GAAIqX,IAAkBN,GAAYG,GAC9B,MAAM,IAAIpX,MAAM,gDAEpB,OAAOoX,iCCvJX,SAAAI,GAAgBC,EAAmBC,EAAqBjU,GACpD,IAAIkU,KAeJ,OAbAC,GACIH,EAAUI,UAAU,OACpB/Z,GAAa4Z,IAETI,EAAGrU,EAAOrI,KACVvB,EAAG4J,EAAOpI,UACVR,EAAG4I,EAAOnI,SACVyc,MAAOtU,EAAOlI,MAElB,SAACyC,GACG2Z,EAAU3Z,IAGX,IAAIkD,OAAOyW,GAMhB,SAAAK,GACFC,EACAC,EACAT,GAC2C,IAA3CU,EAA2C9X,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAdlF,EAOvBwb,EAAYhM,GAAUsF,eAAe,IAAI9N,GAAa+V,IAStDP,EAAUH,GAAOC,EAPPlB,GAAQQ,WAAWJ,GAGPyB,iBAImBD,GAAczZ,SAAS,OAChE2Z,EAAWV,EAAQzV,MAAM,EAAG,IAC5BoW,EAAWX,EAAQzV,MAAM,IACzBqW,EAAK7T,EAAA,IAAaC,IAAIC,MAAMyT,GAiB5BG,EATY9T,EAAA,IAAa+T,QAC3B/T,EAAA,IAAaC,IAAIC,MAAMqT,GACvBvT,EAAA,IAAaC,IAAIC,MAAM0T,IACrBpe,KAAMwK,EAAA,KAAcgU,IAAKC,QAASjU,EAAA,IAAakU,UAAWL,OAMpCM,WAAWna,WAKvC,OAAO,IAAIwC,OAAOsX,EAAW,OAAO9Z,SAAS,UAS3C,SAAAoa,GACFC,EACAtB,EACAuB,GAC2C,IAA3Cb,EAA2C9X,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAdlF,EAGvB8d,EAAY/X,OAAOC,KAAK4X,EAAc,UAAUra,SAAS,OAK3Dwa,EAAO,GACX,GAA6B,iBAAlBF,GAAuD,IAAzBA,EAAc/a,OACnDib,EAAOF,MACJ,MAAIA,aAAyBzC,IAGhC,MAAMvb,EAAWyK,eAFjByT,EAAOF,EAAcZ,iBAYzB,IAAMT,EAAUH,GAAOC,EAAWyB,EAAMf,GAAczZ,SAAS,OACzD2Z,EAAWV,EAAQzV,MAAM,EAAG,IAC5BoW,EAAWX,EAAQzV,MAAM,IAGzBqW,EAAK7T,EAAA,IAAaC,IAAIC,MAAMyT,GAG5Bc,GAAgBN,WAAYnU,EAAA,IAAaC,IAAIC,MAAMqU,GAAYC,KAAM,GAAIX,GAAI,IAenF,OAdkB7T,EAAA,IAAa0U,QAC3BD,EACAzU,EAAA,IAAaC,IAAIC,MAAM0T,IACrBpe,KAAMwK,EAAA,KAAcgU,IAAKC,QAASjU,EAAA,IAAakU,UAAWL,OASnC7Z,WAc3B,SAAA2a,GAA4BL,EAAiCd,GAU/D,IAAIgB,EAAO,GACX,GAA6B,iBAAlBF,GAAuD,IAAzBA,EAAc/a,OACnDib,EAAOF,MACJ,MAAIA,aAAyBzC,IAGhC,MAAMvb,EAAWyK,eAFjByT,EAAOF,EAAcZ,iBAKzB,IAAMzB,EAAYhM,GAAUsF,eAAe,IAAI9N,GAAa+V,IAS5D,GANgB3B,GAAQQ,WAAWJ,GAIXyB,mBAERc,EAKZ,MAFAnV,QAAQC,IAAI,oBAENhJ,EAAWse,eAWnB,SAAAC,GACFtB,EACAC,EACAT,GAC2C,IAA3CU,EAA2C9X,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAdlF,EAEvBwb,EAAYhM,GAAUsF,eAAe,IAAI9N,GAAa+V,IAKtDsB,EAHUjD,GAAQQ,WAAWJ,GAGPyB,iBAGtBT,EAAUH,GAAOC,EAAW+B,EAAarB,GAAczZ,SAAS,OAChE2Z,EAAWV,EAAQzV,MAAM,EAAG,IAC5BoW,EAAWX,EAAQzV,MAAM,IAGzBuX,EAAM5Z,GAAOoY,EAAYI,GACzBY,EAAYvU,EAAA,IAAa+T,QAC3B/T,EAAA,IAAaC,IAAIC,MAAM6U,GACvB/U,EAAA,IAAaC,IAAIC,MAAM0T,IACrBpe,KAAMwK,EAAA,KAAcgV,IAAKf,QAASjU,EAAA,IAAakU,YAG/CJ,EAAYhd,EAAaC,EAAW+d,EAAcP,EAAUJ,WAAWna,WAE7E,OAAO4Y,EAAA,OAAcpW,OAAOC,KAAKqX,EAAW,QAM1C,SAAAmB,GACFZ,EACAtB,GAC2C,IAA3CU,EAA2C9X,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAdlF,EAEvBqd,EAAYna,GAAaiZ,EAAA,OAAcyB,IAEvCrB,EAAcc,EAAUtY,OAAO,EAAG,GAElC+Y,EAAYT,EAAUtY,QAAQ,IAG9ByX,EAAUH,GAAOC,EAAWC,EAAaS,GAAczZ,SAAS,OAChE2Z,EAAWV,EAAQzV,MAAM,EAAG,IAC5BoW,EAAWX,EAAQzV,MAAM,IAGzBiX,GAAgBN,WAAYnU,EAAA,IAAaC,IAAIC,MAAMqU,GAAYC,KAAM,GAAIX,GAAI,IAWnF,OAFmB1Y,GARD6E,EAAA,IAAa0U,QAC3BD,EACAzU,EAAA,IAAaC,IAAIC,MAAM0T,IACrBpe,KAAMwK,EAAA,KAAcgV,IAAKf,QAASjU,EAAA,IAAakU,YAKjBla,WAAY2Z,GAe9C,SAAAuB,GAA4Bb,EAAsBc,EAAsB3B,GAC1E,IAEMR,EAFYrZ,GAAaiZ,EAAA,OAAcyB,IAEf7Y,OAAO,EAAG,GAElCyW,EAAYhM,GAAUsF,eAAe,IAAI9N,GAAa+V,IAQ5D,GALgB3B,GAAQQ,WAAWJ,GAGJyB,mBAERV,EAGnB,MADA3T,QAAQC,IAAI,oBACNhJ,EAAWse,eAanB,SAAAQ,GACF7B,EACAd,EACA+B,EACAzB,GAC2C,IAA3CU,EAA2C9X,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAdlF,EAE7B,IAAKwK,GAAYsS,GACb,MAAM,IAAIjY,MAAMhF,EAAWyK,eAAiB,yBAEhD,IAAMkS,EAAUH,GAAOC,EAAWyB,EAAMf,GAClCE,EAAWV,EAAQzV,MAAM,EAAG,IAE5B5H,EADWqd,EAAQzV,MAAM,IAEzBqW,EAAKF,EACL0B,EAAM,IAAI7Y,OAAOiW,EAAQH,YACzBgD,EAASvgB,OAAAwgB,GAAA,eAAAxgB,CAAe,cAAea,EAAKie,GAClDyB,EAAOE,OAAOH,GACd,IAAMI,EAAYjZ,OAAOC,KAAK8W,EAAY,OACtCY,EAAamB,EAAOI,OAAOD,GAEzBE,EAAQL,EAAOK,QACfC,EAAUN,EAAOO,aAIvB,OAHA1B,EAAa3X,OAAOK,QAAQsX,EAAYwB,IAEzBnZ,OAAOK,QAAQsX,EAAYyB,IAC5B5b,SAAS,UAWrB,SAAA8b,GAGFvB,EACA9B,EACA+B,EACAzB,GAC2C,IAA3CU,EAA2C9X,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAdlF,EAE7B,GAAoB,KAAhB+d,EAAKjb,OACL,MAAMjD,EAAWyK,eAErB,IAAMzH,EAASkD,OAAOC,KAAK8X,EAAW,UAChCJ,EAAa7a,EAAOkE,MAAM,EAAGlE,EAAOC,OAAS,IAC7Cqc,EAAUtc,EAAOkE,MAAMlE,EAAOC,OAAS,IACvC0Z,EAAUH,GAAOC,EAAWyB,EAAMf,GAClCE,EAAWV,EAAQzV,MAAM,EAAG,IAE5B5H,EADWqd,EAAQzV,MAAM,IAEzBqW,EAAKF,EACL0B,EAAM,IAAI7Y,OAAOiW,EAAQH,YAEzByD,EAAWhhB,OAAAwgB,GAAA,iBAAAxgB,CAAiB,cAAea,EAAKie,GACtDkC,EAASP,OAAOH,GAChBU,EAASC,WAAWJ,GACpB,IAAIK,EAAYF,EAASL,OAAOvB,GAAYna,SAAS,OAErD,IACIic,GAAaF,EAASJ,QAAQ3b,SAAS,OACzC,MAAOwF,GACL,MAAMlJ,EAAWse,eAErB,OAAOqB,oQCvXX,IAAMC,GAAN,WAiDI,SAAAC,EAAYjf,EAA4B5B,EAAe8gB,gGAAoBC,CAAA1Y,KAAAwY,GACvExY,KAAKzG,UAAYA,EACjByG,KAAKrI,MAAQA,EACbqI,KAAKyY,YAAcA,EApD3B,OAAAE,GAAAH,EAAA,OAAAvgB,IAAA,iBAAAN,MAAA,SAC0BihB,EAAiBrf,EAA4Bkf,GAG/D,OAAO,IAAID,EACXjf,EAHgBsf,GAAA,OAAWD,EAAS,OAKpCH,MAPRxgB,IAAA,iBAAAN,MAAA,SAe0BmhB,GAClB,IAAMnhB,EAAQ,IAAIkH,OAAOia,EAAaC,MAAO,UAAU1c,SAAS,OAC1D2c,EAAmBR,EAAU5K,eAAejW,GAAOA,MACzD,OAAO,IAAI6gB,EACXtT,GAAgByC,UAAUmR,EAAaG,WACnCD,MApBZ/gB,IAAA,iBAAAN,MAAA,SA4B0BoH,GAClB,GAAIA,EAAKnD,OAAS,EACd,MAAM,IAAI+B,MAAM,mBAEpB,IAAMmM,EAAK,IAAIhK,GAAaf,GACtBiJ,EAASlM,SAASgO,EAAGvJ,KAAK,GAAI,IAIpC,OADY,IAAIiY,EAFEtT,GAAgB+E,QAAQjC,GAC5BjJ,EAAKlB,OAAO,QAnClC8a,GAAAH,IAAAvgB,IAAA,eAAAN,MAAA,WA4DQ,IAAIgE,EAAS,GAGb,OAFAA,GAAUmC,GAAckC,KAAKzG,UAAU4D,KACvCxB,GAAUqE,KAAKrI,SA9DvBM,IAAA,eAAAN,MAAA,SAwEiBuhB,GAET,OACIC,YAAaD,EACbE,OAAQ,MACRL,MAJY,IAAIla,OAAOmB,KAAKoM,eAAgB,OAAO/P,SAAS,UAK5D4c,UAAWjZ,KAAKzG,UAAU4L,UA9EtClN,IAAA,eAAAN,MAAA,WAsFQ,OAAOkhB,GAAA,OAAW7Y,KAAKrI,MAAO,WAtFtC6gB,EAAA,yPCWA,IAAMa,GAAQ/iB,EAAQ,IAEhBgjB,GAAN,SAAA/Q,GAAA,SAAAgR,IAAA,mGAAAC,CAAAxZ,KAAAuZ,oKAAAE,CAAAzZ,MAAAuZ,EAAA5Q,WAAAvR,OAAAwR,eAAA2Q,IAAA7c,MAAAsD,KAAAhC,YAAA,gUAAA0b,CAAAH,EAAgC3R,IAAhC+R,GAAAJ,IAAAthB,IAAA,OAAAN,MAAA,SAgESoQ,EAAwBK,EAA0BqQ,GAKnD,QAJexa,IAAXmK,IACAA,EAASpI,KAAKzG,UAAU+M,gBAGvBtG,KAAKgJ,kBAAkBZ,GACxB,MAAM,IAAIzK,MAAM,6CAID,iBAARoK,IACPA,EAAMA,EAAIkB,kBAGd,IAAIC,OAAA,EAGAA,EAFAd,IAAWlD,GAAgBiB,WAEpB4B,EAEA/H,KAAKmJ,YAAYpB,EAAKK,GAGjC,IAAMwR,EAAS5Z,KAAK6Z,iBAAiB3Q,EAAMd,GAC3C,OAAO,IAAImQ,GAAUnQ,EAAQwR,EAAQnB,MAvF7CxgB,IAAA,YAAAN,MAAA,eAAAmiB,2RAAAC,CAAAC,mBAAAC,KAAA,SAAAC,EAqGoBnS,EAAwBK,EAA0BqQ,GArGtE,OAAAuB,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAArW,MAAA,cAAAqW,EAAAE,OAAA,SAsGeta,KAAKua,KAAKxS,EAAKK,EAAQqQ,IAtGtC,wBAAA2B,EAAA3a,SAAAya,EAAAla,SAAA,gBAAAwa,EAAAC,EAAAC,GAAA,OAAAZ,EAAApd,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,eAAAN,MAAA,WA6GQ,OAAQqI,KAAKzG,WACb,KAAK8M,GAAQI,MACT,OAAOzG,KAAK2a,oBAChB,KAAKtU,GAAQM,MACT,OAAO3G,KAAK4a,oBAChB,KAAKvU,GAAQK,IACT,OAAO1G,KAAK6a,kBAChB,QACI,MAAM,IAAIld,MAAM,qCArH5B1F,IAAA,UAAAN,MAAA,SAiIYyd,EAAmBN,EAAkB+B,EAAczV,GAEnC,KAAhByV,EAAKjb,QAAiByH,GAASwT,KAC/BA,EAAOhY,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,QAEhD,IACMmb,EAAe,IAAI+B,EADPpB,GAAenY,KAAK/H,IAAK6c,EAAS+B,EAAMzB,EAAWhU,GACtBpB,KAAKzG,UAAWyG,KAAKxG,YAE9D2S,EAAKqL,EAAasD,eAExB,GADgB5G,GAAQQ,WAAWvI,GACvBwI,aAAeG,EAAQH,WAC/B,MAAMhc,EAAWse,eAErB,OAAOO,KA9Ifvf,IAAA,UAAAN,MAAA,SAyJYyd,EAAmBN,EAAkB+B,EAAczV,GAEvD,IAAMkT,EAAYtU,KAAK8a,eAEvB,GADa5G,GAAQQ,WAAWJ,GAAWK,aAC9BG,EAAQH,WACjB,MAAMhc,EAAWoiB,aAGrB,OAAO,IAAIxB,EADO9B,GAAezX,KAAK/H,IAAK6c,EAAS+B,EAAMzB,EAAWhU,GACpCpB,KAAKzG,UAAWyG,KAAKxG,eAjK9DvB,IAAA,oBAAAN,MAAA,WAwKQ,IAEMwU,EAFK,IAAI3C,EAAA,GAAYxJ,KAAKxG,WAAWC,MAAMoN,QAC9BmU,eAAehb,KAAK/H,IAAK,OACzB0S,WAAU,EAAM,OAEnC,OAAO,IAAIrC,GAAU6D,EAAInM,KAAKzG,UAAWyG,KAAKxG,eA5KtDvB,IAAA,oBAAAN,MAAA,WAmLQ,IAEMwU,EAFQ,IAAI3C,EAAA,MAAexJ,KAAKxG,WAAWC,MAAMoN,QACjCoU,cAAcjb,KAAK/H,IAAK,OAC3B0S,WAAU,EAAM,OAEnC,OAAO,IAAIrC,GAAU6D,EAAInM,KAAKzG,UAAWyG,KAAKxG,eAvLtDvB,IAAA,kBAAAN,MAAA,WA8LQ,IACMwU,EADUjE,EAAA,IAAI2B,WAAW,KAAM7J,KAAK/H,KACvBijB,YAAY,YAE/B,OAAO,IAAI5S,GAAU6D,EAAInM,KAAKzG,UAAWyG,KAAKxG,eAjMtDvB,IAAA,mBAAAN,MAAA,SA0MqBuR,EAAcd,GAC3B,OAAQA,GACR,KAAKlD,GAAgBQ,gBACrB,KAAKR,GAAgBS,gBACrB,KAAKT,GAAgBU,gBACrB,KAAKV,GAAgBW,gBACrB,KAAKX,GAAgBY,kBACrB,KAAKZ,GAAgBa,kBACrB,KAAKb,GAAgBc,kBACrB,KAAKd,GAAgBe,kBACrB,KAAKf,GAAgBgB,mBACjB,OAAOlG,KAAKmb,sBAAsBjS,GACtC,KAAKhE,GAAgBkB,gBACjB,OAAOpG,KAAKob,sBAAsBlS,GACtC,KAAKhE,GAAgBiB,WACjB,OAAOnG,KAAKqb,oBAAoBnS,GACpC,QACI,MAAM,IAAIvL,MAAM,qCA3N5B1F,IAAA,wBAAAN,MAAA,SAoO0BuR,GAClB,IACM0Q,EADK,IAAIpQ,EAAA,GAAYxJ,KAAKxG,WAAWC,MAAMoN,QAC/B0T,KAAKrR,EAAMlJ,KAAK/H,KAAOqjB,WAAW,IACpD,OAAOzc,OAAOK,QACV0a,EAAOpiB,EAAE+jB,YAAY1c,OAAQ,KAAM,IACnC+a,EAAOnhB,EAAE8iB,YAAY1c,OAAQ,KAAM,MACpCxC,SAAS,UA1OpBpE,IAAA,wBAAAN,MAAA,SAkP0BuR,GAClB,IACM0Q,EADQ,IAAIpQ,EAAA,MAAexJ,KAAKxG,WAAWC,MAAMoN,QAClC0T,KAAKrR,EAAMlJ,KAAK/H,IAAK,MAC1C,OAAO4G,OAAOK,QACV0a,EAAO4B,EAAED,YAAY1c,OAAQ,KAAM,IACnC+a,EAAO6B,EAAEF,YAAY1c,OAAQ,KAAM,MACpCxC,SAAS,UAxPpBpE,IAAA,sBAAAN,MAAA,SAkQwBuR,GAChB,IACM0Q,EADU1R,EAAA,IAAI2B,WAAW,KAAM7J,KAAK/H,KACnBsiB,KAAK9e,GAAayN,IAIzC,OAAOlM,GAFItD,EAEY,MAAQkgB,EAAOpiB,EAAIoiB,EAAOnhB,KAxQzDR,IAAA,eAAAN,MAAA,WAgRQ,OAAO+jB,GAAA,OAAW,IAAK7c,OAAOC,KAAKkB,KAAK/H,IAAK,QAAQ,QAhR7DA,IAAA,SAAAN,MAAA,SASkBgkB,EAAmBniB,GAS7B,YARgByE,IAAZ0d,IACAA,EAAUtV,GAAQsB,UAAUrO,EAAkBC,iBAG/B0E,IAAfzE,IACAA,EAAa8N,GAAcQ,gBAAgBxO,EAAkBE,aAG1D,IAAI+f,EAAWvd,GAAa4G,GAAa,KAAM+Y,EAASniB,MAlBvEvB,IAAA,iBAAAN,MAAA,SA2B0BikB,GAElB,OAAO,IAAIrC,EADCvd,GAAa0f,GAAA,OAAWE,EAAQ,KAAKhG,gBA5BzD3d,IAAA,uBAAAN,MAAA,SAsCgCkkB,GAAqD,IAAnCC,EAAmC9d,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAd7C,EAC/D,GAAI0gB,EAASE,MAAM,KAAKngB,OAAS,GAC7B,MAAMjD,EAAWyK,eAErB,IAAM4Y,EAAOhZ,EAAA,kBAAwB6Y,GAK/BI,EADQ5C,GAAM6C,eAAerd,OAAOC,KAAKkd,EAAM,QACnCG,OAAOL,GAGzB,OADmB,IAAIvC,EADX1a,OAAOC,KAAKmd,EAAIrG,YAAYvZ,SAAS,YAhDzDkd,EAAA,yPCNA,IAqBM6C,MACAC,GAAyB,IAtB/B,oBAAAC,iGAAAC,CAAAvc,KAAAsc,GAAA,OAAAE,GAAAF,IAAArkB,IAAA,UAAAN,MAAA,WAEQ,MAAO,MAFfM,IAAA,cAAAN,MAAA,SAKgB+P,GACR,GAAgB,MAAZA,EAAKzP,IACL,OAAO,IAAIqhB,GACP5R,EAAKzP,IACLoO,GAAQsB,UAAUD,EAAKnO,WACvB+N,GAAcQ,gBAAgBJ,EAAKlO,aAGvC,MAAM,IAAImE,MAAM,6BAb5B2e,EAAA,IA6BM,SAAAG,GAAkCC,GACpCN,GAAiBvgB,KAAK6gB,GASpB,SAAAC,GAA8BjV,GAChC,GAAqB,MAAjBA,EAAKkV,SACL,OAAOP,GAAuBQ,YAAYnV,GACvC,IAAAjE,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IACH,QAAA2F,EAAAC,EAA2BuY,GAA3B3kB,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA6C,KAAlCiZ,EAAkC9Y,EAAAjM,MACzC,GAAI+kB,EAAa3M,YAAcrI,EAAKkV,SAASjc,KACzC,OAAO+b,EAAaG,YAAYnV,IAHrC,MAAA7F,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAOH,MAAM,IAAIhG,MAAM,21BCxDxB,IAAMmf,GAAN,WASI,SAAAA,EAAYrjB,GAAasjB,GAAA/c,KAAA8c,GACrB9c,KAAK6O,MAAQ,IAAImO,GAAYvjB,GAC7BuG,KAAKid,GAAK,IAAIC,GAAUld,KAAK6O,OAXrC,OAAAsO,GAAAL,IAAA7kB,IAAA,aAAAN,MAAA,WAmBQ,OADAqI,KAAKid,GAAGG,OACDpd,KAAKid,MAnBpBhlB,IAAA,kBAAAN,MAAA,WA0BQqI,KAAKid,GAAKC,GAAUG,WAAWrd,KAAK6O,OACpC7O,KAAKmM,GAAKnM,KAAKid,GAAGK,6BA3B1BrlB,IAAA,kBAAAN,MAAA,SAiCoB4lB,GACZvd,KAAKud,cAAgBA,EACrBvd,KAAKmM,GAAGqR,aAAaD,MAnC7BtlB,IAAA,OAAAN,MAAA,SAyCS8lB,EAAUC,GAEX,IAAMC,EAAI3d,KAAK6O,MAAM+O,YACfnlB,EAAIuH,KAAK6O,MAAM+O,YACfC,EAAI,IAAI7d,KAAK6O,MAAMiP,IACzBD,EAAEE,KAAK/d,KAAK6O,MAAMmP,IAClBH,EAAEI,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMne,KAAKmM,GAAGiS,GAAI3lB,IACxColB,EAAEI,IAAIR,GACN,IAAK,IAAI/mB,EAAI,EAAGA,EAAIsJ,KAAKmM,GAAGkS,KAAKziB,OAAQlF,IACrCmnB,EAAEI,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMne,KAAKmM,GAAGmS,EAAE5nB,GAAIgnB,EAAMhnB,KAGpD,IAAI6nB,EAAI,IAAIve,KAAK6O,MAAMiP,IACjBxM,EAAM,IAAItR,KAAK6O,MAAM2P,IAC3BlN,EAAIyM,KAAKJ,GACTrM,EAAI2M,IAAIje,KAAKid,GAAGtlB,OAChB2Z,EAAImN,QAAQze,KAAK6O,MAAM6P,OAEvBH,EAAIve,KAAK6O,MAAMqP,KAAKC,MAAMN,EAAGvM,GAE7B,IAAMqN,EAAO,IAAIC,GAAW5e,KAAK6O,OAEjC,OADA8P,EAAKE,IAAIN,EAAGV,EAAGF,EAAGllB,EAAGilB,GACdiB,KA/Df1mB,IAAA,QAAAN,MAAA,WAsEQ,OAAOmnB,GAAgBC,KAAK/e,KAAKmM,OAtEzClU,IAAA,gBAAAN,MAAA,WA8EQ,OADcqI,KAAK6O,MAAM+O,eA7EjC3lB,IAAA,0BAAAN,MAAA,SAiF4BqnB,GACpB,OAAOhf,KAAKmM,GAAG8S,wBAAwBD,OAlF/ClC,EAAA,GA4FMoC,GAAN,WAiBI,SAAAA,EAAYzlB,GAAasjB,GAAA/c,KAAAkf,GACrBlf,KAAK6O,MAAQ,IAAImO,GAAYvjB,GAlBrC,OAAA0jB,GAAA+B,IAAAjnB,IAAA,aAAAN,MAAA,WA0BQ,OADAqI,KAAKid,GAAKC,GAAUG,WAAWrd,KAAK6O,OAC7B7O,KAAKid,MA1BpBhlB,IAAA,SAAAN,MAAA,SAgCWwnB,GACHnf,KAAKmf,IAAML,GAAgBC,KAAKI,MAjCxClnB,IAAA,6BAAAN,MAAA,SAoC+BynB,GACvB,QAAiBnhB,IAAb+B,KAAKmf,IAAT,CAMA,IAAMA,EAAMnf,KAAKmf,IACX1B,EAAMzd,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIE,KAAMrf,KAAKid,GAAGtlB,OAE9CH,EAAIwI,KAAK6O,MAAM+O,YACf0B,EAAKtf,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIE,KAAM7nB,GAErC+nB,EAAIvf,KAAK6O,MAAM2Q,SAASF,EAAIH,EAAIE,KAAM5B,EAAK2B,GAE3C3D,EAAIzb,KAAK6O,MAAM2P,IAAIiB,OAAOF,EAAGvf,KAAKid,GAAGtlB,MAAOqI,KAAK6O,MAAM6P,OAC7DjD,EAAEwC,IAAIzmB,GACNikB,EAAEiE,IAAI1f,KAAK6O,MAAM6P,OAEjB,IAAMiB,GACFJ,IACA9D,KAGEiC,EAAQ1d,KAAK6O,MAAM+Q,UAAUT,EAAId,MAYvC,OAVAre,KAAKyd,IAAMA,EACXzd,KAAK0d,MAAQA,GAGTD,MACAkC,KACAP,QACA1B,SA9BAhc,QAAQC,IAAI,4BAvCxB1J,IAAA,gBAAAN,MAAA,SA2EkBkoB,GAUV,IAAMC,EAAO,IAAI9f,KAAK6O,MAAMkR,KAC5BD,EAAK/B,KAAK/d,KAAKmf,IAAIa,GACnBF,EAAK7B,IAAIje,KAAK6O,MAAMqP,KAAK+B,MAAMjgB,KAAK6O,MAAMqR,GAAIL,EAAKM,IAAIxC,IACvDmC,EAAKM,SAEL,IAAM7B,EAAI,IAAIve,KAAK6O,MAAMiP,IACzBS,EAAER,KAAK8B,EAAKM,IAAI5B,GAChBA,EAAE6B,SAEF,IAAIC,EAAOrgB,KAAK6O,MAAMqP,KAAKoC,IAAIR,EAAMvB,GACrC8B,EAAOrgB,KAAK6O,MAAMqP,KAAKqC,KAAKF,GAE5B,IAAMxC,EAAI,IAAI7d,KAAK6O,MAAMiP,IACzBD,EAAEE,KAAK/d,KAAK6O,MAAMmP,IAClBH,EAAEI,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMne,KAAKmf,IAAIf,GAAIyB,EAAKM,IAAI1nB,IAClDolB,EAAEI,IAAIje,KAAKyd,KAEX,IAAK,IAAI/mB,EAAI,EAAGA,EAAImpB,EAAKnC,MAAM9hB,OAAQlF,IACnCmnB,EAAEI,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMne,KAAKmf,IAAIb,EAAE5nB,GAAImpB,EAAKnC,MAAMhnB,KAG1DmnB,EAAEuC,SACF,IAAII,EAAQxgB,KAAK6O,MAAMqP,KAAKoC,IAAItgB,KAAK6O,MAAMqR,GAAIrC,GAG/C,OAFA2C,EAAQxgB,KAAK6O,MAAMqP,KAAKqC,KAAKC,GAEtBH,EAAKI,OAAOD,MA9G3BvoB,IAAA,gBAAAN,MAAA,SAiHkBkoB,GAGV,OAFA7f,KAAK6f,KAAO,IAAIjB,GAAW5e,KAAK6O,OAChC7O,KAAK6f,KAAKa,KAAKb,IACR,KApHf5nB,IAAA,QAAAN,MAAA,SAuHUgpB,GACF,IAAMxB,EAAMnf,KAAKmf,IACXU,EAAO7f,KAAK6f,KAEZe,EAAK5gB,KAAK6O,MAAM+O,YAEhBiD,EAAK7gB,KAAK6O,MAAMqP,KAAKC,MAAM0B,EAAKM,IAAI5B,EAAGqC,GAEvCE,EAAK,IAAI9gB,KAAK6O,MAAM2P,IAAI,GAC9BsC,EAAG/C,KAAK6C,GACRE,EAAGrC,QAAQze,KAAK6O,MAAM6P,OAGtB,IAAIqC,EAAK,IAAI/gB,KAAK6O,MAAM2P,IAAI,GAC5BuC,EAAGhD,KAAK8B,EAAKM,IAAIxC,GACjBoD,EAAK/gB,KAAK6O,MAAM2P,IAAIwC,OAAOD,EAAI/gB,KAAK6O,MAAM6P,OAE1C,IAAMuC,EAAKjhB,KAAK6O,MAAMqP,KAAKC,MAAM0C,EAAIE,GACrCE,EAAGhD,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAM0B,EAAKM,IAAItC,EAAG+C,IAEzC,IAAMM,EAAKlhB,KAAK6O,MAAM+O,YAElBuD,EAAM,IAAInhB,KAAK6O,MAAM2P,IAAI,GAC7B2C,EAAIpD,KAAKmD,GACTC,EAAMnhB,KAAK6O,MAAM2P,IAAIwC,OAAOG,EAAKnhB,KAAK6O,MAAM6P,OAE5C,IAAM0C,EAAKphB,KAAK6O,MAAMqP,KAAKC,MAAM0B,EAAKM,IAAItC,EAAG+C,GAC7CQ,EAAGnD,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIf,GAAI+C,IAGrC,IAAIE,EAAKrhB,KAAK6O,MAAM2P,IAAIiB,OAAOyB,EAAIJ,EAAI9gB,KAAK6O,MAAM6P,QAClD2C,EAAKrhB,KAAK6O,MAAM2P,IAAIwC,OAAOK,EAAIrhB,KAAK6O,MAAM6P,QACvCT,IAAI4B,EAAKM,IAAI1nB,GAChB4oB,EAAG3B,IAAI1f,KAAK6O,MAAM6P,OAIlB,IADA,IAAM4C,KACG5qB,EAAI,EAAGA,EAAIiqB,EAAE/kB,OAAQlF,IACb,IAATiqB,EAAEjqB,GACF4qB,EAAI5qB,GAAKsJ,KAAK6O,MAAM+O,YAEpB0D,EAAI5qB,IAAK,EAKjB,IAAM6qB,EAAMvhB,KAAK6O,MAAM+O,YAEjB4D,EAAOxhB,KAAK6O,MAAM+O,YAElB6D,EAAOzhB,KAAK6O,MAAM+O,YAElB8D,EAAO1hB,KAAK6O,MAAM+O,YAElB+D,EAAO3hB,KAAK6O,MAAM+O,YAElBgE,EAAI5hB,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIE,KAAMsC,GAEpCrC,EAAKtf,KAAK6O,MAAMqP,KAAKC,MAAM0C,EAAIU,GACrCjC,EAAGrB,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIf,GAAIoD,IAErC,IAAMK,EAAK7hB,KAAK6O,MAAMqP,KAAKC,MAAMiD,EAAIK,GACrCI,EAAG5D,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIf,GAAIsD,IACrCG,EAAG5D,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMyD,EAAG,IAAI5hB,KAAK6O,MAAM2P,KAAK,KACpD,IAAK,IAAIxL,EAAI,EAAGA,EAAIsO,EAAI1lB,OAAQoX,KACb,IAAXsO,EAAItO,IACJ6O,EAAG5D,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIb,EAAEtL,GAAIsO,EAAItO,KAMnD,IAAM8O,EAAK9hB,KAAK6O,MAAM2Q,SAClBqB,EACAI,EACAG,EACAphB,KAAKyd,IACL6B,EACAuC,EACA7hB,KAAK6O,MAAMmP,GACXmB,EAAIf,GACJe,EAAIb,EACJa,EAAIa,GAGFZ,EAAQpf,KAAK6O,MAAM+O,YAEnB7mB,EAAIiJ,KAAK6O,MAAM2Q,SAASJ,EAAO0C,EAAInB,EAAG3gB,KAAK0d,OAG3CqE,EAAO,IAAI/hB,KAAK6O,MAAM2P,IAAI,GAChCuD,EAAKhE,KAAK4D,GACVI,EAAK9D,IAAIje,KAAK6O,MAAM2P,IAAIiB,OAAO1oB,EAAGiJ,KAAKid,GAAGtlB,MAAOqI,KAAK6O,MAAM6P,QAC5DqD,EAAKrC,IAAI1f,KAAK6O,MAAM6P,OAIpB,IADA,IAAMsD,KACGC,EAAI,EAAGA,EAAItB,EAAE/kB,OAAQqmB,IACb,IAATtB,EAAEsB,IACFD,EAAIC,GAAK,IAAIjiB,KAAK6O,MAAM2P,IAAI,GAC5BwD,EAAIC,GAAGlE,KAAKuD,EAAIW,IAChBD,EAAIC,GAAGC,IAAIliB,KAAK6O,MAAM2P,IAAIiB,OAAO1oB,EAAGiJ,KAAK0d,MAAMuE,GAAIjiB,KAAK6O,MAAM6P,QAC9DsD,EAAIC,GAAGvC,IAAI1f,KAAK6O,MAAM6P,QAEtBsD,EAAIC,IAAK,EAKjB,IAAME,EAAM,IAAIniB,KAAK6O,MAAM2P,IAAI,GAC/B2D,EAAIpE,KAAKwD,GACTY,EAAID,IAAIliB,KAAK6O,MAAM2P,IAAIiB,OAAO1oB,EAAG8oB,EAAKM,IAAIxC,EAAG3d,KAAK6O,MAAM6P,QACxDyD,EAAIzC,IAAI1f,KAAK6O,MAAM6P,OAGnB,IAAM0D,EAAO,IAAIpiB,KAAK6O,MAAM2P,IAAI,GAChC4D,EAAKrE,KAAKyD,GACVY,EAAKnE,IAAIje,KAAK6O,MAAM2P,IAAIiB,OAAO1oB,EAAGmqB,EAAIlhB,KAAK6O,MAAM6P,QACjD0D,EAAK1C,IAAI1f,KAAK6O,MAAM6P,OAGpB,IAAM2D,EAAO,IAAIriB,KAAK6O,MAAM2P,IAAI,GAChC6D,EAAKtE,KAAK0D,GACVY,EAAKpE,IAAIje,KAAK6O,MAAM2P,IAAIiB,OAAO1oB,EAAG+pB,EAAI9gB,KAAK6O,MAAM6P,QACjD2D,EAAK3C,IAAI1f,KAAK6O,MAAM6P,OAGpB,IAAM4D,EAAO,IAAItiB,KAAK6O,MAAM2P,IAAI,GAChC8D,EAAKvE,KAAK2D,GACVY,EAAKJ,IAAIliB,KAAK6O,MAAM2P,IAAIiB,OAAO1oB,EAAGsqB,EAAIrhB,KAAK6O,MAAM6P,QACjD4D,EAAK5C,IAAI1f,KAAK6O,MAAM6P,OAEpB,IAAMiB,GACF5oB,IACAgrB,OACAC,MACAG,MACAC,OACAC,OACAC,OACAlD,SAWJ,OAPIyB,KACAI,KACAG,KACA3D,IAAKzd,KAAKyd,IACVkC,SA3QZ1nB,IAAA,SAAAN,MAAA,SAiRW4qB,EAAY5B,EAAUjD,GACzB,IAAMyB,EAAMnf,KAAKmf,IAGXqD,EAAI,IAAIxiB,KAAK6O,MAAMiP,IAAI,GAE7B,GAAIyE,EAAM1B,GAAGJ,OAAO+B,GAGhB,OADA9gB,QAAQC,IAAI,wCACL,EAGX,IAAMkf,EAAK,IAAI7gB,KAAK6O,MAAMiP,IAC1B+C,EAAG9C,KAAKwE,EAAM1B,IACd,IAAMb,EAAI,IAAIhgB,KAAK6O,MAAMkR,KACzBC,EAAEjC,KAAKoB,EAAIa,GACX,IAAMiB,EAAK,IAAIjhB,KAAK6O,MAAMiP,IAC1BmD,EAAGlD,KAAKwE,EAAMtB,IACd,IAAMwB,EAAQ,IAAIziB,KAAK6O,MAAMkR,KAC7B0C,EAAM1E,KAAK/d,KAAK6O,MAAMqR,IAEtBW,EAAGT,SACHJ,EAAEI,SACFa,EAAGb,SACHqC,EAAMrC,SAEN,IAAIC,EAAOrgB,KAAK6O,MAAMqP,KAAKoC,IAAIN,EAAGa,GAC9BL,EAAQxgB,KAAK6O,MAAMqP,KAAKoC,IAAImC,EAAOxB,GAKvC,GAHAZ,EAAOrgB,KAAK6O,MAAMqP,KAAKqC,KAAKF,GAC5BG,EAAQxgB,KAAK6O,MAAMqP,KAAKqC,KAAKC,IAExBH,EAAKI,OAAOD,GAGb,OADA9e,QAAQC,IAAI,uDACL,EAGXsf,EAAGlD,KAAKwE,EAAMtB,IAEd,IAAMyB,EAAM1iB,KAAK6O,MAAMqP,KAAKC,MAAM0C,EAAI0B,EAAM5C,GAAGwC,KAC/CO,EAAIzE,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIf,GAAImE,EAAM5C,GAAGyC,OAC/CnB,EAAGiB,IAAIK,EAAMnB,IACbsB,EAAIzE,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAM8C,EAAIjhB,KAAK6O,MAAM2P,IAAIwC,OAAOuB,EAAM5C,GAAG5oB,EAAGiJ,KAAK6O,MAAM6P,SAI/E,IAAMiE,EAAM3iB,KAAK6O,MAAMqP,KAAKC,MAAMoE,EAAMnB,GAAImB,EAAM5C,GAAG0C,MACrDM,EAAI1E,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIf,GAAImE,EAAM5C,GAAG2C,OAC/CK,EAAI1E,IACAje,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIE,KAAMrf,KAAK6O,MAAM2P,IAAIwC,OAAOuB,EAAM5C,GAAGoC,KAAM/hB,KAAK6O,MAAM6P,SAGpF,IAAMvW,EAAM,IAAInI,KAAK6O,MAAMiP,IAC3B3V,EAAI4V,KAAK/d,KAAK6O,MAAMmP,IACpB,IAAK,IAAItnB,EAAI,EAAGA,EAAIiqB,EAAE/kB,OAAQlF,IACb,IAATiqB,EAAEjqB,GACFisB,EAAI1E,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIb,EAAE5nB,GAAI6rB,EAAM5C,GAAGqC,IAAItrB,KAErDyR,EAAI8V,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMgB,EAAIb,EAAE5nB,GAAIgnB,EAAMhnB,KAItDisB,EAAI1E,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMhW,EAAKnI,KAAK6O,MAAM2P,IAAIwC,OAAOuB,EAAM5C,GAAG5oB,EAAGiJ,KAAK6O,MAAM6P,SAEhF,IAAMkE,EAAK5iB,KAAK6O,MAAM2Q,SAClB+C,EAAM1B,GACN0B,EAAMtB,GACNsB,EAAMnB,GACNmB,EAAM9E,IACNiF,EACAC,EACA3iB,KAAK6O,MAAMmP,GACXmB,EAAIf,GACJe,EAAIb,EACJa,EAAIa,GAEF6C,EAAK7iB,KAAK6O,MAAM2Q,SAAS+C,EAAM5C,GAAGP,MAAOwD,EAAIjC,EAAGjD,GAEtD,OAA4C,IAAxC1d,KAAK6O,MAAM2P,IAAIsE,KAAKD,EAAIN,EAAM5C,GAAG5oB,KAEjC2K,QAAQC,IAEJ,iHAEG,OAtWnBud,EAAA,GAiXMlC,GAAN,WAYI,SAAA+F,EAAYtpB,GAAasjB,GAAA/c,KAAA+iB,GACrB/iB,KAAKvG,MAAQA,EACbuG,KAAKgjB,IAAM,IAAIC,GAAIxpB,GAEnBuG,KAAKke,KAAOle,KAAKgjB,IAAI9E,KACrBle,KAAK8d,IAAM9d,KAAKgjB,IAAIlF,IACpB9d,KAAK+f,KAAO/f,KAAKgjB,IAAIjD,KACrB/f,KAAKwe,IAAMxe,KAAKgjB,IAAIxE,IACpBxe,KAAKkjB,IAAM,IAAIljB,KAAKgjB,IAAIG,KAExBnjB,KAAKge,GAAKhe,KAAKojB,iBACfpjB,KAAKkgB,GAAKlgB,KAAKqjB,iBACfrjB,KAAK0e,MAAQ1e,KAAKsjB,WAxB1B,OAAAnG,GAAA4F,IAAA9qB,IAAA,iBAAAN,MAAA,WA4BQ,IAAMqmB,EAAK,IAAIhe,KAAKgjB,IAAIlF,IAAI,GACtByF,EAAI,IAAIvjB,KAAKgjB,IAAIxE,IAAI,GACrBgF,EAAI,IAAIxjB,KAAKgjB,IAAIxE,IAAI,GAI3B,OAHA+E,EAAEE,MAAMzjB,KAAKgjB,IAAIU,UAAUC,UAC3BH,EAAEC,MAAMzjB,KAAKgjB,IAAIU,UAAUE,UAC3B5F,EAAG6F,MAAMN,EAAGC,GACLxF,KAlCf/lB,IAAA,iBAAAN,MAAA,WAsCQ,IAAMuoB,EAAK,IAAIlgB,KAAKgjB,IAAIjD,KAAK,GACvBwD,EAAI,IAAIvjB,KAAKgjB,IAAIxE,IAAI,GACrBgF,EAAI,IAAIxjB,KAAKgjB,IAAIxE,IAAI,GACrBsF,EAAK,IAAI9jB,KAAKgjB,IAAIe,IAAI,GACtBC,EAAK,IAAIhkB,KAAKgjB,IAAIe,IAAI,GAQ5B,OAPAR,EAAEE,MAAMzjB,KAAKgjB,IAAIU,UAAUO,WAC3BT,EAAEC,MAAMzjB,KAAKgjB,IAAIU,UAAUQ,WAC3BJ,EAAGK,KAAKZ,EAAGC,GACXD,EAAEE,MAAMzjB,KAAKgjB,IAAIU,UAAUU,WAC3BZ,EAAEC,MAAMzjB,KAAKgjB,IAAIU,UAAUW,WAC3BL,EAAGG,KAAKZ,EAAGC,GACXtD,EAAG2D,MAAMC,EAAIE,GACN9D,KAlDfjoB,IAAA,WAAAN,MAAA,WAsDQ,IAAMH,EAAI,IAAIwI,KAAKgjB,IAAIxE,IAAI,GAE3B,OADAhnB,EAAEisB,MAAMzjB,KAAKgjB,IAAIU,UAAUY,aACpB9sB,KAxDfS,IAAA,YAAAN,MAAA,WA4DQ,IAAM4E,EAAMoG,GAA0B,KAItC,OAHA3C,KAAKkjB,IAAIqB,QACTvkB,KAAKkjB,IAAIlH,KAAK,IAAKzf,GACTyD,KAAKwe,IAAIgG,UAAUxkB,KAAK0e,MAAO1e,KAAKkjB,QA/DtDjrB,IAAA,YAAAN,MAAA,WAoEQ,IAAMH,EAAIwI,KAAK4d,YAEf,OADU5d,KAAKke,KAAKC,MAAMne,KAAKge,GAAIxmB,MArE3CS,IAAA,YAAAN,MAAA,WA0EQ,IAAMH,EAAIwI,KAAK4d,YAEf,OADU5d,KAAKke,KAAK+B,MAAMjgB,KAAKkgB,GAAI1oB,MA3E3CS,IAAA,WAAAN,MAAA,WA+E6B,IACrB,IAAI8sB,KACAnT,KAFiB7C,EAAAzQ,UAAApC,OAAb8oB,EAAa1lB,MAAAyP,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAb+V,EAAa/V,GAAA3Q,UAAA2Q,GAGrB+V,EAAOC,QAAQ,SAACnsB,GACRwG,MAAM4lB,QAAQpsB,GACM,iBAATA,EAAE,IACTisB,EAAMA,EAAIvlB,OAAO1G,GACjB8Y,MAEA9Y,EAAEmsB,QAAQ,SAACE,GACPA,EAAGC,QAAQxT,GACXmT,EAAMA,EAAIvlB,OAAOoS,GACjBA,QAIR9Y,EAAEssB,QAAQxT,GACVmT,EAAMA,EAAIvlB,OAAOoS,GACjBA,QAGR,IAAMyT,EAAI,IAAI/kB,KAAKgjB,IAAIgC,QACvBD,EAAEE,cAAcR,GAChB,IAAMjJ,EAAIuJ,EAAE7b,OACNqW,EAAIvf,KAAKwe,IAAI0G,UAAU1J,GAE7B,OADA+D,EAAEG,IAAI1f,KAAK0e,OACJa,KAzGftnB,IAAA,YAAAN,MAAA,SA4Gc+lB,GAGN,IAFA,IAAMyH,KAEGzuB,EAAI,EAAGA,EAAIgnB,EAAM9hB,OAAQlF,IAAK,CACnC,IAAMkB,EAAIoI,KAAK4d,YACfuH,EAAMzuB,GAAKkB,EAGf,OAAOutB,KApHfltB,IAAA,iBAAAN,MAAA,SAuHmB+lB,GAGX,IAFA,IAAMyH,KAEGzuB,EAAI,EAAGA,EAAIgnB,EAAM9hB,OAAQlF,IAAK,CACnC,IAAMkB,EAAIoI,KAAKolB,YACfD,EAAMzuB,GAAKkB,EAGf,OAAOutB,MA/HfpC,EAAA,GAuIMsC,GAEF,SAAAA,EAAYxW,GAAkBkO,GAAA/c,KAAAqlB,GAC1BrlB,KAAK6O,MAAQA,GAIfqO,GAAN,SAAAoI,GAcI,SAAApI,EAAYrO,GAAkBkO,GAAA/c,KAAAkd,GAAA,IAAAqI,EAAAC,GAAAxlB,MAAAkd,EAAAvU,WAAAvR,OAAAwR,eAAAsU,IAAArmB,KAAAmJ,KACpB6O,IADoB,OAE1B0W,EAAK5tB,MAAQ,IAAI4tB,EAAK1W,MAAM2P,IAAI,GAFN+G,EAdlC,OAAAE,GAAAvI,EAA+BmI,IAA/BlI,GAAAD,EAAA,OAAAjlB,IAAA,aAAAN,MAAA,SAKsBkX,GACd,IAAM0U,EAAI1U,EAAM+O,YACVX,EAAK,IAAIC,EAAUrO,GAEzB,OADAoO,EAAGyI,SAASnC,GACLtG,MATfE,GAAAD,IAAAjlB,IAAA,WAAAN,MAAA,SAmBa4F,GACLyC,KAAKrI,MAAMomB,KAAKxgB,MApBxBtF,IAAA,0BAAAN,MAAA,WAwBQ,IAAM4rB,EAAIvjB,KAAKrI,MACTqoB,EAAIhgB,KAAK6O,MAAMqP,KAAK+B,MAAMjgB,KAAK6O,MAAMqR,GAAIqD,GAC3C/rB,EAAIwI,KAAK6O,MAAM+O,YAEb+H,EAAM3lB,KAAK6O,MAAMqP,KAAKC,MAAMne,KAAK6O,MAAMmP,GAAIxmB,GAE3CouB,EAAM5lB,KAAK6O,MAAMqP,KAAKC,MAAMwH,EAAKpC,GAGvC/rB,EAAIwI,KAAK6O,MAAM+O,YACf,IAAM0B,EAAKtf,KAAK6O,MAAMqP,KAAK+B,MAAMjgB,KAAK6O,MAAMqR,GAAI1oB,GAC1CqqB,EAAK7hB,KAAK6O,MAAMqP,KAAKC,MAAMwH,EAAKnuB,GAEhC+nB,EAAIvf,KAAK6O,MAAM2Q,SAASF,EAAIuC,EAAI7hB,KAAK6O,MAAMqR,GAAIyF,EAAK3F,EAAG4F,GAEvDnK,EAAIzb,KAAK6O,MAAM2P,IAAIiB,OAAOF,EAAGgE,EAAGvjB,KAAK6O,MAAM6P,OACjDjD,EAAEwC,IAAIzmB,GACNikB,EAAEiE,IAAI1f,KAAK6O,MAAM6P,OAEjB,IAAMiB,GACFJ,IACA9D,KAGEtP,EAAK,IAAI2S,GAAgB9e,KAAK6O,OAEpC,OADA1C,EAAG0Z,cAAc7F,EAAG2F,EAAKC,EAAKjG,GACvBxT,KAlDflU,IAAA,UAAAN,MAAA,WA2DQ,YAAmBsG,IAAf+B,KAAKrI,MACE,GAEJqI,KAAKrI,MAAMmtB,aA9D1B7sB,IAAA,YAAAN,MAAA,SAsEcc,GAEN,OADAuH,KAAKrI,MAAQqI,KAAK6O,MAAM2P,IAAI0G,UAAUzsB,GAC/BuH,KAAKrI,MAAM0E,cAxE1BpE,IAAA,OAAAN,MAAA,WAgFQ,IAAM4rB,EAAIvjB,KAAK6O,MAAM+O,YACrB5d,KAAK0lB,SAASnC,OAjFtBrG,EAAA,GAsFM4B,GAAN,SAAAgH,GA2BI,SAAAhH,EAAYjQ,GAAkBkO,GAAA/c,KAAA8e,GAAA,IAAAiH,EAAAP,GAAAxlB,MAAA8e,EAAAnW,WAAAvR,OAAAwR,eAAAkW,IAAAjoB,KAAAmJ,KACpB6O,IAENkX,EAAK/F,EAAI,IAAI+F,EAAKlX,MAAMkR,KACxBgG,EAAKJ,IAAM,IAAII,EAAKlX,MAAMiP,IAC1BiI,EAAKH,IAAM,IAAIG,EAAKlX,MAAMiP,IAE1B,IAAMyB,EAAI,IAAIwG,EAAKlX,MAAM2P,IACnB/C,EAAI,IAAIsK,EAAKlX,MAAM2P,IARC,OAS1BuH,EAAKpG,IAAMJ,IAAG9D,KAEdsK,EAAK3H,GAAK,IAAI2H,EAAKlX,MAAMiP,IACzBiI,EAAK1G,KAAO,IAAI0G,EAAKlX,MAAMiP,IAC3BiI,EAAK1H,QAbqB0H,EA3BlC,OAAAN,GAAA3G,EAAqCuG,IAArClI,GAAA2B,EAAA,OAAA7mB,IAAA,OAAAN,MAAA,SAKgBquB,GACR,IAAM7Z,EAAK,IAAI2S,EAAgBkH,EAAOnX,OAGtC,OAFA1C,EAAG0Z,cAAcG,EAAOhG,EAAGgG,EAAOL,IAAKK,EAAOJ,IAAKI,EAAOrG,IAC1DxT,EAAG8Z,aAAaD,EAAO5H,GAAI4H,EAAO3G,KAAM2G,EAAO1H,EAAG0H,EAAO3H,MAClDlS,MATfgR,GAAA2B,IAAA7mB,IAAA,gBAAAN,MAAA,SAgDkBqoB,EAAQ2F,EAAUC,EAAUjG,GACtC3f,KAAKggB,EAAEjC,KAAKiC,GACZhgB,KAAK2lB,IAAI5H,KAAK4H,GACd3lB,KAAK4lB,IAAI7H,KAAK6H,GACd5lB,KAAK2f,GAAGJ,EAAExB,KAAK4B,EAAGJ,GAClBvf,KAAK2f,GAAGlE,EAAEsC,KAAK4B,EAAGlE,MArD1BxjB,IAAA,eAAAN,MAAA,SA6DiBymB,EAASiB,EAAWf,EAAUD,GACvCre,KAAKoe,GAAGL,KAAKK,GACbpe,KAAKqf,KAAKtB,KAAKsB,GACfrf,KAAKse,KACLte,KAAKqe,QAEL,IAAK,IAAI3nB,EAAI,EAAGA,EAAI4nB,EAAE1iB,OAAQlF,IAC1BsJ,KAAKse,EAAE5nB,GAAK,IAAIsJ,KAAK6O,MAAMiP,IAC3B9d,KAAKse,EAAE5nB,GAAGqnB,KAAKO,EAAE5nB,IAErB,IAAK,IAAIwvB,EAAI,EAAGA,EAAI7H,EAAKziB,OAAQsqB,IAC7BlmB,KAAKqe,KAAK6H,GAAK7H,EAAK6H,MAxEhCjuB,IAAA,eAAAN,MAAA,SAmFiB4lB,GACT,IAAM4H,EAAQnlB,KAAK6O,MAAMsX,eAAe5I,GAClCa,EAAKpe,KAAK6O,MAAMuW,YAEhB/F,EAAOrf,KAAK6O,MAAMuW,YAClB9G,KAEN6G,EAAMR,QAAQ,SAACrjB,GACXgd,EAAEziB,KAAKyF,KAGXtB,KAAKoe,GAAKA,EACVpe,KAAKqf,KAAOA,EACZrf,KAAKse,EAAIA,EACTte,KAAKqe,KAAOd,KAjGpBtlB,IAAA,0BAAAN,MAAA,SAwG4BqnB,GACpB,IAAMO,EAAI,IAAIvf,KAAK6O,MAAM2P,IAAI,GAC7Be,EAAExB,KAAKiB,EAAGW,GAAGJ,GAGb,IAAMmD,EAAM1iB,KAAK6O,MAAMqP,KAAKC,MAAMne,KAAKqf,KAAML,EAAGW,GAAGlE,GACnDiH,EAAIzE,IAAIje,KAAK6O,MAAMqP,KAAKC,MAAMa,EAAGvB,IAAKzd,KAAK6O,MAAM2P,IAAIwC,OAAOzB,EAAGvf,KAAK6O,MAAM6P,SAE1E,IAAM0H,EAAKpmB,KAAK6O,MAAM2Q,SAASkD,EAAK1iB,KAAKqf,KAAML,EAAGvB,IAAKuB,EAAGI,OAE1D,OAA4C,IAArCpf,KAAK6O,MAAM2P,IAAIsE,KAAK9D,EAAGW,GAAGJ,EAAG6G,OAlH5CtH,EAAA,GA2HMF,GAAN,SAAAyH,GASI,SAAAzH,EAAY/P,GAAkBkO,GAAA/c,KAAA4e,GAAA,IAAA0H,EAAAd,GAAAxlB,MAAA4e,EAAAjW,WAAAvR,OAAAwR,eAAAgW,IAAA/nB,KAAAmJ,KACpB6O,IACA0P,EAAI,IAAI+H,EAAKzX,MAAMiP,IACnBD,EAAI,IAAIyI,EAAKzX,MAAMiP,IACnBH,EAAI,IAAI2I,EAAKzX,MAAM2P,IACnB/lB,EAAI,IAAI6tB,EAAKzX,MAAM2P,IALC,OAM1B8H,EAAKnG,KAAO5B,IAAGV,IAAGF,IAAGllB,KACrB6tB,EAAK5I,SAPqB4I,EATlC,OAAAb,GAAA7G,EAAgCyG,IAAhClI,GAAAyB,IAAA3mB,IAAA,MAAAN,MAAA,SAmBQ4mB,EAAQV,EAAQF,EAAQllB,EAAQilB,GAChC1d,KAAKmgB,IAAI5B,EAAER,KAAKQ,GAChBve,KAAKmgB,IAAItC,EAAEE,KAAKF,GAChB7d,KAAKmgB,IAAIxC,EAAEI,KAAKJ,GAChB3d,KAAKmgB,IAAI1nB,EAAEslB,KAAKtlB,GAEhB,IAAK,IAAI/B,EAAI,EAAGA,EAAIgnB,EAAM9hB,OAAQlF,IAC9BsJ,KAAK0d,MAAMhnB,GAAK,IAAIsJ,KAAK6O,MAAM2P,IAC/Bxe,KAAK0d,MAAMhnB,GAAGqnB,KAAKL,EAAMhnB,OA3BrCuB,IAAA,OAAAN,MAAA,SA+BSquB,GACDhmB,KAAK6e,IAAImH,EAAO7F,IAAI5B,EAAGyH,EAAO7F,IAAItC,EAAGmI,EAAO7F,IAAIxC,EAAGqI,EAAO7F,IAAI1nB,EAAGutB,EAAOtI,WAhChFkB,EAAA,yPChzBA,kBAgBI,SAAA2H,EAAY5uB,GACR,+FADsB6uB,CAAAxmB,KAAAumB,GAClB5uB,GAASA,EAAMiE,OAAS,IAAMjE,IAAU,aAAawL,KAAKxL,GAC1D,MAAM,IAAIgG,MAAM,iBAAmBhG,GAEvCqI,KAAKrI,MAAQA,GAAS,uEAlBPmS,GACf,IAAM2c,EAAI,IAAIF,EACVhpB,EAAIuM,EAAGvJ,KAAK,GAGhB,IADAhD,EAAIiB,GAAWjB,GACW,OAAnBA,EAAEM,OAAO,EAAG,IACfN,EAAIA,EAAExB,UAAU,GAGpB,OADA0qB,EAAE9uB,MAAQ,IAAIqN,EAAA,UAAUzH,EAAG,IAAIlB,WACxBoqB,8CAcP,IAAInoB,EAAY,IAAI0G,EAAA,UAAUhF,KAAKrI,OAAO0E,SAAS,IAQnD,OALAiC,EAAYA,EAAU1C,OAFT8qB,IAE2B,EAClCpoB,GACC,IAAIC,OAJEmoB,IAIapoB,GAAWvC,UAAUuC,EAAU1C,QAEzD0C,EAAYE,GAAWF,oRCzB3B,SAAAqoB,EAAY1vB,EAAc2vB,EAAoBptB,gGAAuBqtB,CAAA7mB,KAAA2mB,GACjE3mB,KAAK/I,KAAOA,EACZ+I,KAAK4mB,WAAaA,EAClB5mB,KAAKxG,WAAaA,kDAGTvC,GAAY,IAAAwM,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAGrB,QAAA2F,EAAAC,EAAgB7D,KAAKxG,WAArB/B,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAiC,KAAtBlG,EAAsBqG,EAAAjM,MAC7B,GAAI4F,EAAEupB,YAAc7vB,EAChB,OAAOsG,GALM,MAAAsE,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAQrB,OAAO,8CAGwB,QAAA8K,EAAAzQ,UAAApC,OAAjB8S,EAAiB1P,MAAAyP,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAjBD,EAAiBC,GAAA3Q,UAAA2Q,GAC/B,IAAK,IAAIjY,EAAI,EAAG8J,EAAMkO,EAAK9S,OAAQlF,EAAI8J,EAAK9J,IAExC,IAAK,IAAIqwB,EAAI,EAAIA,EAAI/mB,KAAKxG,WAAWoC,OAAQmrB,IACrCrY,EAAKhY,GAAGO,OAAS+I,KAAKxG,WAAWutB,GAAGD,WACpC9mB,KAAKxG,WAAWutB,GAAGrB,SAAShX,EAAKhY,uCAY7C,IAAMgR,GACFzQ,KAAO+I,KAAK/I,KACZ2vB,WAAa5mB,KAAK4mB,WAClBptB,WAAawG,KAAKxG,YAGtB,OAAOsI,KAAKC,UAAU2F,kjCCvCUsf,4CAmChC,IAAIrrB,EAAS,GAiBb,OAdAA,GAAUuB,GAAa8C,KAAKoN,MAE5BzR,GAAU2B,GAAa0C,KAAKinB,aAE5BtrB,GAAU0B,GAAa2C,KAAK/I,MAE5B0E,GAAU0B,GAAa2C,KAAKknB,SAE5BvrB,GAAU0B,GAAa2C,KAAKmnB,QAE5BxrB,GAAU0B,GAAa2C,KAAKonB,OAE5BzrB,GAAU0B,GAAa2C,KAAKqnB,iDASpBvd,GAGR,IAAMsD,EAAOtD,EAAG6D,gBAChB3N,KAAKoN,KAAOA,EAEZ,IAAMka,EAAYxd,EAAGvJ,KAAK,GAC1BP,KAAKinB,YAA4B,OAAdK,EAEnB,IAAMrwB,EAAO6S,EAAG6D,gBAChB3N,KAAK/I,KAAOgG,GAAWhG,GAEvB,IAAMswB,EAAczd,EAAG6D,gBACvB3N,KAAKknB,QAAUjqB,GAAWsqB,GAE1B,IAAMJ,EAASrd,EAAG6D,gBAClB3N,KAAKmnB,OAASlqB,GAAWkqB,GAEzB,IAAMC,EAAQtd,EAAG6D,gBACjB3N,KAAKonB,MAAQnqB,GAAWmqB,GAExB,IAAMC,EAAcvd,EAAG6D,gBACvB3N,KAAKqnB,YAAcpqB,GAAWoqB,sQC1F1BG,kBCaR,SAAAC,IAAA,mGAAAC,CAAA1nB,KAAAynB,oKAAAE,CAAA3nB,MAAAynB,EAAA9e,WAAAvR,OAAAwR,eAAA6e,IAAA5wB,KAAAmJ,0UAboCgnB,4CAyEhC,IAAIrrB,EAAS,GAMb,OADAA,GAAUuB,GAAa8C,KAAKoN,0CAqCpBtD,GAGR,IAAMsD,EAAOtD,EAAG6D,gBAGhB,OADA3N,KAAKoN,KAAOA,EACLpN,qQDzHf,SAAYwnB,GACRA,IAAA,iBACAA,IAAA,oBACAA,IAAA,qCACAA,IAAA,+BAJJ,CAAYA,aAaZ,IAAMI,GAAN,oBAAAC,iGAAAC,CAAA9nB,KAAA6nB,GAAA,OAAAE,GAAAF,IAAA5vB,IAAA,YAAAN,MAAA,WAMQ,IAAIgE,EAAS,GAEb,GADAA,GAAUmC,GAAckC,KAAKgoB,OACzBhoB,KAAKgoB,QAAUR,GAA0BS,OACzCtsB,GAAUqE,KAAKjB,SACZ,IAAIiB,KAAKgoB,QAAUR,GAA0BU,gBACzCloB,KAAKgoB,QAAUR,GAA0BW,aACzCnoB,KAAKgoB,QAAUR,GAA0BY,MAGhD,MAAMzvB,EAAWyK,eAFjBzH,GAAUuB,GAAa8C,KAAKjB,MAKhC,OAAOpD,KAlBf1D,IAAA,cAAAN,MAAA,SAqBgB0wB,GAER,IAAML,EAAQlsB,SAASusB,EAAG9nB,KAAK,GAAI,IAI7B+nB,EAAUD,EAAG/nB,cACbvB,EAAOspB,EAAG9nB,KAAK+nB,GACrBtoB,KAAKgoB,MAAQA,EAEbhoB,KAAKjB,KAAOA,MA/BpB8oB,EAAA,yPERA,ICIYU,GDJNC,GAAN,oBAAAC,iGAAAC,CAAA1oB,KAAAyoB,GAAA,OAAAE,GAAAF,IAAAxwB,IAAA,YAAAN,MAAA,WA0FQ,IAAIgE,EAAS,GAkBPitB,EAAmBjc,GAAkB3M,KAAK6oB,SAC5CC,EAAqB,GACzB,GAA4B,IAAxB9oB,KAAK+oB,QAAQntB,OACb,MAAM,IAAI+B,MAAM,qBAQpB,OANImrB,EAD+B,IAAxB9oB,KAAK+oB,QAAQntB,OACCsQ,GAAkBlM,KAAK+oB,QAAQ,IAE/Bxc,GAAuBvM,KAAK+oB,QAAS/oB,KAAKgpB,GAEnErtB,GAAUuB,GAAa0rB,GACvBjtB,GAAUuB,GAAa4rB,QAtH/B7wB,IAAA,cAAAN,MAAA,SAOuBmS,GACf,IAAMqW,EAAM,IAAIsI,EAkBVG,EAAmB9e,EAAG6D,gBACtBmb,EAAqBhf,EAAG6D,gBACxBkb,EfyJR,SAA+Bjd,GAGjC,IAFA,IAAMgB,KACA9C,EAAK,IAAIhK,GAAa8L,IACpB9B,EAAG5J,WACP0M,EAAK/Q,KAAKsR,GAAUrD,IAExB,OAAO8C,Ee/Jaqc,CAAqBL,GAC/BM,EfqKR,SAAyBtd,GAC3B,IAAMsd,EAAO,IAAInb,GACXob,EAAMrtB,SAAS8P,EAAO/N,QAAQ,EAAG,GAAI,IAC3C,GAAIsrB,IAAQ3tB,EAAO8Q,SAAU,CACzB,IACMH,EAAKsB,GADA,IAAI3N,GAAa8L,IAI5B,OAFAsd,EAAKF,EAAI,EACTE,EAAKH,SAAW5c,GACT+c,EACJ,GAAIC,IAAQ3tB,EAAOkR,cAAe,CACrC,IAAM0c,EAAK,IAAItpB,GAAa8L,GACtB9U,EAAIgF,SAASstB,EAAG7oB,KAAK,GAAI,IAAM/E,EAAO+P,MAAQ,EAC9CpT,EAAI2D,SAAS8P,EAAO/N,QAAQ,EAAG,GAAI,IAAMrC,EAAO+P,MAAQ,EAC9D2d,EAAKF,EAAIlyB,EACToyB,EAAKH,WACL,IAAK,IAAIryB,EAAI,EAAGA,EAAIyB,EAAGzB,IAAK,CACxB,IAAMuB,EAAMwV,GAAW2b,GACvBF,EAAKH,QAAQltB,KAAK5D,GAGtB,OAAOixB,EAEP,MAAM,IAAIvrB,MAAM,wBe3LH0rB,CAAeP,GAI5B,OAHA3I,EAAI6I,EAAIE,EAAKF,EACb7I,EAAI4I,QAAUG,EAAKH,QACnB5I,EAAI0I,QAAUA,EACP1I,KAjCfloB,IAAA,SAAAN,MAAA,SA6CkBuR,EAAyB0M,EAAwB5N,GAC3D,IAAMe,EAAY,IAAI0f,EAMtB,OAJA1f,EAAUigB,EAAI,EACdjgB,EAAUggB,SAAWnT,EAAWkF,gBAChC/R,EAAU8f,SAAWjT,EAAW2E,KAAKrR,EAAMlB,GAAQoE,gBAE5CrD,KApDf9Q,IAAA,cAAAN,MAAA,eAAAmiB,2RAAAwP,CAAAtP,mBAAAC,KAAA,SAAAC,EAgE6BhR,EAAyB0M,EAAwB5N,GAhE9E,IAAAe,EAAA,OAAAiR,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAArW,MAAA,cAiEcgF,EAAY,IAAI0f,GAEZO,EAAI,EACdjgB,EAAUggB,SAAWnT,EAAWkF,gBApExCV,EAAArW,KAAA,EAqEoC6R,EAAW2T,UAAUrgB,EAAMlB,GArE/D,cAAAoS,EAAAoP,GAAApP,EAAAqP,KAqEwErd,eAAhErD,EAAU8f,SArElBzO,EAAAoP,IAAApP,EAAAE,OAAA,SAuEevR,GAvEf,wBAAAqR,EAAA3a,SAAAya,EAAAla,SAAA,gBAAAwa,EAAAC,EAAAC,GAAA,OAAAZ,EAAApd,MAAAsD,KAAAhC,YAAA,MAAAyqB,EAAA,yVCIA,SAAYF,GACRA,IAAA,2BACAA,IAAA,iBACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,2BACAA,IAAA,eANJ,CAAYA,cAqBZ,oBAAAmB,IAAAC,GAAA3pB,KAAA0pB,GAAAE,GAAAF,IAAAzxB,IAAA,YAAAN,MAAA,WAgBQ,IAAIgE,EAAS,GAGb,OAFAA,GAAUqE,KAAKuE,OAAOslB,YACtBluB,GAAUqE,KAAK8pB,MAAMD,iBAlB7B5xB,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAMigB,EAAM,IAAIL,EACVnlB,EAASylB,GAAQnN,YAAY/S,GAC7BggB,EAAQhgB,EAAGvJ,KAAK,IAGtB,OAFAwpB,EAAIxlB,OAASA,EACbwlB,EAAID,MAAQ,IAAI5V,GAAQ4V,GACjBC,MAPf,GAZO,IAmCDE,GAAN,WA0FI,SAAAC,IAAAP,GAAA3pB,KAAAkqB,GA1CAlqB,KAAAW,KAAe,IAKfX,KAAAknB,QAAkB,EAelBlnB,KAAAmqB,gBAoBAnqB,KAAA4M,QAGI5M,KAAKof,MAAQpjB,GAAa2G,GAAoB,IAC9C3C,KAAKoqB,SAAW,IAAIJ,GAIpBhqB,KAAKqqB,SAAW,IAAIL,GACpBhqB,KAAK8pB,MAAQ,IAAI5V,GAAQ,4CAjGjC,OAAA0V,GAAAM,IAAAjyB,IAAA,YAAAN,MAAA,WA4GQ,OAHiBqI,KAAKsqB,wBACPtqB,KAAKuqB,yBA1G5BtyB,IAAA,wBAAAN,MAAA,WAmHQ,IAAIgE,EAAS,GACbA,GAAUmC,GAAckC,KAAKknB,SAC7BvrB,GAAUmC,GAAckC,KAAKW,MAG7BhF,GAAUqE,KAAKof,MACfzjB,GAAUqE,KAAKoqB,SAASP,YACxBluB,GAAUqE,KAAKqqB,SAASR,YACxBluB,GAAUqE,KAAK8pB,MAAMD,YACrBluB,GAAUqE,KAAKwqB,QAAQX,YAGvBluB,GAAUmC,GAAckC,KAAKmqB,aAAavuB,QAE1C,IAAK,IAAIlF,EAAI,EAAGA,EAAIsJ,KAAKmqB,aAAavuB,OAAQlF,IAC1CiF,GAAUqE,KAAKmqB,aAAazzB,GAAGmzB,YAYnC,OAAOluB,KA9If1D,IAAA,sBAAAN,MAAA,WAqJQ,IAAIgE,EAAS,GAEbA,GAAUmC,GAAckC,KAAK4M,KAAKhR,QAElC,IAAK,IAAIlF,EAAI,EAAGA,EAAIsJ,KAAK4M,KAAKhR,OAAQlF,IAClCiF,GAAUqE,KAAK4M,KAAKlW,GAAGmzB,YAG3B,OAAOluB,KA7Jf1D,IAAA,iBAAAN,MAAA,WAoKQ,IAAMoH,EAAOiB,KAAKsqB,wBAEZG,EAAmBpoB,EAAA,IAAaC,IAAIC,MAAMxD,GAC1C2rB,EAAgBroB,EAAA,OAAgBooB,GAAkBpuB,WAGxD,OAFuBgG,EAAA,OAAgBA,EAAA,IAAaC,IAAIC,MAAMmoB,IAAgBruB,cAxKtFpE,IAAA,UAAAN,MAAA,WAkLQ,OAAOqI,KAAKiJ,sBAlLpBhR,IAAA,cAAAN,MAAA,SACuB2G,GACf,IAAMqsB,EAAK,IAAIT,EAGT7B,EAAK,IAAIvoB,GAAaxB,GAE5BqsB,EAAGzD,QAAUprB,SAASusB,EAAG9nB,KAAK,GAAI,IAClCoqB,EAAGhqB,KAAO7E,SAASusB,EAAG9nB,KAAK,GAAI,IAC/BoqB,EAAGvL,MAAQiJ,EAAG9nB,KAAK,GACnBoqB,EAAGP,SAAWJ,GAAQnN,YAAYwL,GAClCsC,EAAGN,SAAWL,GAAQnN,YAAYwL,GAClCsC,EAAGb,MAAQ,IAAI5V,GAAQmU,EAAG9nB,KAAK,KAC/B,IAAIiqB,OAAA,EAEJ,OAAQG,EAAGhqB,MACX,KAAK4nB,GAAOqC,OACRJ,EAAU,IAAIK,GACd,MACJ,KAAKtC,GAAOuC,OACRN,EAAU,IAAIO,GACd,MACJ,QACIP,EAAU,IAAIK,GAElBL,EAAQ3N,YAAYwL,GACpBsC,EAAGH,QAAUA,EACbG,EAAGR,gBACHQ,EAAG/d,QAGH,IADA,IAAMoe,EAAkB3C,EAAG/nB,cAClB5J,EAAI,EAAGA,EAAIs0B,EAAiBt0B,IAAK,CACtC,IAAMu0B,EAAc,IAAIrD,GACxBqD,EAAYpO,YAAYwL,GACxBsC,EAAGR,aAAatuB,KAAKovB,GAIzB,IADA,IAAMC,EAAY7C,EAAG/nB,cACZ0S,EAAI,EAAGA,EAAIkY,EAAWlY,IAC3B2X,EAAG/d,KAAK/Q,KAAK2sB,GAAY3L,YAAYwL,IAGzC,OAAOsC,MA1CfT,EAAA,GCrDA,IAAMiB,GAAN,SAAAC,GAAA,SAAAD,IAAA,mGAAAE,CAAArrB,KAAAmrB,oKAAAG,CAAAtrB,MAAAmrB,EAAAxiB,WAAAvR,OAAAwR,eAAAuiB,IAAAzuB,MAAAsD,KAAAhC,YAAA,gUAAAutB,CAAAJ,EAA8BlB,IAA9BkB,EAAA,GCmBO,IAAMK,IACTC,OAAQ,qBACRC,QAAS,QACTC,KAAM,GACNC,GAAI,QAaKC,GAAkB,SAAClB,EAAiB/U,EAAwBxN,GACrE,IAAMW,EAAYyf,GAAYxwB,OAAO2yB,EAAI/U,EAAYxN,GAErDuiB,EAAG/d,MAAQ7D,IAaF+iB,GAAA,eAAAhS,2RAAAiS,CAAA/R,mBAAAC,KAAuB,SAAAC,EAAOyQ,EAAiB/U,EAAwBxN,GAAhD,IAAAW,EAAA,OAAAiR,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAArW,MAAA,cAAAqW,EAAArW,KAAA,EACRykB,GAAYwD,YAAYrB,EAAI/U,EAAYxN,GADhC,OAC1BW,EAD0BqR,EAAAqP,KAGhCkB,EAAG/d,MAAQ7D,GAHqB,wBAAAqR,EAAA3a,SAAAya,aAAvB,gBAAAM,EAAAC,EAAAC,GAAA,OAAAZ,EAAApd,MAAAsD,KAAAhC,YAAA,GAgBAiuB,GAAU,SAACtB,EAAiB/U,EAAwBxN,GAC7D,IAAMW,EAAYyf,GAAYxwB,OAAO2yB,EAAI/U,EAAYxN,GAErDuiB,EAAG/d,KAAK/Q,KAAKkN,IAGXmjB,GAAW,SAACC,EAAmBC,GACjC,GAAID,IAASC,EACT,OAAO,EAIX,GAFAD,EAAK1f,KAAKpC,IACV+hB,EAAK3f,KAAKpC,IACN8hB,EAAKvwB,SAAWwwB,EAAKxwB,OACrB,OAAO,EAEX,IAAK,IAAIlF,EAAI,EAAGA,EAAIy1B,EAAKvwB,OAASlF,IAC9B,GAAIy1B,EAAKz1B,GAAGuB,MAAQm0B,EAAK11B,GAAGuB,IACxB,OAAO,EAGf,OAAO,GAeEo0B,GAAS,SAAC1B,EAAiB3B,EAAWD,EAC5BnT,EAAwB5N,GAE3C,GAAuB,IAAnB2iB,EAAG/d,KAAKhR,OACR+uB,EAAG/d,YACA,CACH,GAAI+d,EAAG/d,KAAKhR,OAASV,GAAmB8tB,EAAID,EAAQntB,QAAUotB,GAAK,GAAwB,IAAnBD,EAAQntB,OAC5E,MAAMjD,EAAWyK,eAGrB,IAAK,IAAI1M,EAAI,EAAGA,EAAIi0B,EAAG/d,KAAKhR,OAAQlF,IAChC,GAAIw1B,GAASvB,EAAG/d,KAAKlW,GAAGqyB,QAASA,GAAU,CACvC,GAAI4B,EAAG/d,KAAKlW,GAAGmyB,QAAQjtB,OAAS,EAAImtB,EAAQntB,OACxC,MAAM,IAAI+B,MAAM,oBAEpB,IAAM2uB,EAAW1W,EAAW2E,KAAKoQ,EAAI3iB,GAAQoE,eAE7C,YADAue,EAAG/d,KAAKlW,GAAGmyB,QAAQhtB,KAAKywB,IAKpC,IAAMnM,EAAM,IAAIqI,GAChBrI,EAAI6I,EAAIA,EACR7I,EAAI4I,QAAUA,EACd5I,EAAI0I,SAAWjT,EAAW2E,KAAKoQ,EAAI3iB,GAAQoE,gBAC3Cue,EAAG/d,KAAK/Q,KAAKskB,IAYX,SAAAoM,GACFC,EACAprB,EACAqrB,EACArC,EACAC,EACAP,GAEA,IAAI1c,EAAO,GACXA,GAAQhM,EACRgM,GAAQ8B,GAAclS,GAAWwvB,IACjCpf,GAAQ8B,GAAcud,EAAa5C,aACnCzc,GAAQ4B,GAAQ,GAChB5B,GAAQtP,GAActC,EAAOkxB,SAC7Btf,GAAQ8B,GAAclS,GAAW/B,IACjC,IAAMuvB,EAAU,IAAIK,GACpBL,EAAQpd,KAAOA,EAEf,IAAIud,OAAA,EAkBJ,OAhBIA,EADa,aAAb6B,GAAwC,iBAAbA,EACtB,IAAIrB,GAEJ,IAAIlB,IAGVtpB,KAAO4nB,GAAOqC,OACjBD,EAAGH,QAAUA,EACTH,IACAM,EAAGN,SAAW,IAAIL,GAAQK,IAE1BD,IACAO,EAAGP,SAAW,IAAIJ,GAAQI,IAE1BN,IACAa,EAAGb,MAAQA,GAERa,EAYJ,IAAMgC,GAAwB,SACjCH,EACAprB,EACAqrB,EACArC,EACAC,EACAP,GAEA,IAAMa,EAAK,IAAIV,GACfU,EAAGhqB,KAAO4nB,GAAOqC,OAEjB,IAAIlc,EAAO,GACX,GAAsB,iBAAXtN,EACPsN,EAAOtN,MACJ,CACH,IAAMwrB,EAAU,IAAIC,GAAYL,EAAU,GAAIprB,GAC9CsN,EAAO0C,GAAqBwb,GAGhC,IAAIxf,EAAOsB,EAAO5Q,GAActC,EAAOsxB,SACvC1f,GAAQqf,EAAa5C,YAErB,IAAMW,EAAU,IAAIK,GAapB,OAZAL,EAAQpd,KAAOA,EACfud,EAAGH,QAAUA,EAETH,IACAM,EAAGN,SAAW,IAAIL,GAAQK,IAE1BD,IACAO,EAAGP,SAAW,IAAIJ,GAAQI,IAE1BN,IACAa,EAAGb,MAAQA,GAERa,GAgBL,SAAAoC,GACF3f,GAKiG,IAJjGnW,EAIiG+G,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAJnF,GACdupB,EAGiGvpB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAH5E,MACrBmpB,EAEiGnpB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAFjF,GAChBopB,EACiGppB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GADlF,GACfgvB,EAAiGhvB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAnF,GAAIipB,IAA+EjpB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,KAAAA,UAAA,GAAnDosB,EAAmDpsB,UAAA,GAAjCqsB,EAAiCrsB,UAAA,GAAf8rB,EAAe9rB,UAAA,GAC3FivB,EAAK,IAAIlC,GACfkC,EAAG9F,OAASA,EAKZ8F,EAAG7f,KAAOA,EACV6f,EAAG/F,QAAUK,EACb0F,EAAG5F,YAAc2F,EACjBC,EAAG7F,MAAQA,EACX6F,EAAGh2B,KAAOA,EACVg2B,EAAGhG,YAAcA,EAEjB,IAAM0D,EAAK,IAAIV,GAmBf,OAlBAU,EAAGzD,QAAU,EAEbyD,EAAGH,QAAUyC,EAEbtC,EAAGhqB,KAAO4nB,GAAOuC,OAQjBH,EAAGN,SAAW,IAAIL,GAAQK,GAC1BM,EAAGP,SAAW,IAAIJ,GAAQI,GACtBN,IACAa,EAAGb,MAAQA,GAGRa,EAUL,SAAAuC,GAAuBvC,GAA2C,IAC9Dxf,EAD8DnN,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,IAC3CmvB,QAAS,QAC5BC,EAAazC,EAAGd,YAEtB,OAAO/nB,KAAKC,UAAU3K,OAAOi2B,UAAW7B,IAAkB8B,KAAMF,GAAcjiB,IAS5E,SAAAoiB,GAAwB5C,EAAiB6C,GAC3C,IAAM3e,EAAQ8b,EAAGd,YAOjB,OALI4D,QAAS,MACTD,OAAQA,GAAU,qBAClBpsB,QAASyN,GACTlF,GAAI,IAUN,SAAA+jB,GAA4B/C,GAE9B,OACIc,OAAS,qBACTC,QAAU,QACV4B,KAJU3C,EAAGd,aAaf,SAAA8D,GAA8BxsB,GAAqC,IAAxBysB,EAAwB5vB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAClC,MAA/BmD,EAAI0sB,OAAO1sB,EAAIvF,OAAS,KACxBuF,EAAMA,EAAIpF,UAAU,EAAGoF,EAAIvF,OAAS,IAGxC,IAAIkyB,EAAU3sB,EAAMnH,EAASE,UAK7B,OAJI0zB,IACAE,GAAW,cAGRA,iaC7UX,IAAMC,GAAQz3B,EAAQ,IAEhB03B,GAAN,oBAAAC,iGAAAC,CAAAluB,KAAAiuB,GA0IIjuB,KAAA,WAAoB,cACpBA,KAAAkJ,KAAe,SA3InB,OAAAilB,GAAAF,IAAAh2B,IAAA,SAAAN,MAAA,WAkJQ,OAAOmK,KAAKC,UAAU/B,KAAKouB,gBAlJnCn2B,IAAA,YAAAN,MAAA,WAwKQ,OAZM02B,IACFvZ,QAAW9U,KAAK8U,QAAQH,WACxBxP,MAASnF,KAAKmF,MACdmpB,KAAQtuB,KAAKsuB,MACVtuB,KAAK0W,aAAarO,iBACrBkmB,UAAWvuB,KAAK,WAChBkJ,KAAQlJ,KAAKkJ,KACb2N,KAAQ7W,KAAK6W,KACb2X,UAAaxuB,KAAKwuB,UAClBla,UAAatU,KAAKsU,UAClBma,gBAAmBzuB,KAAK0W,aAAand,UAAU+M,cAAcnB,WAtKzElN,IAAA,mBAAAN,MAAA,SA2KqB+2B,EAAkBttB,GAC/B,OAAOpB,KAAK0W,aAAaK,QAAQ2X,EAAU1uB,KAAK8U,QAAS9U,KAAK6W,KAAMzV,MA5K5EnJ,IAAA,kBAAAN,MAAA,SA+KoB+2B,EAAkB/D,EAAiBvpB,GAC/C,IAAM6a,EAAMjc,KAAK2uB,iBAAiBD,EAAUttB,GAE5C,OADAyqB,GAAgBlB,EAAI1O,EAAKA,EAAI1iB,UAAU+M,eAChCqkB,OAlLf1yB,IAAA,gBAAAN,MAAA,SAWQwN,EACAypB,EACAF,EACA5Z,EACA+Z,EACAztB,GAEA,IAAM0tB,EAAU,IAAIb,EACdpX,EAAOhY,OAAOC,KAAK+vB,EAAY,UAAUxyB,SAAS,OAClDuZ,EAAagZ,EAAoB7X,QAAQ2X,EAAU5Z,EAAS+B,EAAMzV,GAEnE+D,IACDA,EAAQnJ,GAAa2G,GAAoB,KAE7CmsB,EAAQ3pB,MAAQA,EAChB2pB,EAAQR,MAAO,EACfQ,EAAQN,WAAY,EACpBM,EAAQjY,KAAOgY,EAEfC,EAAQpY,aAAekY,EAEvB,IAAMta,EAAYsB,EAAWkF,eAK7B,OAJAgU,EAAQxa,UAAYA,EAAUrc,IAE9B62B,EAAQha,QAAUZ,GAAQQ,WAAWJ,GAE9Bwa,KArCf72B,IAAA,qBAAAN,MAAA,SAgDQwN,EACA0W,EACA6S,EACAttB,GAGA,GADAya,EAAWA,EAASkT,QACf/rB,EAAA,iBAAuB6Y,GACxB,MAAMljB,EAAWyK,eAErB,IAAM4Y,EAAOhZ,EAAA,kBAAwB6Y,GAE/BI,EADQ8R,GAAM7R,eAAerd,OAAOC,KAAKkd,EAAM,QACnCG,OAAOhhB,GACnBlD,EAAM4G,OAAOC,KAAKmd,EAAIrG,YAAYvZ,SAAS,OAC3CuZ,EAAa,IAAI0D,GAAWrhB,GAElC,OADgBg2B,EAAQj2B,OAAO4d,EAAY8Y,EAAUvpB,EAAO/D,MA9DpEnJ,IAAA,SAAAN,MAAA,SA6EQie,EACA8Y,EACAvpB,EACA/D,GAEA,IAAM0tB,EAAU,IAAIb,EACf9oB,IACDA,EAAQnJ,GAAa2G,GAAoB,KAE7CmsB,EAAQ3pB,MAAQA,EAChB2pB,EAAQR,MAAO,EACfQ,EAAQN,WAAY,EAEpB,IAAM3X,EAAOhU,GAAY,IACnByR,EAAYsB,EAAWkF,eACvBhG,EAAUZ,GAAQQ,WAAWJ,GAKnC,OAJAwa,EAAQxa,UAAYA,EAAUlI,eAC9B0iB,EAAQha,QAAUA,EAClBga,EAAQpY,aAAed,EAAWQ,QAAQsY,EAAU5Z,EAAS+B,EAAMzV,GACnE0tB,EAAQjY,KAAOhY,OAAOC,KAAK+X,EAAM,OAAOxa,SAAS,UAC1CyyB,KAjGf72B,IAAA,YAAAN,MAAA,SAoGqB+P,GACb,OAAOumB,EAAQe,aAAaltB,KAAKS,MAAMmF,OArG/CzP,IAAA,eAAAN,MAAA,SA+GwBs3B,GAChB,IAAMH,EAAU,IAAIb,EAgBpB,OAfAa,EAAQha,QAAU,IAAIZ,GAAQ+a,EAAIna,SAClCga,EAAQ3pB,MAAQ8pB,EAAI9pB,MACpB2pB,EAAQR,KAAOW,EAAIX,KACnBQ,EAAQN,UAAYS,EAAIT,UACxBM,EAAQxa,UAAY2a,EAAI3a,UACxBwa,EAAQ5lB,KAAO+lB,EAAI/lB,KACnB4lB,EAAQjY,KAAOoY,EAAIpY,KACnBiY,EAAQpY,aAAeiG,IACnBpjB,UAAW01B,EAAI11B,UACfC,WAAYy1B,EAAIz1B,WAChBvB,IAAKg3B,EAAIh3B,IACT2kB,SAAUqS,EAAIrS,WAGlBkS,EAAQI,MAAQD,EAAIC,MACbJ,MAhIfb,EAAA,GCTAkB,GAC2B,sBAD3BA,GAE0B,uBAF1BA,GAIyB,+BAJzBA,GAK2B,uBAL3BA,GAM8B,gCAN9BA,GAO4B,8BAP5BA,GAQ8B,mBAR9BA,GAS6B,oBAT7BA,GAU2C,wCAV3CA,GAWuC,kCAXvCA,GAYqC,+BAZrCA,GAasB,mBAbtBA,GAc0B,uBAd1BA,GAeuB,6RCOnB,SAAAC,EAAYjuB,gGAAakuB,CAAArvB,KAAAovB,GAPzBpvB,KAAAknB,QAAkB,SAKlBlnB,KAAAsvB,OAAiB,qBAGbtvB,KAAKmB,IAAMA,GAAO5G,EAAaG,SACO,MAAlCsF,KAAKmB,IAAInB,KAAKmB,IAAIvF,OAAS,KAC3BoE,KAAKmB,IAAMnB,KAAKmB,IAAIpF,UAAU,EAAGiE,KAAKmB,IAAIvF,OAAS,oDAQ9CwF,GACT,IAAIzF,EAAS,GACb,GAAoB,IAAhByF,EAAOlI,KACP,MAAO,GAHyB,IAAAuK,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAMpC,QAAA2F,EAAAC,EAAkBzC,EAAOyO,OAAzBpY,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAiC,KAAtBxL,EAAsB2L,EAAAjM,MACzBA,EAAQyJ,EAAO7J,IAAIU,GACnBN,IACAA,EAAQ43B,mBAAmB53B,IAE/BgE,GAAA,IAAc1D,EAAd,IAAqBN,GAXW,MAAAkK,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAcpC,MAAO,IAAMhI,EAAOkC,OAAO,oCAO3B,OAAOmC,KAAKmB,+CASGquB,GAA2D,IAA1C5B,EAA0C5vB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAAhByxB,EAAgBzxB,UAAA,GACpE6Q,EAAQ,IAAIe,IAEd6f,GACA5gB,EAAM8D,IAAI,SAAU8c,GAGpB7B,GACA/e,EAAM8D,IAAI,UAAW,KAGzB,IAAIxR,EAAMnB,KAAKmB,IAAMguB,GACrBhuB,GAAOnB,KAAK0vB,aAAa7gB,GAEzB,IAAM8gB,GACFlE,OAAUzrB,KAAKsvB,OACf5D,QAAU1rB,KAAKknB,QACfoG,KAAUkC,GAGd,OAAOnuB,EAAAC,EAAMC,KAAKJ,EAAKwuB,GAAMnuB,KAAK,SAACC,GAC/B,OAAOA,EAAI1C,iDAoBD6wB,GACd,IAAM/gB,EAAQ,IAAIe,IAElBf,EAAM8D,IAAI,MAAO,KACjB,IAAIxR,EAAMnB,KAAKmB,IAAMguB,GAAgCS,EAErD,OADAzuB,GAAOnB,KAAK0vB,aAAa7gB,GAClBxN,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,qDASG6wB,GAClB,IAAM/gB,EAAQ,IAAIe,IAClBf,EAAM8D,IAAI,MAAO,KACjB,IAAIxR,EAAMnB,KAAKmB,IAAMguB,GAAgCS,EAErD,OADAzuB,GAAOnB,KAAK0vB,aAAa7gB,GAClBxN,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,8CAmBf,IAAMoC,EAAMnB,KAAKmB,IAAMguB,GACvB,OAAO9tB,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,gDAQf,IAAMoC,EAAMnB,KAAKmB,IAAMguB,GACvB,OAAO9tB,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,wCAQVpH,GACL,IAAMyJ,EAAS,IAAIwO,IACnBxO,EAAOuR,IAAI,MAAO,KAElB,IAAIxR,EAAM,GAQV,MAPqB,iBAAVxJ,EACPwJ,EAAMnB,KAAKmB,IAAMguB,GAAoCx3B,EAC7B,iBAAVA,IACdwJ,EAAMnB,KAAKmB,IAAMguB,GAAkCx3B,GAEvDwJ,GAAOnB,KAAK0vB,aAAatuB,GAElBC,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,2CAQP8wB,GACR,IAAMzuB,EAAS,IAAIwO,IACnBxO,EAAOuR,IAAI,MAAO,KAElB,IAAIxR,EAAMnB,KAAKmB,IAAMguB,GAAmCU,EAIxD,OAHA1uB,GAAOnB,KAAK0vB,aAAatuB,GAGlBC,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,+CAQH8wB,GACZ,IAAMzuB,EAAS,IAAIwO,IACnBxO,EAAOuR,IAAI,MAAO,KAClB,IAAIxR,EAAMnB,KAAKmB,IAAMguB,GAAmCU,EAExD,OADA1uB,GAAOnB,KAAK0vB,aAAatuB,GAClBC,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,iDAUDpH,GACd,IAAIwJ,EAAM,GAMV,MALqB,iBAAVxJ,EACPwJ,EAAMnB,KAAKmB,IAAMguB,GAA6Cx3B,EACtC,iBAAVA,IACdwJ,EAAMnB,KAAKmB,IAAMguB,GAAiDx3B,GAE/D0J,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,sDAQImK,GACnB,IAAM/H,EAAMnB,KAAKmB,IAAMguB,GAA2CjmB,EAClE,OAAO7H,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,0CASR8wB,EAAkB53B,GACzB,IAAMkJ,EAAMnB,KAAKmB,IAAMguB,GAA4BU,EAAW,IAAM53B,EACpE,OAAOoJ,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,8CAQJmK,GACX,IAAM/H,EAAMnB,KAAKmB,IAAMguB,GAAgCjmB,EAKvD,OAFAxH,QAAQC,IAAI,QAAUR,GAEfE,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,0CASR+V,GACP,IAAM3T,EAAMnB,KAAKmB,IAAMguB,GAAoCra,EAAQH,WACnE,OAAOtT,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,4CAQNpH,GACT,IAAIwJ,EAAM,GAOV,MANqB,iBAAVxJ,EACPwJ,EAAMnB,KAAKmB,IAAMguB,GAAoCx3B,EAC7B,iBAAVA,IACdwJ,EAAMnB,KAAKmB,IAAMguB,GAAkCx3B,GAGhD0J,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,4CAUN+wB,EAAehxB,EAAeixB,GAEvC,GAAc,SADdD,EAAQA,EAAME,gBACmB,QAAVF,EACnB,MAAMn3B,EAAWyK,eAErB,IAAMjC,EAAMnB,KAAKmB,IAAMguB,GACXW,EAAME,cAAgB,IAAMlxB,EAAK6V,WAAa,IAAMob,EAAGpb,WACnE,OAAOtT,EAAAC,EAAM/J,IAAI4J,GAAKK,KAAK,SAACC,GACxB,OAAOA,EAAI1C,sQC1TvB,IAAMkxB,GAAN,WAKI,SAAAA,IAAA,IAAA1K,EAAAvlB,kGAAAkwB,CAAAlwB,KAAAiwB,GAWOjwB,KAAAmwB,QAAU,SAACx4B,GACd4tB,EAAK6K,SAASz4B,IAGXqI,KAAAqwB,OAAS,SAACC,GACb/K,EAAKgL,QAAQD,IAfbtwB,KAAKwwB,SAAW,IAAIC,QAAW,SAACN,EAASE,GACrC9K,EAAK6K,SAAWD,EAChB5K,EAAKgL,QAAUF,IAR3B,OAAAK,GAAAT,IAAAh4B,IAAA,UAAAV,IAAA,WAaQ,OAAOyI,KAAKwwB,aAbpBP,EAAA,GCaM,SAAAU,KAcF,OAPIlF,OAAQ,YACRC,QAAS,QACTkF,eALmC5yB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAMnC6yB,mBANmC7yB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAOnC8yB,kBAPmC9yB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAQnC+yB,sBARmC/yB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,IAarC,SAAAgzB,GAA6BxB,GAAyC,IACpE3gB,GACA4c,OAAQ,qBACRC,QAAS,QACT4B,KAAMkC,GAKV,OATwExxB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,KAOpE6Q,EAAQzX,OAAOi2B,OAAOxe,GAASse,QAAU,OAEtCte,EAGL,SAAAoiB,GAA4BrB,GAO9B,OALInE,OAAQ,iBACRC,QAAS,QACTwF,KAAMtB,EACNuB,IAAM,KAKR,SAAAC,GAAgCxB,GAOlC,OALInE,OAAQ,iBACRC,QAAS,QACTwF,KAAMtB,EACNuB,IAAK,KA6BP,SAAAE,GAAmB15B,GACrB,IAAIkX,KAgBJ,MAfqB,iBAAVlX,EACPkX,GACI4c,OAAQ,mBACRC,QAAS,QACT4F,OAAQ35B,EACRw5B,IAAK,KAEe,iBAAVx5B,IACdkX,GACI4c,OAAQ,iBACRC,QAAS,QACTwF,KAAMv5B,EACNw5B,IAAK,MAGNtiB,EAGL,SAAA0iB,GAAuB55B,GACzB,IAAIkX,KAcJ,MAbqB,iBAAVlX,EACPkX,GACI4c,OAAQ,mBACRC,QAAS,QACT4F,OAAQ35B,GAEY,iBAAVA,IACdkX,GACI4c,OAAQ,iBACRC,QAAS,QACTwF,KAAMv5B,IAGPkX,EAGL,SAAA2iB,GAAqB1c,GAMvB,OAJI2W,OAAQ,aACRC,QAAS,QACT+F,KAAM3c,EAAQH,YAKhB,SAAA+c,GAAwB5c,GAM1B,OAJI2W,OAAQ,gBACRC,QAAS,QACT+F,KAAM3c,EAAQH,YAKhB,SAAAgd,GAAsBzoB,GAOxB,OALIuiB,OAAQ,cACRC,QAAS,QACTwF,KAAMhoB,EACNioB,IAAK,KAKP,SAAAS,GAA0B1oB,GAO5B,OALIuiB,OAAQ,cACRC,QAAS,QACTwF,KAAMhoB,EACNioB,IAAK,KAKP,SAAAU,GAA4Bl6B,GAC9B,IAAIkX,KAcJ,MAbqB,iBAAVlX,EACPkX,GACI4c,OAAQ,4BACRC,QAAS,QACT4F,OAAQ35B,GAEY,iBAAVA,IACdkX,GACI4c,OAAQ,0BACRC,QAAS,QACTwF,KAAMv5B,IAGPkX,EAGL,SAAAijB,GAAiC5oB,GAMnC,OAJIuiB,OAAQ,yBACRC,QAAS,QACTwF,KAAMhoB,GAKR,SAAA6oB,GAAqBlC,EAAkB53B,GAOzC,OALIwzB,OAAQ,aACRC,QAAS,QACTwF,KAAMrB,EACNhoB,IAAM5P,GAKR,SAAA+5B,GAAyB9oB,GAM3B,OAJIuiB,OAAQ,iBACRC,QAAS,QACTwF,KAAMhoB,GAKR,SAAA+oB,GAAuBnC,EAAehxB,EAAeixB,GAQvD,OANItE,OAAQ,eACRC,QAAS,QACTwG,MAAOpC,EACPqC,KAAMrzB,EAAK6V,WACXyd,GAAIrC,EAAGpb,YAKT,SAAA0d,GAAuB16B,GAMzB,OAJI8zB,OAAQ,eACRC,QAAS,QACT4F,OAAQ35B,GAKV,SAAA26B,GAA8B36B,GAMhC,OAJI8zB,OAAQ,sBACRC,QAAS,QACT4F,OAAQ35B,GAaV,SAAA46B,GAAsBzd,GAMxB,OAJI2W,OAAQ,cACRC,QAAS,QACT+F,KAAM3c,EAAQH,YAahB,SAAA6d,GAA4B5C,GAM9B,OAJInE,OAAQ,oBACRC,QAAS,QACTwF,KAAMtB,obChQd,IAAM6C,GAAN,WASI,SAAAC,IAAwD,IAAAnN,EAAAvlB,KAA5CmB,EAA4CnD,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAtCzD,EAAaC,WAAYm4B,EAAa30B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,gGAAA40B,CAAA5yB,KAAA0yB,GACpD1yB,KAAK2yB,MAAQA,EACb3yB,KAAK6yB,IAAM,IAAIC,GAAoB3xB,GAC/B4xB,gBAAiB,SAACC,GAAD,OAAuB,IAAIC,GAAeD,IAC3DE,gBAAiB,SAACn0B,EAAW4K,GAAZ,OAAAwpB,IAA8BC,GAAIzpB,GAAO5K,IAC1Ds0B,iBAAkB,SAACt0B,GAAD,OAAeA,GAAQA,EAAKq0B,IAC9CE,YAAa,SAACv0B,GAAD,OAAe+C,KAAKC,UAAUhD,IAC3Cw0B,cAAe,SAACC,GAAD,OAAqB1xB,KAAKS,MAAMixB,MAGnDxzB,KAAK6yB,IAAIY,OAAOC,YAAY,WACpBnO,EAAKoN,OAELjxB,QAAQC,IAAI,eAIpB3B,KAAK6yB,IAAIc,QAAQD,YAAY,WACrBnO,EAAKoN,OAELjxB,QAAQC,IAAI,kBAIpB3B,KAAK6yB,IAAIe,OAAOF,YAAY,SAACF,GACrBjO,EAAKoN,OAELjxB,QAAQC,IAAI,SAAU6xB,KAI9BxzB,KAAK6yB,IAAIgB,UAAUH,YAAY,SAACF,GACxBjO,EAAKoN,OAELjxB,QAAQC,IAAI,aAAc6xB,KAIlCxzB,KAAK6yB,IAAIiB,QAAQJ,YAAY,SAAC7yB,GACtB0kB,EAAKoN,OAELjxB,QAAQC,IAAI,UAAWd,KAlDvC,OAAAkzB,GAAArB,EAAA,OAAAz6B,IAAA,gBAAAN,MAAA,WAEQ,OAAOsK,KAAKC,MAAsB,IAAhBD,KAAKc,cAF/BgxB,GAAArB,IAAAz6B,IAAA,OAAAN,MAAA,eAAAmiB,2RAAAka,CAAAha,mBAAAC,KAAA,SAAAC,EAuDiCrL,GAvDjC,IAAAolB,EAuD2CC,IAvD3Cl2B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,KAAAA,UAAA,UAAAgc,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAArW,MAAA,UAAAqW,EAAAC,KAAA,EAyDiBxL,EAzDjB,CAAAuL,EAAArW,KAAA,eAAAqW,EAAAE,OAAA,wBAAAF,EAAArW,KAAA,EA6DkB/D,KAAK6yB,IAAIsB,OA7D3B,cAAA/Z,EAAArW,KAAA,EA8DmC/D,KAAK6yB,IAAIuB,YAAYvlB,GAASwlB,UAAW3B,EAAgB4B,kBA9D5F,cA8DkBL,EA9DlB7Z,EAAAqP,KAAArP,EAAAE,OAAA,SAgEmB2Z,GAhEnB,UAAA7Z,EAAAC,KAAA,GAkEgB6Z,EAlEhB,CAAA9Z,EAAArW,KAAA,gBAAAqW,EAAArW,KAAA,GAmEsB/D,KAAK6yB,IAAIqB,QAnE/B,eAAA9Z,EAAAma,OAAA,4BAAAna,EAAA3a,SAAAya,EAAAla,OAAA,8BAAAw0B,GAAA,OAAA1a,EAAApd,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,cAAAN,MAAA,SAwEgB88B,GACRz0B,KAAK6yB,IAAI6B,kBAAkBhB,YAAYe,MAzE/Cx8B,IAAA,QAAAN,MAAA,WA6EQqI,KAAK6yB,IAAIqB,YA7EjBxB,EAAA,qhBCAA,IAAMiC,GAAN,WAOI,SAAAC,IAA0E,IAA9DzzB,EAA8DnD,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAxDzD,EAAaC,WAAYm4B,EAA+B30B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAAhB62B,IAAgB72B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,KAAAA,UAAA,gGAAA82B,CAAA90B,KAAA40B,GACtE50B,KAAK60B,UAAYA,EACjB70B,KAAK+0B,SAAW,IAAInlB,IACpB5P,KAAKg1B,OAAS,IAAIvC,GAAgBtxB,EAAKwxB,GACvC3yB,KAAKg1B,OAAOtB,YAAY1zB,KAAKi1B,eAAe/8B,KAAK8H,OAXzD,OAAAk1B,GAAAN,IAAA38B,IAAA,gBAAAN,MAAA,eAAAmiB,EAAAqb,GAAAnb,mBAAAC,KAAA,SAAAC,IAAA,IAAAkb,EAAA,OAAApb,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAArW,MAAA,cAkBcqxB,GFrBN3J,OAAS,YACTC,QAAU,UEElBtR,EAAAE,OAAA,SAmBeta,KAAKq1B,KAAKD,IAnBzB,wBAAAhb,EAAA3a,SAAAya,EAAAla,SAAA,yBAAA8Z,EAAApd,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,gBAAAN,MAAA,eAAA29B,EAAAH,GAAAnb,mBAAAC,KAAA,SAAAsb,IAAA,IAAAH,EA8BYI,EA9BZx3B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GA+BYy3B,EA/BZz3B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAgCY03B,EAhCZ13B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAiCY23B,EAjCZ33B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,UAAAgc,mBAAAG,KAAA,SAAAyb,GAAA,cAAAA,EAAAvb,KAAAub,EAAA7xB,MAAA,cAmCcqxB,EAAMzE,GACJ6E,EACAC,EACAC,EACAC,GAvChBC,EAAAtb,OAAA,SA0Ceta,KAAKq1B,KAAKD,IA1CzB,wBAAAQ,EAAAn2B,SAAA81B,EAAAv1B,SAAA,yBAAAs1B,EAAA54B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,qBAAAN,MAAA,eAAAk+B,EAAAV,GAAAnb,mBAAAC,KAAA,SAAA6b,EAmD6BtG,GAnD7B,IAAA4F,EAAAW,EAAAnG,EAAAoG,EAmD8CpI,EAnD9C5vB,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAmD+Di4B,EAnD/Dj4B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,UAAAgc,mBAAAG,KAAA,SAAA+b,GAAA,cAAAA,EAAA7b,KAAA6b,EAAAnyB,MAAA,cAoDcqxB,EAAMpE,GAA2BxB,EAAS5B,GApDxDsI,EAAAnyB,KAAA,EAqDiC/D,KAAKq1B,KAAKD,EAAKp1B,KAAK60B,YAAcoB,GArDnE,UAuDiC,KAFnBF,EArDdG,EAAAzM,MAuDuB9rB,MAvDvB,CAAAu4B,EAAAnyB,KAAA,cAyDYrC,QAAQC,IAAIo0B,GACN,IAAIp4B,MAAMmE,KAAKC,UAAUg0B,IA1D3C,WA6DYE,EA7DZ,CAAAC,EAAAnyB,KAAA,gBA8DkB6rB,EAAiBmG,EAAWI,OAE5BH,EAAW,IAAI/F,GACrBjwB,KAAK+0B,SAASpiB,IAAIid,EAAQoG,GAjEtCE,EAAA5b,OAAA,SAkEmB0b,EAASI,SAlE5B,eAAAF,EAAA5b,OAAA,SAoEmByb,GApEnB,yBAAAG,EAAAz2B,SAAAq2B,EAAA91B,SAAA,gBAAAq2B,GAAA,OAAAR,EAAAn5B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,oBAAAN,MAAA,eAAA2+B,EAAAnB,GAAAnb,mBAAAC,KAAA,SAAAsc,EA6E4B3G,GA7E5B,IAAAwF,EAAA,OAAApb,mBAAAG,KAAA,SAAAqc,GAAA,cAAAA,EAAAnc,KAAAmc,EAAAzyB,MAAA,cA8EcqxB,EAAMnE,GAA0BrB,GA9E9C4G,EAAAlc,OAAA,SA+Eeta,KAAKq1B,KAAKD,IA/EzB,wBAAAoB,EAAA/2B,SAAA82B,EAAAv2B,SAAA,gBAAAy2B,GAAA,OAAAH,EAAA55B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,wBAAAN,MAAA,eAAA++B,EAAAvB,GAAAnb,mBAAAC,KAAA,SAAA0c,EAuFgC/G,GAvFhC,IAAAwF,EAAA,OAAApb,mBAAAG,KAAA,SAAAyc,GAAA,cAAAA,EAAAvc,KAAAuc,EAAA7yB,MAAA,cAwFcqxB,EAAMhE,GAA8BxB,GAxFlDgH,EAAAtc,OAAA,SAyFeta,KAAKq1B,KAAKD,IAzFzB,wBAAAwB,EAAAn3B,SAAAk3B,EAAA32B,SAAA,gBAAA62B,GAAA,OAAAH,EAAAh6B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,eAAAN,MAAA,eAAAm/B,EAAA3B,GAAAnb,mBAAAC,KAAA,SAAA8c,IAAA,IAAA3B,EAAA,OAAApb,mBAAAG,KAAA,SAAA6c,GAAA,cAAAA,EAAA3c,KAAA2c,EAAAjzB,MAAA,cAyGcqxB,GF3CN3J,OAAQ,qBACRC,QAAS,SE/DjBsL,EAAA1c,OAAA,SA0Geta,KAAKq1B,KAAKD,IA1GzB,wBAAA4B,EAAAv3B,SAAAs3B,EAAA/2B,SAAA,yBAAA82B,EAAAp6B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,iBAAAN,MAAA,eAAAs/B,EAAA9B,GAAAnb,mBAAAC,KAAA,SAAAid,IAAA,IAAA9B,EAAA,OAAApb,mBAAAG,KAAA,SAAAgd,GAAA,cAAAA,EAAA9c,KAAA8c,EAAApzB,MAAA,cAiHcqxB,GF3CN3J,OAAQ,iBACRC,QAAS,SEvEjByL,EAAA7c,OAAA,SAkHeta,KAAKq1B,KAAKD,IAlHzB,wBAAA+B,EAAA13B,SAAAy3B,EAAAl3B,SAAA,yBAAAi3B,EAAAv6B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,WAAAN,MAAA,eAAAy/B,EAAAjC,GAAAnb,mBAAAC,KAAA,SAAAod,EA0HmB1/B,GA1HnB,IAAAy9B,EAAA,OAAApb,mBAAAG,KAAA,SAAAmd,GAAA,cAAAA,EAAAjd,KAAAid,EAAAvzB,MAAA,cA2HcqxB,EAAM/D,GAAiB15B,GA3HrC2/B,EAAAhd,OAAA,SA4Heta,KAAKq1B,KAAKD,IA5HzB,wBAAAkC,EAAA73B,SAAA43B,EAAAr3B,SAAA,gBAAAu3B,GAAA,OAAAH,EAAA16B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,eAAAN,MAAA,eAAA6/B,EAAArC,GAAAnb,mBAAAC,KAAA,SAAAwd,EAoIuB9/B,GApIvB,IAAAy9B,EAAA,OAAApb,mBAAAG,KAAA,SAAAud,GAAA,cAAAA,EAAArd,KAAAqd,EAAA3zB,MAAA,cAqIcqxB,EAAM7D,GAAqB55B,GArIzC+/B,EAAApd,OAAA,SAsIeta,KAAKq1B,KAAKD,IAtIzB,wBAAAsC,EAAAj4B,SAAAg4B,EAAAz3B,SAAA,gBAAA23B,GAAA,OAAAH,EAAA96B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,aAAAN,MAAA,eAAAigC,EAAAzC,GAAAnb,mBAAAC,KAAA,SAAA4d,EA8IqB/iB,GA9IrB,IAAAsgB,EAAA,OAAApb,mBAAAG,KAAA,SAAA2d,GAAA,cAAAA,EAAAzd,KAAAyd,EAAA/zB,MAAA,cA+IcqxB,EAAM5D,GAAmB1c,GA/IvCgjB,EAAAxd,OAAA,SAgJeta,KAAKq1B,KAAKD,IAhJzB,wBAAA0C,EAAAr4B,SAAAo4B,EAAA73B,SAAA,gBAAA+3B,GAAA,OAAAH,EAAAl7B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,gBAAAN,MAAA,eAAAqgC,EAAA7C,GAAAnb,mBAAAC,KAAA,SAAAge,EAwJwBnjB,GAxJxB,IAAAsgB,EAAA,OAAApb,mBAAAG,KAAA,SAAA+d,GAAA,cAAAA,EAAA7d,KAAA6d,EAAAn0B,MAAA,cAyJcqxB,EAAM1D,GAAsB5c,GAzJ1CojB,EAAA5d,OAAA,SA0Jeta,KAAKq1B,KAAKD,IA1JzB,wBAAA8C,EAAAz4B,SAAAw4B,EAAAj4B,SAAA,gBAAAm4B,GAAA,OAAAH,EAAAt7B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,cAAAN,MAAA,eAAAygC,EAAAjD,GAAAnb,mBAAAC,KAAA,SAAAoe,EAkKsBnvB,GAlKtB,IAAAksB,EAAA,OAAApb,mBAAAG,KAAA,SAAAme,GAAA,cAAAA,EAAAje,KAAAie,EAAAv0B,MAAA,cAmKcqxB,EAAMzD,GAAoBzoB,GAnKxCovB,EAAAhe,OAAA,SAoKeta,KAAKq1B,KAAKD,IApKzB,wBAAAkD,EAAA74B,SAAA44B,EAAAr4B,SAAA,gBAAAu4B,GAAA,OAAAH,EAAA17B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,kBAAAN,MAAA,eAAA6gC,EAAArD,GAAAnb,mBAAAC,KAAA,SAAAwe,EA4K0BvvB,GA5K1B,IAAAksB,EAAA,OAAApb,mBAAAG,KAAA,SAAAue,GAAA,cAAAA,EAAAre,KAAAqe,EAAA30B,MAAA,cA6KcqxB,EAAMxD,GAAwB1oB,GA7K5CwvB,EAAApe,OAAA,SA8Keta,KAAKq1B,KAAKD,IA9KzB,wBAAAsD,EAAAj5B,SAAAg5B,EAAAz4B,SAAA,gBAAA24B,GAAA,OAAAH,EAAA97B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,oBAAAN,MAAA,eAAAihC,EAAAzD,GAAAnb,mBAAAC,KAAA,SAAA4e,EAuL4BlhC,GAvL5B,IAAAy9B,EAAA,OAAApb,mBAAAG,KAAA,SAAA2e,GAAA,cAAAA,EAAAze,KAAAye,EAAA/0B,MAAA,cAwLcqxB,EAAMvD,GAA0Bl6B,GAxL9CmhC,EAAAxe,OAAA,SAyLeta,KAAKq1B,KAAKD,IAzLzB,wBAAA0D,EAAAr5B,SAAAo5B,EAAA74B,SAAA,gBAAA+4B,GAAA,OAAAH,EAAAl8B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,yBAAAN,MAAA,eAAAqhC,EAAA7D,GAAAnb,mBAAAC,KAAA,SAAAgf,EAgMiC/vB,GAhMjC,IAAAksB,EAAA,OAAApb,mBAAAG,KAAA,SAAA+e,GAAA,cAAAA,EAAA7e,KAAA6e,EAAAn1B,MAAA,cAiMcqxB,EAAMtD,GAA+B5oB,GAjMnDgwB,EAAA5e,OAAA,SAkMeta,KAAKq1B,KAAKD,IAlMzB,wBAAA8D,EAAAz5B,SAAAw5B,EAAAj5B,SAAA,gBAAAm5B,GAAA,OAAAH,EAAAt8B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,aAAAN,MAAA,eAAAyhC,EAAAjE,GAAAnb,mBAAAC,KAAA,SAAAof,EA0MqBxJ,EAAkB53B,GA1MvC,IAAAm9B,EAAA,OAAApb,mBAAAG,KAAA,SAAAmf,GAAA,cAAAA,EAAAjf,KAAAif,EAAAv1B,MAAA,cA2McqxB,EAAMrD,GAAmBlC,EAAU53B,GA3MjDqhC,EAAAhf,OAAA,SA4Meta,KAAKq1B,KAAKD,IA5MzB,wBAAAkE,EAAA75B,SAAA45B,EAAAr5B,SAAA,gBAAAu5B,EAAAC,GAAA,OAAAJ,EAAA18B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,iBAAAN,MAAA,eAAA8hC,EAAAtE,GAAAnb,mBAAAC,KAAA,SAAAyf,EAmNyBxwB,GAnNzB,IAAAksB,EAAA,OAAApb,mBAAAG,KAAA,SAAAwf,GAAA,cAAAA,EAAAtf,KAAAsf,EAAA51B,MAAA,cAoNcqxB,EAAMpD,GAAuB9oB,GApN3CywB,EAAArf,OAAA,SAqNeta,KAAKq1B,KAAKD,IArNzB,wBAAAuE,EAAAl6B,SAAAi6B,EAAA15B,SAAA,gBAAA45B,GAAA,OAAAH,EAAA/8B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,eAAAN,MAAA,eAAAkiC,EAAA1E,GAAAnb,mBAAAC,KAAA,SAAA6f,EA8NuBhK,EAAehxB,EAAeixB,GA9NrD,IAAAqF,EAAA,OAAApb,mBAAAG,KAAA,SAAA4f,GAAA,cAAAA,EAAA1f,KAAA0f,EAAAh2B,MAAA,cA+NcqxB,EAAMnD,GAAqBnC,EAAOhxB,EAAMixB,GA/NtDgK,EAAAzf,OAAA,SAgOeta,KAAKq1B,KAAKD,IAhOzB,wBAAA2E,EAAAt6B,SAAAq6B,EAAA95B,SAAA,gBAAAg6B,EAAAC,EAAAC,GAAA,OAAAL,EAAAn9B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,eAAAN,MAAA,eAAAwiC,EAAAhF,GAAAnb,mBAAAC,KAAA,SAAAmgB,EAuOuBC,GAvOvB,IAAAjF,EAAA,OAAApb,mBAAAG,KAAA,SAAAmgB,GAAA,cAAAA,EAAAjgB,KAAAigB,EAAAv2B,MAAA,cAwOcqxB,EAAM/C,GAAqBgI,GAxOzCC,EAAAhgB,OAAA,SAyOeta,KAAKq1B,KAAKD,IAzOzB,wBAAAkF,EAAA76B,SAAA26B,EAAAp6B,SAAA,gBAAAu6B,GAAA,OAAAJ,EAAAz9B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,sBAAAN,MAAA,eAAA6iC,EAAArF,GAAAnb,mBAAAC,KAAA,SAAAwgB,EAgP8BJ,GAhP9B,IAAAjF,EAAA,OAAApb,mBAAAG,KAAA,SAAAugB,GAAA,cAAAA,EAAArgB,KAAAqgB,EAAA32B,MAAA,cAiPcqxB,EAAM9C,GAA4B+H,GAjPhDK,EAAApgB,OAAA,SAkPeta,KAAKq1B,KAAKD,IAlPzB,wBAAAsF,EAAAj7B,SAAAg7B,EAAAz6B,SAAA,gBAAA26B,GAAA,OAAAH,EAAA99B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,cAAAN,MAAA,eAAAijC,EAAAzF,GAAAnb,mBAAAC,KAAA,SAAA4gB,IAAA,IAAAzF,EAAA,OAAApb,mBAAAG,KAAA,SAAA2gB,GAAA,cAAAA,EAAAzgB,KAAAygB,EAAA/2B,MAAA,cAyPcqxB,GFpBN3J,OAAQ,cACRC,QAAS,SEtOjBoP,EAAAxgB,OAAA,SA0Peta,KAAKq1B,KAAKD,IA1PzB,wBAAA0F,EAAAr7B,SAAAo7B,EAAA76B,SAAA,yBAAA46B,EAAAl+B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,cAAAN,MAAA,eAAAojC,EAAA5F,GAAAnb,mBAAAC,KAAA,SAAA+gB,EAiQsBlmB,GAjQtB,IAAAsgB,EAAA,OAAApb,mBAAAG,KAAA,SAAA8gB,GAAA,cAAAA,EAAA5gB,KAAA4gB,EAAAl3B,MAAA,cAkQcqxB,EAAM7C,GAAoBzd,GAlQxCmmB,EAAA3gB,OAAA,SAmQeta,KAAKq1B,KAAKD,IAnQzB,wBAAA6F,EAAAx7B,SAAAu7B,EAAAh7B,SAAA,gBAAAk7B,GAAA,OAAAH,EAAAr+B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,oBAAAN,MAAA,eAAAwjC,EAAAhG,GAAAnb,mBAAAC,KAAA,SAAAmhB,IAAA,IAAAhG,EAAA,OAAApb,mBAAAG,KAAA,SAAAkhB,GAAA,cAAAA,EAAAhhB,KAAAghB,EAAAt3B,MAAA,cA0QcqxB,GFpBN3J,OAAQ,oBACRC,QAAS,SEvPjB2P,EAAA/gB,OAAA,SA2Qeta,KAAKq1B,KAAKD,IA3QzB,wBAAAiG,EAAA57B,SAAA27B,EAAAp7B,SAAA,yBAAAm7B,EAAAz+B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,oBAAAN,MAAA,eAAA2jC,EAAAnG,GAAAnb,mBAAAC,KAAA,SAAAshB,EAiR4B3L,GAjR5B,IAAAwF,EAAA,OAAApb,mBAAAG,KAAA,SAAAqhB,GAAA,cAAAA,EAAAnhB,KAAAmhB,EAAAz3B,MAAA,cAkRcqxB,EAAM5C,GAA0B5C,GAlR9C4L,EAAAlhB,OAAA,SAmReta,KAAKq1B,KAAKD,IAnRzB,wBAAAoG,EAAA/7B,SAAA87B,EAAAv7B,SAAA,gBAAAy7B,GAAA,OAAAH,EAAA5+B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,aAAAN,MAAA,eAAA+jC,EAAAvG,GAAAnb,mBAAAC,KAAA,SAAA0hB,IAAA,IAAAvG,EAAA,OAAApb,mBAAAG,KAAA,SAAAyhB,GAAA,cAAAA,EAAAvhB,KAAAuhB,EAAA73B,MAAA,cA0RcqxB,GFnBN3J,OAAQ,aACRC,QAAS,SExQjBkQ,EAAAthB,OAAA,SA2Reta,KAAKq1B,KAAKD,IA3RzB,wBAAAwG,EAAAn8B,SAAAk8B,EAAA37B,SAAA,yBAAA07B,EAAAh/B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,eAAAN,MAAA,eAAAkkC,EAAA1G,GAAAnb,mBAAAC,KAAA,SAAA6hB,IAAA,IAAA1G,EAAA,OAAApb,mBAAAG,KAAA,SAAA4hB,GAAA,cAAAA,EAAA1hB,KAAA0hB,EAAAh4B,MAAA,cAkScqxB,GFnBN3J,OAAQ,eACRC,QAAS,SEhRjBqQ,EAAAzhB,OAAA,SAmSeta,KAAKq1B,KAAKD,IAnSzB,wBAAA2G,EAAAt8B,SAAAq8B,EAAA97B,SAAA,yBAAA67B,EAAAn/B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,oBAAAN,MAAA,SA4SsB88B,GACdz0B,KAAKg1B,OAAOtB,YAAY,SAAC/3B,GACC,WAAlBA,EAAO8vB,QACPgJ,EAAS94B,QA/SzB1D,IAAA,QAAAN,MAAA,WAwTQqI,KAAKg1B,OAAOd,WAxTpBj8B,IAAA,OAAAN,MAAA,eAAAqkC,EAAA7G,GAAAnb,mBAAAC,KAAA,SAAAgiB,EAgUyC7G,GAhUzC,IAgUiDlB,EAhUjDl2B,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAgUkEgC,KAAK60B,UAhUvE,OAAA7a,mBAAAG,KAAA,SAAA+hB,GAAA,cAAAA,EAAA7hB,KAAA6hB,EAAAn4B,MAAA,cAAAm4B,EAAA5hB,OAAA,SAiUeta,KAAKg1B,OAAOK,KAAKD,EAAKlB,IAjUrC,wBAAAgI,EAAAz8B,SAAAw8B,EAAAj8B,SAAA,gBAAAm8B,GAAA,OAAAH,EAAAt/B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,iBAAAN,MAAA,SAoU2BgE,GACnB,GAAsB,WAAlBA,EAAO8vB,OAAqB,CAC5B,IAAMmE,EAA6Bj0B,EAAOw6B,OAAOiG,OAEjD,QAAen+B,IAAX2xB,EAAsB,CACtB,IAAMwG,EAAUp2B,KAAK+0B,SAASx9B,IAAIq4B,QAElB3xB,IAAZm4B,GACAp2B,KAAK+0B,SAASsH,OAAOzM,GACrBwG,EAAQjG,QAAQx0B,IAGhB+F,QAAQ46B,KAAK,iDAGbt8B,KAAK60B,WACL70B,KAAKg1B,OAAOd,cApVhCU,EAAA,2QCLA,SAAA2H,iGAAAC,CAAAx8B,KAAAu8B,GAaIv8B,KAAAy8B,0DAGI,OAAOz8B,KAAKkJ,6CAIZ,OAAOlJ,KAAK08B,+CAGJzlC,GAAY,IAAAwM,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IACpB,QAAA2F,EAAAC,EAAgB7D,KAAKy8B,UAArBhlC,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAgC,KAArBlG,EAAqBqG,EAAAjM,MAC5B,GAAI4F,EAAEtG,OAASA,EAAM,CACjB,IAAMuC,EAAa+D,EAAE/D,WAAW4Y,IAAI,SAAC5Z,GAAD,OAAY,IAAI2V,GAAU3V,EAAEvB,KAAMuB,EAAEmI,KAAM,MAC9E,OAAO,IAAIksB,GAAYtvB,EAAEtG,KAAMsG,EAAEqpB,WAAYptB,KAJjC,MAAAqI,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAOpB,MAAMhG,MAAM,iDA7BC+J,GACb,IAAMpG,EAAI,IAAIi7B,EACRtN,EAAMntB,KAAKS,MAAMmF,GAKvB,OAJApG,EAAE4H,KAAO+lB,EAAI/lB,KACb5H,EAAEo7B,WAAazN,EAAIyN,WACnBp7B,EAAEm7B,UAAYxN,EAAIwN,UAEXn7B,WCLTq7B,GAAUC,GAAQC,UAAU/6B,KAAKC,WC1BnCmH,KAAM,2CACNwzB,WAAY,OACZD,YACIxlC,KAAM,OACNuC,aACIvC,KAAM,YACN0J,KAAM,WAEN1J,KAAM,OACN0J,KAAM,UAEVimB,WAAY,QAEZ3vB,KAAM,SACNuC,aACIvC,KAAM,UACN0J,KAAM,cAEN1J,KAAM,aACN0J,KAAM,cAEN1J,KAAM,UACN0J,KAAM,cAEVimB,WAAY,YAEZ3vB,KAAM,SACNuC,aACIvC,KAAM,UACN0J,KAAM,cAEN1J,KAAM,QACN0J,KAAM,cAEVimB,WAAY,YAEZ3vB,KAAM,YACNuC,aACIvC,KAAM,UACN0J,KAAM,cAEVimB,WAAY,cAEhBkW,SACI7lC,KAAM,WACNuC,aACIvC,KAAM,OACN0J,KAAM,cAEN1J,KAAM,OACN0J,KAAM,WAEVimB,WAAY,SAEZ3vB,KAAM,OACNuC,aACIvC,KAAM,OACN0J,KAAM,cAEN1J,KAAM,OACN0J,KAAM,WAEN1J,KAAM,OACN0J,KAAM,cAEVimB,WAAY,YDtCdmW,GAAeJ,GAAQK,UAAUC,QAAQ,KAAM,IAC/CC,GAAkB,IAAIhpB,GAAQ1V,GAAWu+B,KAazC,SAAAI,GAA8BC,EAAiBC,EAAgBC,EACjClT,EAAkBC,EAAkBP,GACpE,IAAMrD,EAAIkW,GAAQY,YAAY,UACF,QAAxBF,EAAOx/B,OAAO,EAAG,KACjBw/B,EAASrgC,GAAWqgC,IAEK,QAAzBC,EAAQz/B,OAAO,EAAG,KAClBy/B,EAAUtgC,GAAWqgC,IAEzB,IAAMG,EAAK,IAAIrvB,GAAUsY,EAAEjtB,WAAW,GAAGstB,UAAW7Y,GAAcyB,UAAW1S,GAAWogC,IAClFK,EAAK,IAAItvB,GAAUsY,EAAEjtB,WAAW,GAAGstB,UAAW7Y,GAAcyB,UAAW2tB,GACvEK,EAAK,IAAIvvB,GAAUsY,EAAEjtB,WAAW,GAAGstB,UAAW7Y,GAAcyB,UAAW4tB,GAEpE,IAAIrT,GAEb,OADK0C,GAAsBlG,EAAExvB,MAAOumC,EAAIC,EAAIC,GAAKR,GAAiB9S,EAAUC,EAAUP,GAapF,SAAA6T,GAA8BP,EAAiBQ,EACjBxT,EAAkBC,EAAkBP,GACpE,IAAMrD,EAAIkW,GAAQY,YAAY,UAExBM,EAAQpX,EAAEjtB,WAAW,GAAGstB,UACxBgX,EAAQ7vB,GAAcyB,UAEM,QAA9BkuB,EAAa//B,OAAO,EAAG,KACvB+/B,EAAe5gC,GAAW4gC,IAG9B,IAAMJ,EAAK,IAAIrvB,GAAU0vB,EAAOC,EAAO9gC,GAAWogC,IAC5CK,EAAK,IAAItvB,GAAUsY,EAAEjtB,WAAW,GAAGstB,UAAW7Y,GAAcyB,UAAWkuB,GAE7E,OAAOjR,GAAsBlG,EAAExvB,MAAOumC,EAAIC,GAAKP,GAAiB9S,EAAUC,EAAUP,GAQlF,SAAAiU,GAAiCX,GACnC,IAAM3W,EAAIkW,GAAQY,YAAY,aACxBC,EAAK,IAAIrvB,GAAUsY,EAAEjtB,WAAW,GAAGstB,UAAW7Y,GAAcyB,UAAW1S,GAAWogC,IAExF,OADWzQ,GAAsBlG,EAAExvB,MAAOumC,GAAKN,6VEvEnD,IAAMc,GAAN,oBAAAA,IAAAC,GAAAj+B,KAAAg+B,GAmBIh+B,KAAAyrB,OAAiB,SAnBrB,OAAAyS,GAAAF,EAAA,OAAA/lC,IAAA,cAAAN,MAAA,SAQuBgmB,GACf,IAAM9c,EAAQ,IAAIm9B,EAOlB,OALAn9B,EAAM4qB,OAAS9N,EAAE8N,OACjB5qB,EAAMlD,MAAQggB,EAAEhgB,MAChBkD,EAAMs9B,KAAOxgB,EAAEwgB,KACft9B,EAAMs1B,OAASiI,GAAOvhB,YAAYc,EAAEwY,QAE7Bt1B,MAhBfm9B,EAAA,GA4BMI,GAAN,oBAAAjI,IAAA8H,GAAAj+B,KAAAm2B,GAAA,OAAA+H,GAAA/H,EAAA,OAAAl+B,IAAA,cAAAN,MAAA,SAQuBH,GACf,IAAMmE,EAAS,IAAIw6B,EAYnB,OAVAx6B,EAAOygC,OAAS5kC,EAAE4kC,OAClBzgC,EAAO0iC,MAAQ7mC,EAAE6mC,MACjB1iC,EAAO2iC,YAAc9mC,EAAE8mC,YACvB3iC,EAAO4iC,OAAS/mC,EAAE+mC,OAAOnsB,IAAI,SAACja,GAC1B,OACIqmC,gBAAiBrmC,EAAEqmC,gBACnBC,OAAQtmC,EAAEsmC,OAAOrsB,IAAK,SAAC3Z,GAAD,MAAyB,iBAANA,EAAiBwE,GAAWxE,GAAKA,OAGlFkD,EAAO+vB,QAAUl0B,EAAEk0B,QACZ/vB,MArBfw6B,EAAA,YCFM,SAAAuI,GAAgCzP,GAClC,IAAItzB,EAAS,GAEb,GAAmB,iBAARszB,EACPtzB,GAAUuT,GAAc+f,QACrB,GAAmB,kBAARA,EACdtzB,GAAUiT,GAASqgB,QAChB,GAAmB,iBAARA,EACdtzB,GAAUqT,GAAQigB,QACf,GAAIA,aAAejqB,EAAA,UACtBrJ,GAAUwT,GAAW8f,QAClB,GAAIA,aAAe/a,GACtBvY,GAAUuT,GAAc+f,EAAIpF,kBACzB,GAAIoF,aAAe/b,GAAQ,KAAArG,GAAA,EAAAC,GAAA,EAAAC,OAAA9O,EAAA,IAC9B,QAAA+O,EAAAC,EAAgBgiB,EAAIzgB,KAApB/W,OAAAqM,cAAA+I,GAAAG,EAAAC,EAAAlJ,QAAAC,MAAA6I,GAAA,EAA0B,CACtBlR,GAAU+iC,GADY1xB,EAAArV,OAEtBgE,GAAUmC,GAActC,EAAOmV,iBAC/BhV,GAAUmC,GAActC,EAAOmjC,MAC/BhjC,GAAUmC,GAActC,EAAOojC,SALL,MAAA/8B,GAAAiL,GAAA,EAAAC,EAAAlL,EAAA,aAAAgL,GAAAI,EAAAhJ,QAAAgJ,EAAAhJ,SAAA,WAAA6I,EAAA,MAAAC,IAQlC,OAAOpR,EAGL,SAAAkjC,GAAgCrwB,GAElC,IADA,IAAI7S,EAAS,GACJjF,EAAI8X,EAAK5S,OAAS,EAAGlF,GAAK,EAAGA,IAAK,CACvC,IAAM+Y,EAAMjB,EAAK9X,GAEjB,GAAmB,iBAAR+Y,EACP9T,GAAUuT,GAAcO,QACrB,GAAmB,kBAARA,EACd9T,GAAUiT,GAASa,QAChB,GAAmB,iBAARA,EACd9T,GAAUqT,GAAQS,QACf,GAAIA,aAAezK,EAAA,UACtBrJ,GAAUwT,GAAWM,QAClB,GAAIA,aAAeyE,GACtBvY,GAAUuT,GAAcO,EAAIoa,kBACzB,GAAIpa,aAAeyD,GAAQ,CAC9BvX,GAAUqT,GAAQ,GAClBrT,GAAUmC,GAActC,EAAOsjC,WAC/BnjC,GAAUmC,GAActC,EAAO6U,YAHD,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAvS,EAAA,IAI9B,QAAAwS,EAAAC,EAAgBjB,EAAIjB,KAApB/W,OAAAqM,cAAAwM,GAAAG,EAAAC,EAAA3M,QAAAC,MAAAsM,GAAA,EAA0B,CACtB3U,GAAU+iC,GADYjuB,EAAA9Y,OAEtBgE,GAAUmC,GAActC,EAAOmV,iBAC/BhV,GAAUmC,GAActC,EAAOmjC,MAC/BhjC,GAAUmC,GAActC,EAAOojC,SARL,MAAA/8B,GAAA0O,GAAA,EAAAC,EAAA3O,EAAA,aAAAyO,GAAAI,EAAAzM,QAAAyM,EAAAzM,SAAA,WAAAsM,EAAA,MAAAC,GAU9B7U,GAAUmC,GAActC,EAAOsV,mBAC5B,GAAI9R,MAAM4lB,QAAQnV,IAAQsvB,GAAatvB,EAAKyD,IAAS,CACxDvX,GAAUqT,GAAQ,GAClBrT,GAAUmC,GAActC,EAAOsjC,WAC/BnjC,GAAUmC,GAActC,EAAO6U,YAHyB,IAAAkB,GAAA,EAAAC,GAAA,EAAAC,OAAAxT,EAAA,IAIxD,QAAAyT,EAAAC,EAAgBlC,EAAhBhY,OAAAqM,cAAAyN,GAAAG,EAAAC,EAAA5N,QAAAC,MAAAuN,GAAA,EAAqB,CACjB5V,GAAU+iC,GADOhtB,EAAA/Z,QAJmC,MAAAkK,GAAA2P,GAAA,EAAAC,EAAA5P,EAAA,aAAA0P,GAAAI,EAAA1N,QAAA0N,EAAA1N,SAAA,WAAAuN,EAAA,MAAAC,GAOxD9V,GAAUmC,GAActC,EAAOsV,cAC/BnV,GAAUqT,GAAQS,EAAI7T,QACtBD,GAAUmC,GAActC,EAAO0V,WACxBlS,MAAM4lB,QAAQnV,KACrB9T,GAAUkjC,GAAsBpvB,GAChC9T,GAAUqT,GAAQS,EAAI7T,QACtBD,GAAUmC,GAActC,EAAO0V,OAGvC,OAAOvV,EAGL,SAAAojC,GAAuB9iC,EAAY0E,GACrC,IAAIhF,GAAS,EADiCoW,GAAA,EAAAC,GAAA,EAAAC,OAAAhU,EAAA,IAE9C,QAAAiU,EAAAC,EAAgBlW,EAAhBxE,OAAAqM,cAAAiO,GAAAG,EAAAC,EAAApO,QAAAC,MAAA+N,GAAA,EAAqB,CACjB,KADiBG,EAAAva,iBACEgJ,GAAO,CACtBhF,GAAS,EACT,QALsC,MAAAkG,GAAAmQ,GAAA,EAAAC,EAAApQ,EAAA,aAAAkQ,GAAAI,EAAAlO,QAAAkO,EAAAlO,SAAA,WAAA+N,EAAA,MAAAC,GAQ9C,OAAOtW,EClGJ,IAAMqjC,GAAiB,2CAKxBC,IACFC,mBAAoB,qBACpBC,oBAAqB,sBACrBC,cAAe,gBACfC,gBAAiB,kBACjBC,cAAe,gBACfC,OAAQ,SACRC,OAAQ,SACRC,UAAW,YACXC,cAAe,gBACfC,YAAa,cACbC,eAAgB,iBAChBC,YAAa,eAcX,SAAAC,GACFvrB,EACAD,EACA8V,EACAC,EACAP,GAEA,IAAM0D,EAASyR,GAAaC,mBAED,QAAvB3qB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAEvB,IAAMwrB,EAAS,IAAI7sB,GAcnB,OAbA6sB,EAAO9hB,IAAI1J,EAAOD,EAAUlI,gBAIjBmgB,GACPiB,EAHWqR,IADDkB,IAMV,IAAI7rB,GAAQ8qB,IACZ5U,EACAC,EACAP,GAgBF,SAAAkW,GACFzrB,EACA0rB,EACA3rB,EACA8V,EACAC,EACAP,GAEA,IAAM0D,EAASyR,GAAaE,oBACD,QAAvB5qB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAYvB,IAAM2rB,EAAUD,EAAWrkC,OACrBmkC,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAI1J,EAAOD,EAAUlI,eAAgB8zB,GAlB7B,IAAAz8B,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAmBf,QAAA2F,EAAAC,EAAgBo8B,EAAhBxoC,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA4B,KAAjBnC,EAAiBsC,EAAAjM,MAClBM,EAAM+E,GAAWsE,EAAErJ,KACnB0I,EAAO3D,GAAWsE,EAAEX,MACpBhJ,EAAQqF,GAAWsE,EAAE3J,OAC3BooC,EAAO9hB,IAAIhmB,EAAK0I,EAAMhJ,IAvBX,MAAAkK,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAmCf,OATW4oB,GACPiB,EAFWqR,IAAuBkB,IAIlC,IAAI7rB,GAAQ8qB,IACZ5U,EACAC,EACAP,GAgBF,SAAAqW,GACF5rB,EACA0rB,EACA3rB,EACA8V,EACAC,EACAP,GAEA,IAAM0D,EAASyR,GAAaG,cAED,QAAvB7qB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAEvB,IAAMwrB,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAI1J,EAAO0rB,EAAWrkC,QARd,IAAAiR,GAAA,EAAAC,GAAA,EAAAC,OAAA9O,EAAA,IASf,QAAA+O,EAAAC,EAAgBgzB,EAAhBxoC,OAAAqM,cAAA+I,GAAAG,EAAAC,EAAAlJ,QAAAC,MAAA6I,GAAA,EAA4B,KAAjBvL,EAAiB0L,EAAArV,MAClBM,EAAM+E,GAAWsE,EAAErJ,KACnB0I,EAAO3D,GAAWsE,EAAEX,MACpBhJ,EAAQqF,GAAWsE,EAAE3J,OAC3BooC,EAAO9hB,IAAIhmB,EAAK0I,EAAMhJ,IAbX,MAAAkK,GAAAiL,GAAA,EAAAC,EAAAlL,EAAA,aAAAgL,GAAAI,EAAAhJ,QAAAgJ,EAAAhJ,SAAA,WAAA6I,EAAA,MAAAC,GA0Bf,OAXAgzB,EAAOvxB,KAAK3S,KAAKyY,EAAUlI,gBAGhBmgB,GACPiB,EAHWqR,IAAuBkB,IAKlC,IAAI7rB,GAAQ8qB,IACZ5U,EACAC,EACAP,GAgBF,SAAAsW,GACF7rB,EACAtc,EACAqc,EACA8V,EACAC,EACAP,GAEA,IAAM0D,EAASyR,GAAaI,gBAED,QAAvB9qB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAGvB,IAAMwrB,EAAS,IAAI7sB,GAWnB,OAVA6sB,EAAO9hB,IAAI1J,EAAOvX,GAAW/E,GAAMqc,EAAUlI,gBAElCmgB,GACPiB,EAFWqR,IAAuBkB,IAIlC,IAAI7rB,GAAQ8qB,IACZ5U,EACAC,EACAP,GAUF,SAAAuW,GAA+B9rB,GACjC,IAAMiZ,EAASyR,GAAaK,cAED,QAAvB/qB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAGvB,IAAMwrB,EAAS,IAAI7sB,GAKnB,OAJA6sB,EAAO9hB,IAAI1J,GAGAgY,GAAqBiB,EAFjBqR,IAAuBkB,IAEU,IAAI7rB,GAAQ8qB,KAS1D,SAAAsB,GAAwB/rB,GAC1B,IAAMiZ,EAASyR,GAAaM,OACD,QAAvBhrB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAGvB,IAAMwrB,EAAS,IAAI7sB,GAInB,OAHA6sB,EAAO9hB,IAAI1J,GAEAgY,GAAqBiB,EADjBqR,IAAuBkB,IACU,IAAI7rB,GAAQ8qB,KAa1D,SAAAuB,GACFhsB,EACAisB,EACAC,EACArW,EACAC,EACAP,GAEA,IAAM0D,EAASyR,GAAaO,OAED,QAAvBjrB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAGvB,IAAMipB,EAAKjpB,EACLkpB,EAAK+C,EAAMp0B,eACbsxB,OAAA,EACA+C,aAAmBn4B,GACnBo1B,EAAK+C,EAAQr0B,eACNq0B,aAAmBvsB,KAC1BwpB,EAAK+C,EAAQ5W,aAEjB,IAAMkW,EAAS,IAAI7sB,GAYnB,OAXA6sB,EAAO9hB,IAAIuf,EAAIC,EAAIC,GAERnR,GACPiB,EAFWqR,IAAuBkB,IAIlC,IAAI7rB,GAAQ8qB,IACZ5U,EACAC,EACAP,GAgBF,SAAA4W,GACFnsB,EACAosB,EACA3L,EACA5K,EACAC,EACAP,GAEA,IAAM0D,EAASyR,GAAaQ,UAED,QAAvBlrB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAGvB,IAAMipB,EAAKjpB,EACLkpB,EAAKkD,EAAUv0B,eACjBsxB,OAAA,EACA1I,aAAkB1sB,GAClBo1B,EAAK1I,EAAO5oB,eACL4oB,aAAkB9gB,KACzBwpB,EAAK1I,EAAOnL,aAEhB,IAAMkW,EAAS,IAAI7sB,GAYnB,OAXA6sB,EAAO9hB,IAAIuf,EAAIC,EAAIC,GAGRnR,GACPiB,EAHWqR,IAAuBkB,IAKlC,IAAI7rB,GAAQ8qB,IACZ5U,EACAC,EACAP,GAUF,SAAA8W,GAA+BrsB,GACjC,IAAMiZ,EAASyR,GAAaS,cAED,QAAvBnrB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAEvB,IAAMwrB,EAAS,IAAI7sB,GAKnB,OAJA6sB,EAAO9hB,IAAI1J,GAGAgY,GAAqBiB,EAFjBqR,IAAuBkB,IAEU,IAAI7rB,GAAQ8qB,KAc1D,SAAA6B,GACFtsB,EACAusB,EACAxsB,EACA8V,EACAC,EACAP,GAEA,IAAM0D,EAASyR,GAAaU,YAED,QAAvBprB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAGvB,IAAMipB,EAAKjpB,EACLkpB,EAAKqD,EACLpD,EAAKppB,EAAUlI,eACf2zB,EAAS,IAAI7sB,GAInB,OAHA6sB,EAAO9hB,IAAIuf,EAAIC,EAAIC,GAERnR,GAAqBiB,EADjBqR,IAAuBkB,IACU,IAAI7rB,GAAQ8qB,IAAiB5U,EAAUC,EAAUP,GAgB/F,SAAAiX,GACFxsB,EACAysB,EACAC,EACA7W,EACAC,EACAP,GAEA,IAAM0D,EAASyR,GAAaW,eAED,QAAvBrrB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAGvB,IAAMipB,EAAKjpB,EACLkpB,EAAKuD,EACLtD,EAAKuD,EACLlB,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAIuf,EAAIC,EAAIC,GACnB,IAEM/S,EAAK4B,GAAqBiB,EAFjBqR,IAAuBkB,IAEU,IAAI7rB,GAAQ8qB,IAC5D5U,EAAUC,GAEV,OADAM,EAAGb,MAAQA,GAASmX,EACbtW,EASL,SAAAuW,GAAmC3sB,EAAe4sB,GACpD,IAAM3T,EAASyR,GAAaY,YAED,QAAvBtrB,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAIvB7S,QAAQC,IAAI,QAAU4S,GAEtB,IAAMpU,EAAQrC,GAAcqjC,EAAM,GAAG,GAGrCz/B,QAAQC,IAAI,UAAYxB,GAExB,IAAM4/B,EAAS,IAAI7sB,GAKnB,OAJA6sB,EAAO9hB,IAAI1J,EAAO4sB,GAGP5U,GAAqBiB,EAFjBqR,IAAuBkB,IAEU,IAAI7rB,GAAQ8qB,8VCjchE,IAAMoC,GAAN,oBAAAC,IAAAC,GAAAthC,KAAAqhC,GAAA,OAAAE,GAAAF,EAAA,OAAAppC,IAAA,cAAAN,MAAA,SAKuBiU,GAIf,IAHA,IAAM9B,EAAK,IAAIhK,GAAa8L,GAEtBjQ,MACEmO,EAAG5J,WAAW,CAClB,IAAMC,EAAQ2J,EAAGwD,aACXvO,EAAO+K,EAAG6D,gBACVnV,EAAI,IAAI6oC,EACd7oC,EAAEmR,GAAKxJ,EACP3H,EAAE2T,GAAK7D,GAAUsF,eAAe,IAAI9N,GAAaf,IACjDpD,EAAOE,KAAKrD,GAEhB,OAAOmD,MAjBf0lC,EAAA,GAiCMG,GAAN,oBAAAC,IAAAH,GAAAthC,KAAAyhC,GAAA,OAAAF,GAAAE,IAAAxpC,IAAA,YAAAN,MAAA,WAoCQ,IAAIgE,EAAS,GAIb,OAHAA,GAAU0B,GAAa2C,KAAK/H,KAC5B0D,GAAU0B,GAAa2C,KAAKW,MAC5BhF,GAAU0B,GAAa2C,KAAKrI,YAvCpCM,IAAA,cAAAN,MAAA,SACuBiU,GAIf,IAHA,IAAM9B,EAAK,IAAIhK,GAAa8L,GAEtBjQ,MACEmO,EAAG5J,WAAW,CAClB,IAAMjI,EAAMgF,GAAW6M,EAAG6D,iBACpBhN,EAAO1D,GAAW6M,EAAG6D,iBACrBhW,EAAQsF,GAAW6M,EAAG6D,iBACtB3W,EAAI,IAAIyqC,EACdzqC,EAAEiB,IAAMA,EACRjB,EAAE2J,KAAOA,EACT3J,EAAEW,MAAQA,EACVgE,EAAOE,KAAK7E,GAGhB,OAAO2E,MAhBf8lC,EAAA,GA+CMC,GAAN,oBAAAC,IAAAL,GAAAthC,KAAA2hC,GA8BI3hC,KAAAyU,cAIAzU,KAAAigC,cAIAjgC,KAAA8gC,SAAmB,GAtCvB,OAAAS,GAAAI,EAAA,OAAA1pC,IAAA,cAAAN,MAAA,SAKuBiU,GACf,IAAMyc,EAAK,IAAIvoB,GAAa8L,GAEtBg2B,EAAM,IAAID,EACVE,EAAQxZ,EAAG/nB,cAEbuhC,EAAQ,IACRD,EAAIntB,WAAa2sB,GAAgBvkB,YAAYwL,EAAG9nB,KAAKshC,KAGzD,IAAM3B,EAAU7X,EAAG/nB,cACf4/B,EAAU,IACV0B,EAAI3B,WAAauB,GAAa3kB,YAAYwL,EAAG9nB,KAAK2/B,KAGtD,IAAM4B,EAAczZ,EAAG/nB,cAIvB,OAHIwhC,EAAc,IACdF,EAAId,SAAWzY,EAAG9nB,KAAKuhC,IAEpBF,MAxBfD,EAAA,0rBCpCA,IAAMI,GAAN,WA0EI,SAAAC,EAAYC,EAAoBl5B,gGAAgCm5B,CAAAliC,KAAAgiC,GAC5DhiC,KAAKiiC,SAAWA,EAChBjiC,KAAK+I,UAAYA,OAEe9K,IAA5B+B,KAAKiiC,SAASE,YACdniC,KAAKiiC,SAASE,UAAYC,MA/EtC,OAAAC,GAAAL,EAAA,OAAA/pC,IAAA,sBAAAN,MAAA,SAW4D2qC,EAAaC,GACjE,IAAMC,EAAQF,EAAIvmB,MAAM,IAAK,GAE7B,GAAIymB,EAAM5mC,OAAS,EACf,MAAM,IAAI+B,MAAM,oBAGpB,IAAM8kC,EAAST,EAAQU,kBAAkBF,EAAM,IACzChY,EAAUwX,EAAQW,mBAAmBH,EAAM,IAC7Cz5B,OAAA,EAEJ,GAAIy5B,EAAM5mC,OAAS,EAAG,CAClB,QAAyBqC,IAArBwkC,EAAOlpC,gBAAkD0E,IAAvBwkC,EAAOhqB,YAGzC,MAAM,IAAI9a,MAAM,uCAFhBoL,EAAYwP,GAAUqqB,eAAeJ,EAAM,GAAIC,EAAOlpC,UAAWkpC,EAAOhqB,aAMhF,IAAM1Q,EAAMw6B,EAAQ/X,EAAQyX,SAAUl5B,GAEtC,OADAhB,EAAI86B,gBAAgBrY,EAAQsY,MACrB/6B,KAhCf9P,IAAA,qBAAAN,MAAA,SAwCsCihB,GAC9B,IAAMmqB,EAAclqB,GAAA,OAAWD,GADcoqB,EAEAlhC,KAAKS,MAAMwgC,GAExD,OACId,UACIE,UANqCa,EAErCC,IAKA5F,OAPqC2F,EAEhCE,IAML5F,QARqC0F,EAE3B9gB,IAOVihB,SATqCH,EAEtBI,IAQfC,SAVqCL,EAEjBM,KAUxBR,4HAZyCS,CAAAP,GAAA,oCAxCrD/qC,IAAA,oBAAAN,MAAA,SA6DqCihB,GAC7B,IAAMmqB,EAAclqB,GAAA,OAAWD,GACzB6pB,EAAS3gC,KAAKS,MAAMwgC,GAE1B,OACIxpC,eAA0B0E,IAAfwkC,EAAOe,IAAoBt+B,GAAgBu+B,aAAahB,EAAOe,UAAOvlC,EACjFwa,YAAagqB,EAAOiB,SAnEhCrB,GAAAL,IAAA/pC,IAAA,OAAAN,MAAA,eAAAmiB,EAAA6pB,GAAA3pB,mBAAAC,KAAA,SAAAC,EA8FQ/Y,EACAsX,EACA7C,EACArc,GAjGR,IAAAwO,EAAA,OAAAiS,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAArW,MAAA,cAAAqW,EAAArW,KAAA,EAmGc6/B,GAAkBnrB,EAAatX,GAnG7C,mBAqG0BlD,IAAd1E,IACAA,EAAYqc,EAAWrc,UAAU+M,eAG/ByB,EAAM/H,KAAK6jC,kBAAkBtqC,EAAWkf,GAzGtD2B,EAAArW,KAAA,EA0G+B6R,EAAW2T,UAAUxhB,EAAKxO,EAAWkf,GA1GpE,OA0GQzY,KAAK+I,UA1GbqR,EAAAqP,KAAA,wBAAArP,EAAA3a,SAAAya,EAAAla,SAAA,gBAAAwa,EAAAC,EAAAC,EAAA8Z,GAAA,OAAA1a,EAAApd,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,SAAAN,MAAA,eAAA29B,EAAAqO,GAAA3pB,mBAAAC,KAAA,SAAAsb,EAmHiBp0B,GAnHjB,IAAA4H,EAAAuL,EAAAvM,EAAA,OAAAiS,mBAAAG,KAAA,SAAAyb,GAAA,cAAAA,EAAAvb,KAAAub,EAAA7xB,MAAA,eAsH0B9F,KAFZ8K,EAAY/I,KAAK+I,iBAEkC9K,IAA1B8K,EAAU0P,YAtHjD,CAAAmd,EAAA7xB,KAAA,YAAA6xB,EAAAvb,KAAA,EAwHqBra,KAAK8jC,qBAxH1B,CAAAlO,EAAA7xB,KAAA,eAAA6xB,EAAAtb,OAAA,UAyH2B,GAzH3B,UA4HqBta,KAAK+jC,mBA5H1B,CAAAnO,EAAA7xB,KAAA,eAAA6xB,EAAAtb,OAAA,UA6H2B,GA7H3B,cAAAsb,EAAA7xB,KAAA,EAgIoCigC,GAAuBj7B,EAAU0P,YAAatX,GAhIlF,UAAAy0B,EAAAnM,OAiI8Bvf,GAAgB4D,QAjI9C,CAAA8nB,EAAA7xB,KAAA,gBAAA6xB,EAAAtb,OAAA,UAkI2B,GAlI3B,eAAAsb,EAAA7xB,KAAA,GAqIwC6/B,GAAkB76B,EAAU0P,YAAatX,GArIjF,eAqIsBmT,EArItBshB,EAAAnM,KAuIsB1hB,EAAM/H,KAAK6jC,kBAAkB96B,EAAUxP,UAAWwP,EAAU0P,aAvIlFmd,EAAAtb,OAAA,SAwIuBhG,EAAU7K,OAAO1B,EAAKgB,IAxI7C,eAAA6sB,EAAAvb,KAAA,GAAAub,EAAApM,GAAAoM,EAAA,SAAAA,EAAAtb,OAAA,UA0IuB,GA1IvB,QAAAsb,EAAA7xB,KAAA,wBAAA6xB,EAAAtb,OAAA,UA6ImB,GA7InB,yBAAAsb,EAAAn2B,SAAA81B,EAAAv1B,OAAA,2BAAAikC,GAAA,OAAA3O,EAAA54B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,oBAAAN,MAAA,SAyJsB4B,EAA6Bkf,GAI3C,OAHsBzY,KAAKkkC,gBAAgB3qC,EAAWkf,GAG/B,IAFAzY,KAAKmkC,sBA3JpClsC,IAAA,YAAAN,MAAA,WAqKQ,IAAMoR,EAAY/I,KAAK+I,UAEvB,QAAkB9K,IAAd8K,EAAyB,CACzB,IAAMq7B,EAAmBr7B,EAAUs7B,eACnC,OAAOrkC,KAAK6jC,kBAAkB96B,EAAUxP,UAAWwP,EAAU0P,aAAe,IAAM2rB,EAElF,OAAOpkC,KAAK6jC,uBA3KxB5rC,IAAA,kBAAAN,MAAA,SAsLQ4B,EACAkf,GAEA,IAAIgqB,OAAA,EAEAA,OADcxkC,IAAd1E,GAEIiqC,IAAKjqC,EAAU6L,SACfk/B,IAAK,MACLZ,IAAKjrB,IAIL6rB,IAAK,OAIb,IAAMvB,EAAcjhC,KAAKC,UAAU0gC,GACnC,OAAO5pB,GAAA,OAAWkqB,EAAa,YAvMvC9qC,IAAA,mBAAAN,MAAA,WA0NQ,YAA+BsG,IAA3B+B,KAAKiiC,SAASoB,UACPrhC,KAAQhC,KAAKiiC,SAASoB,YA3NzCprC,IAAA,qBAAAN,MAAA,WAqOQ,IAAMoR,EAAY/I,KAAK+I,UAEvB,YAAkB9K,IAAd8K,QAAqD9K,IAA1B8K,EAAU0P,aACvB8rB,GAAax7B,EAAU0P,eAEpBzY,KAAKiiC,SAAS5E,UA1O3CplC,IAAA,mBAAAN,MAAA,WAoPQ,IAAMsqC,GACFgB,IAAKjjC,KAAKiiC,SAASE,UACnBe,IAAKljC,KAAKiiC,SAAS5E,OACnBnb,IAAKliB,KAAKiiC,SAAS3E,QACnB8F,IAAKpjC,KAAKiiC,SAASkB,SACnBG,IAAKtjC,KAAKiiC,SAASoB,UAEjBP,EAAO9iC,KAAKwkC,gBAEZzB,EAAcjhC,KAAKC,UAAL0iC,MAAmBxC,EAAaa,IACpD,OAAOjqB,GAAA,OAAWkqB,EAAa,aA9PvCf,EAAA,GAwQA4B,GAAA,eAAA/N,EAAA8N,GAAA3pB,mBAAAC,KAAO,SAAA6b,EAAiCrd,EAAqBtX,GAAtD,IAAAujC,EAAAxrB,EAAAyrB,EAAAha,EAAAsJ,EAAA2N,EAAAttB,EAAA,OAAA0F,mBAAAG,KAAA,SAAA+b,GAAA,cAAAA,EAAA7b,KAAA6b,EAAAnyB,MAAA,cACG2gC,EAAQH,GAAa9rB,GACrBS,EAAQ0rB,GAAansB,GAErBksB,EAAS,IAAIE,GAAW1jC,GACxBwpB,EAAK2V,GAAcoE,GALtBxO,EAAAnyB,KAAA,EAMoB4gC,EAAOG,mBAAmBna,EAAGd,aAAa,GAN9D,YAMGoK,EANHiC,EAAAzM,MAQU0M,SAAUlC,EAASkC,OAAOA,OARpC,CAAAD,EAAAnyB,KAAA,YASO69B,EAAMF,GAAI7kB,YAAYoX,EAASkC,OAAOA,aAI1Bl4B,KAFZqW,EAAYstB,EAAIntB,WAAWhP,KAAK,SAAC0G,GAAD,OAAQA,EAAGxC,KAAOuP,KAXzD,CAAAgd,EAAAnyB,KAAA,eAcW,IAAIpG,MAAM,aAdrB,eAAAu4B,EAAA5b,OAAA,SAiBQhG,EAAUnI,IAjBlB,cAmBO,IAAIxO,MAAM,aAnBjB,yBAAAu4B,EAAAz2B,SAAAq2B,EAAA91B,SAAP,gBAAA+kC,EAAAC,GAAA,OAAAnP,EAAAn5B,MAAAsD,KAAAhC,YAAA,GA6BAgmC,GAAA,eAAA1N,EAAAqN,GAAA3pB,mBAAAC,KAAO,SAAAsc,EAAsC9d,EAAqBtX,GAA3D,IAAAujC,EAAAxrB,EAAAyrB,EAAAha,EAAAsJ,EAAA,OAAAja,mBAAAG,KAAA,SAAAqc,GAAA,cAAAA,EAAAnc,KAAAmc,EAAAzyB,MAAA,cACG2gC,EAAQH,GAAa9rB,GACrBS,EAAQ0rB,GAAansB,GAErBksB,EAAS,IAAIE,GAAW1jC,GACxBwpB,EAAKuW,GAAyBwD,EAAOxrB,GALxCsd,EAAAzyB,KAAA,EAMoB4gC,EAAOG,mBAAmBna,EAAGd,aAAa,GAN9D,YAMGoK,EANHuC,EAAA/M,MAQU0M,SAAUlC,EAASkC,OAAOA,OARpC,CAAAK,EAAAzyB,KAAA,gBAAAyyB,EAAAlc,OAAA,SASQpQ,GAAgB+6B,aAAahR,EAASkC,OAAOA,SATrD,cAWO,IAAIx4B,MAAM,aAXjB,yBAAA64B,EAAA/2B,SAAA82B,EAAAv2B,SAAP,gBAAAklC,EAAAC,GAAA,OAAA7O,EAAA55B,MAAAsD,KAAAhC,YAAA,GAoBM,SAAAumC,GAAuB9rB,GACzB,IAAMtY,EAAQsY,EAAYrY,QAAQ,UAElC,IAAe,IAAXD,EACA,MAAM,IAAIxC,MAAM,wBAGpB,OAAO8a,EAAY5a,OAAO,EAAGsC,GAQ3B,SAAAykC,GAAuBnsB,GACzB,IAAMtY,EAAQsY,EAAYrY,QAAQ,UAElC,IAAe,IAAXD,EACA,MAAM,IAAIxC,MAAM,wBAMpB,OAAOS,OAAOqa,EAAY5a,OAAOsC,EAAQ,SAASvE,aCnX1CwpC,k3BAAZ,SAAYA,GACRA,EAAA,gCACAA,EAAA,gCAFJ,CAAYA,aA8BZ,IA6OYC,GA7ONC,GAAN,SAAAC,GAaI,SAAAC,EAAYvD,EAAoBl5B,EAAmC08B,GAAkBC,GAAA1lC,KAAAwlC,GAAA,IAAAjgB,mKAAAogB,CAAA3lC,MAAAwlC,EAAA78B,WAAAvR,OAAAwR,eAAA48B,IAAA3uC,KAAAmJ,KAC3EiiC,EAAUl5B,IADiE,OAEjFwc,EAAKkgB,UAAwB,IAAbA,EAFiElgB,EAbzF,gUAAAqgB,CAAAJ,EAA2BzD,IAA3B8D,GAAAL,EAAA,OAAAvtC,IAAA,cAAAN,MAAA,SACuB2qC,GACf,OAAAwD,GAAAN,EAAA78B,WAAAvR,OAAAwR,eAAA48B,GAAA,sBAAAxlC,MAAAnJ,KAAAmJ,KAAiCsiC,EAAK,SAACxrC,EAAQ2B,GAAT,OAAoB,IAAI+sC,EAAM1uC,EAAG2B,SAF/EotC,GAAAL,IAAAvtC,IAAA,SAAAN,MAAA,eAAAmiB,EAAAisB,GAAA/rB,mBAAAC,KAAA,SAAAC,EAoCiB/Y,GApCjB,IAAAxF,EAoC8BqqC,IApC9BhoC,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,KAAAA,UAAA,UAAAgc,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAArW,MAAA,cAAAqW,EAAArW,KAAA,EAAA+hC,GAAAN,EAAAltC,UAAAqQ,WAAAvR,OAAAwR,eAAA48B,EAAAltC,WAAA,SAAA0H,MAAAnJ,KAAAmJ,KAqC0CmB,GArC1C,YAqCcxF,EArCdye,EAAAqP,QAuCsBuc,EAvCtB,CAAA5rB,EAAArW,KAAA,eAAAqW,EAAAE,OAAA,SAwCmBta,KAAKimC,UAAU9kC,IAxClC,cAAAiZ,EAAAE,OAAA,SA0CmB3e,GA1CnB,wBAAAye,EAAA3a,SAAAya,EAAAla,SAAA,gBAAAya,GAAA,OAAAX,EAAApd,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,YAAAN,MAAA,WAoDQ,OAAIqI,KAAKylC,SACCK,GAAAN,EAAAltC,UAAAqQ,WAAAvR,OAAAwR,eAAA48B,EAAAltC,WAAA,YAAA0H,MAAAnJ,KAAAmJ,MAGO,IAFCA,KAAKkmC,iBAInBJ,GAAAN,EAAAltC,UAAAqQ,WAAAvR,OAAAwR,eAAA48B,EAAAltC,WAAA,YAAA0H,MAAAnJ,KAAAmJ,SA1DZ/H,IAAA,SAAAN,MAAA,eAAA29B,EAAAyQ,GAAA/rB,mBAAAC,KAAA,SAAAsb,EAuEiBp0B,EAAaipB,EAAkBC,EAC/BP,EAAgBlU,GAxEjC,IAAAuwB,EAAAC,EAAAhJ,EAAAuH,EAAAha,EAAAsJ,EAAApzB,EAAA,OAAAmZ,mBAAAG,KAAA,SAAAyb,GAAA,cAAAA,EAAAvb,KAAAub,EAAA7xB,MAAA,UAyEcoiC,EAAanmC,KAAKiiC,SAAS5E,OAC3B+I,EAAYpmC,KAAKiiC,SAAS3E,aAEhBr/B,KADVm/B,EAAUp9B,KAAKiiC,SAASE,WA3EtC,CAAAvM,EAAA7xB,KAAA,cA6EkB,IAAIpG,MAAM,2BA7E5B,cAgFcgnC,EAAS,IAAIhQ,GAAgBxzB,GAC7BwpB,EAAKwS,GAAoBC,EAAS+I,EAAYC,EAAWhc,EAAUC,EAAUP,GAjF3F8L,EAAA7xB,KAAA,EAkFc+nB,GAAqBnB,EAAI/U,GAlFvC,cAAAggB,EAAA7xB,KAAA,GAmF+B4gC,EAAOG,mBAAmBna,EAAGd,aAAa,GAAO,GAnFhF,eAmFcoK,EAnFd2B,EAAAnM,KAqFc5oB,EAAQm9B,GAAkBnhB,YAAYoX,GAE5CvyB,QAAQC,IAAIG,KAAKC,UAAUlB,IAvFnC+0B,EAAAtb,OAAA,SAwFoD,SAArCzZ,EAAMs1B,OAAOoI,OAAO,GAAGE,OAAO,IAxF7C,yBAAA7I,EAAAn2B,SAAA81B,EAAAv1B,SAAA,gBAAA0a,EAAA8Z,EAAAyP,EAAAc,EAAAC,GAAA,OAAA1P,EAAA54B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,SAAAN,MAAA,eAAAk+B,EAAAkQ,GAAA/rB,mBAAAC,KAAA,SAAA6b,EAsGiB30B,EAAaipB,EACbC,EAAkBP,EAAgBlU,GAvGnD,IAAAuwB,EAAA/I,EAAAuH,EAAAha,EAAAsJ,EAAApzB,EAAA,OAAAmZ,mBAAAG,KAAA,SAAA+b,GAAA,cAAAA,EAAA7b,KAAA6b,EAAAnyB,MAAA,UAwGcoiC,EAAanmC,KAAKiiC,SAAS5E,YAEjBp/B,KADVm/B,EAAUp9B,KAAKiiC,SAASE,WAzGtC,CAAAjM,EAAAnyB,KAAA,cA2GkB,IAAIpG,MAAM,2BA3G5B,cA6GcgnC,EAAS,IAAIhQ,GAAgBxzB,GAC7BwpB,EAAKgT,GAAoBP,EAAS+I,EAAY/b,EAAUC,EAAUP,GA9GhFoM,EAAAnyB,KAAA,EA+Gc+nB,GAAqBnB,EAAI/U,GA/GvC,cAAAsgB,EAAAnyB,KAAA,GAgH+B4gC,EAAOG,mBAAmBna,EAAGd,aAAa,GAAO,GAhHhF,eAgHcoK,EAhHdiC,EAAAzM,KAkHc5oB,EAAQm9B,GAAkBnhB,YAAYoX,GAlHpDiC,EAAA5b,OAAA,SAoHoD,SAArCzZ,EAAMs1B,OAAOoI,OAAO,GAAGE,OAAO,IApH7C,yBAAAvI,EAAAz2B,SAAAq2B,EAAA91B,SAAA,gBAAAklC,EAAAC,EAAA9O,EAAAI,EAAAI,GAAA,OAAAhB,EAAAn5B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,YAAAN,MAAA,eAAA2+B,EAAAyP,GAAA/rB,mBAAAC,KAAA,SAAAsc,EA4HoBp1B,GA5HpB,IAAAglC,EAAA/I,EAAAuH,EAAAha,EAAAsJ,EAAAt4B,EAAA,OAAAqe,mBAAAG,KAAA,SAAAqc,GAAA,cAAAA,EAAAnc,KAAAmc,EAAAzyB,MAAA,UA6HcoiC,EAAanmC,KAAKiiC,SAAS5E,YAEjBp/B,KADVm/B,EAAUp9B,KAAKiiC,SAASE,WA9HtC,CAAA3L,EAAAzyB,KAAA,cAgIkB,IAAIpG,MAAM,2BAhI5B,cAmIcgnC,EAAS,IAAIE,GAAW1jC,GACxBwpB,EAAKoT,GAAuBX,GApI1C5G,EAAAzyB,KAAA,EAsI+B4gC,EAAOG,mBAAmBna,EAAGd,aAAa,GAtIzE,cAsIcoK,EAtIduC,EAAA/M,KAwIc9tB,EAAS0qC,GAAkBxpB,YAAYoX,GAE7CvyB,QAAQC,IAAIhG,GA1IpB66B,EAAAlc,OAAA,SA4Ie3e,EAAO2qC,SAAWjB,GAAOkB,UAAY5qC,EAAO6qC,WAAaL,GA5IxE,yBAAA3P,EAAA/2B,SAAA82B,EAAAv2B,SAAA,gBAAAu3B,GAAA,OAAAjB,EAAA55B,MAAAsD,KAAAhC,YAAA,KAAA/F,IAAA,gBAAAN,MAAA,WAgJQ,OACI8uC,IAAOzmC,KAAKknB,QACZwf,WAAY1mC,KAAK2mC,QACjBC,IAAO5mC,KAAK6mC,QACZC,UAAW9mC,KAAK+mC,eApJ5B9uC,IAAA,kBAAAN,MAAA,SAwJ8B+P,GACtB1H,KAAKknB,QAAUxf,EAAK++B,IACpBzmC,KAAK2mC,QAAUj/B,EAAK,YACpB1H,KAAK6mC,QAAUn/B,EAAKk/B,IACpB5mC,KAAK+mC,WAAar/B,EAAK,cA5J/BzP,IAAA,kBAAAN,MAAA,SAuK8B4B,EAAwCkf,GAC9D,GAAIzY,KAAKylC,SAAU,CACf,QAAkBxnC,IAAd1E,QAA2C0E,IAAhBwa,EAC3B,MAAM,IAAI9a,MAAM,kCAEhB,IAAM8kC,GACFe,IAAKjqC,EAAU6L,SACfk/B,IAAK,QACLZ,IAAKjrB,GAGHsqB,EAAcjhC,KAAKC,UAAU0gC,GACnC,OAAO5pB,GAAA,OAAWkqB,EAAa,SAGnC,OAAA+C,GAAAN,EAAAltC,UAAAqQ,WAAAvR,OAAAwR,eAAA48B,EAAAltC,WAAA,kBAAA0H,MAAAnJ,KAAAmJ,KAA6BzG,EAAWkf,MAtLpDxgB,IAAA,iBAAAN,MAAA,WA8LQ,IAAMorC,EAAcjhC,KAAKC,UAAU/B,KAAKuiB,OACxC,OAAO1J,GAAA,OAAWkqB,EAAa,aA/LvCyC,EAAA,GAuMMa,GAAN,oBAAAW,IAAAtB,GAAA1lC,KAAAgnC,GAAA,OAAAnB,GAAAmB,EAAA,OAAA/uC,IAAA,cAAAN,MAAA,SACuBH,GACf,IAAMy8B,EAAW,IAAI+S,EAErB,QAAiB/oC,IAAbzG,EAAE2+B,QAA4C,KAApB3+B,EAAE2+B,OAAOA,OAEnC,OADAlC,EAASqS,OAASjB,GAAO4B,SAClBhT,EAEX,IAAMnqB,EAAK,IAAIhK,GAAatI,EAAE2+B,OAAOA,QACrCrsB,EAAGvJ,KAAK,GACRuJ,EAAGxJ,cACHwJ,EAAGvJ,KAAK,GACR,IAAM68B,EAAUngC,GAAW6M,EAAG6D,iBAC9B7D,EAAGvJ,KAAK,GACR,IAAMimC,EAAWvpC,GAAW6M,EAAG6D,iBAC/B7D,EAAGvJ,KAAK,GACR,IAAM6lC,EAAYnpC,GAAW6M,EAAG6D,iBAChC7D,EAAGvJ,KAAK,GACR,IAAI+lC,EAASx8B,EAAG6D,gBAQhB,OAPAsmB,EAASmJ,QAAUA,EACnBnJ,EAASuS,SAAWA,EACpBvS,EAASmS,UAAYA,EAChBE,IACDA,EAAS,MAEbrS,EAASqS,OAAUA,EACZrS,MA1Bf+S,EAAA,IAsCA,SAAY3B,GACRA,EAAA,aACAA,EAAA,cACAA,EAAA,cAHJ,CAAYA,ooBCpRZ,IAAM6B,GAAN,WAkCI,SAAAC,EAAYx9B,EAAY+M,EAA0B5B,EAAkB+B,GAAYuwB,GAAApnC,KAAAmnC,GANhFnnC,KAAAkJ,KAAe,SAOXlJ,KAAK2J,GAAKA,EACV3J,KAAK0W,aAAeA,EACpB1W,KAAK8U,QAAUA,EACf9U,KAAK6W,KAAOA,EAtCpB,OAAAwwB,GAAAF,IAAAlvC,IAAA,SAAAN,MAAA,WAyCU,IAAA2vC,EACF,OAAAC,IACI59B,GAAI3J,KAAK2J,IACN3J,KAAK0W,aAAarO,iBAFzBm/B,GAAAF,GAGIxyB,QAAS9U,KAAK8U,QAAQH,WACtBkC,KAAM7W,KAAK6W,MACV,UAAY,eALjB2wB,GAAAF,EAAA,OAMUtnC,KAAKkJ,MANfs+B,GAAAF,EAAA,YAOetnC,KAAKsU,WAPpBgzB,SA1CRrvC,IAAA,WAAAN,MAAA,SACoB+P,GACZ,IAAMkO,EAAa+G,GAAoBjV,GACjC+/B,EAAK,IAAIN,EAAYz/B,EAAKiC,GAAIiM,EAAY,IAAI1B,GAAQxM,EAAKoN,SAAUpN,EAAKmP,MAGhF,OAFA4wB,EAAGnzB,UAAY5M,EAAK4M,UACpBmzB,EAAGv+B,KAAOxB,EAAKwB,KACRu+B,MANfN,EAAA,GAsDMO,GAAN,oBAAAC,IAAAP,GAAApnC,KAAA2nC,GAmGI3nC,KAAA4nC,YAnGJ,OAAAP,GAAAM,IAAA1vC,IAAA,aAAAN,MAAA,SAsGekwC,GAAoB,IAAApkC,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAC3B,QAAA2F,EAAAC,EAAgB7D,KAAK4nC,SAArBnwC,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA+B,CAC3B,GAD2BG,EAAAjM,MACrBmd,QAAQH,aAAekzB,EAAQ/yB,QAAQH,WACzC,QAHmB,MAAA9S,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAM3BkkC,EAAQl+B,IAAM3J,KAAK4nC,SAAShsC,OAAS,GAAGS,WACxC2D,KAAK4nC,SAAS/rC,KAAKgsC,MA7G3B5vC,IAAA,SAAAN,MAAA,WAiHQ,OAAOmK,KAAKC,UAAU/B,KAAKouB,gBAjHnCn2B,IAAA,YAAAN,MAAA,WAmIQ,OAPI4c,MAAOvU,KAAKuU,MACZpP,MAAOnF,KAAKmF,MACZmpB,KAAMtuB,KAAKsuB,KACXE,UAAWxuB,KAAKwuB,UAChBoZ,SAAU5nC,KAAK4nC,SAASx1B,IAAI,SAACrb,GAAD,OAAOA,EAAE+wC,WACrC5Y,MAAOlvB,KAAKkvB,UAjIxBj3B,IAAA,mBAAAN,MAAA,SAsIqB+2B,EAAkBttB,GAC/B,IAAMsV,EAAe1W,KAAK4nC,SAAS,GAAGlxB,aAChC5B,EAAU9U,KAAK4nC,SAAS,GAAG9yB,QAC3B+B,EAAO7W,KAAK4nC,SAAS,GAAG/wB,KAC9B,OAAOH,EAAaK,QAAQ2X,EAAU5Z,EAAS+B,EAAMzV,MA1I7DnJ,IAAA,kBAAAN,MAAA,SA6IoB+2B,EAAkB/D,EAAiBvpB,GAC/C,IAAM6a,EAAMjc,KAAK2uB,iBAAiBD,EAAUttB,GAE5C,OADAyqB,GAAgBlB,EAAI1O,EAAKA,EAAI1iB,UAAU+M,eAChCqkB,OAhJf1yB,IAAA,iBAAAN,MAAA,SAWQwN,EACAypB,EACAF,EACA5Z,EACA+Z,EACAztB,GAGA,IAAM2mC,EAAW,IAAIJ,EACf9wB,EAAOhY,OAAOC,KAAK+vB,EAAY,UAAUxyB,SAAS,OAClDuZ,EAAagZ,EAAoB7X,QAAQ2X,EAAU5Z,EAAS+B,EAAMzV,GACnE+D,IACDA,EAAQnJ,GAAc2G,GAAoB,KAI9C,IAAM2R,EAAYsB,EAAWkF,eAC7BitB,EAASxzB,MAAQL,GAAQ8zB,cAAc1zB,GACvCyzB,EAAS5iC,MAAQA,EACjB4iC,EAASzZ,MAAO,EAChByZ,EAASvZ,WAAY,EAGrB,IAAMqZ,EAAU,IAAIX,GAAY,IAAKtY,EAAqB1a,GAAQ+zB,UAAUF,EAASxzB,OAAQsa,GAI7F,OAHAgZ,EAAQvzB,UAAYA,EAAUlI,eAC9B27B,EAASH,SAAS/rC,KAAKgsC,GAEhBE,KAtCf9vC,IAAA,SAAAN,MAAA,SAmDkBie,EAAwBR,EAAmBjQ,EAAe/D,GACpE,IAAM2mC,EAAW,IAAIJ,EACrBI,EAASxzB,MAAQ,GACjBwzB,EAAS5iC,MAAQA,EACjB4iC,EAASzZ,MAAO,EAChByZ,EAASvZ,WAAY,EAGrB,IAAMla,EAAYsB,EAAWkF,eAC7BitB,EAASxzB,MAAQL,GAAQ8zB,cAAc1zB,GACvC,IAAMQ,EAAUZ,GAAQ+zB,UAAUF,EAASxzB,OACrCsC,EAAOhU,GAAY,IACnB+rB,EAAsBhZ,EAAWQ,QAAQhB,EAAWN,EAAS+B,EAAMzV,GAEnEytB,EAAahwB,OAAOC,KAAK+X,EAAM,OAAOxa,SAAS,UAC/CwrC,EAAU,IAAIX,GAAY,IAAKtY,EAAqB9Z,EAAS+Z,GAInE,OAHAgZ,EAAQvzB,UAAYA,EAAUlI,eAC9B27B,EAASH,SAAS/rC,KAAKgsC,GAEhBE,KAtEf9vC,IAAA,YAAAN,MAAA,SAyEqB+P,GACb,OAAOigC,EAAS3Y,aAAaltB,KAAKS,MAAMmF,OA1EhDzP,IAAA,eAAAN,MAAA,SAoFwBs3B,GAChB,IAAMtlB,EAAK,IAAIg+B,EAOf,OANAh+B,EAAG4K,MAAQ0a,EAAI1a,MACf5K,EAAGxE,MAAQ8pB,EAAI9pB,MACfwE,EAAG2kB,KAAOW,EAAIX,KACd3kB,EAAG6kB,UAAYS,EAAIT,UACnB7kB,EAAGi+B,SAAY3Y,EAAI2Y,SAAmBx1B,IAAI,SAACrb,GAAD,OAAOmwC,GAAYgB,SAASnxC,KACtE4S,EAAGulB,MAAQD,EAAIC,MACRvlB,MA5Ffg+B,EAAA,yPClCA,IAAMQ,GAAN,oBAAAC,iGAAAC,CAAAroC,KAAAooC,GAMIpoC,KAAAknB,QAAkB,EANtB,OAAAohB,GAAAF,IAAAnwC,IAAA,YAAAN,MAAA,WAmBQ,IAAIgE,EAASqE,KAAK6jC,oBAClBloC,GAAUyB,GAAW4C,KAAKuoC,QAAQ3sC,QAF7B,IAAA6H,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAGL,QAAA2F,EAAAC,EAAgB7D,KAAKuoC,QAArB9wC,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA8B,CAC1B9H,GAD0BiI,EAAAjM,MACdkyB,aAJX,MAAAhoB,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAOL,OAAOhI,KAzBf1D,IAAA,oBAAAN,MAAA,WA8BQ,IAAIgE,EAAS,GACbA,GAAUmC,GAAckC,KAAKW,MAC7BhF,GAAUmC,GAAckC,KAAKknB,SAE7BvrB,GAAUqE,KAAKwoC,yBACf7sC,GAAUyB,GAAW4C,KAAKigC,WAAWrkC,QANxB,IAAAiR,GAAA,EAAAC,GAAA,EAAAC,OAAA9O,EAAA,IAOb,QAAA+O,EAAAC,EAAgBjN,KAAKigC,WAArBxoC,OAAAqM,cAAA+I,GAAAG,EAAAC,EAAAlJ,QAAAC,MAAA6I,GAAA,EAAiC,CAC7BlR,GAD6BqR,EAAArV,MACjBkyB,aARH,MAAAhoB,GAAAiL,GAAA,EAAAC,EAAAlL,EAAA,aAAAgL,GAAAI,EAAAhJ,QAAAgJ,EAAAhJ,SAAA,WAAA6I,EAAA,MAAAC,GAWbpR,GAAUyB,GAAW4C,KAAKyoC,OAAO7sC,QAXpB,IAAA0U,GAAA,EAAAC,GAAA,EAAAC,OAAAvS,EAAA,IAYb,QAAAwS,EAAAC,EAAgB1Q,KAAKyoC,OAArBhxC,OAAAqM,cAAAwM,GAAAG,EAAAC,EAAA3M,QAAAC,MAAAsM,GAAA,EAA6B,CACzB3U,GADyB8U,EAAA9Y,MACbkyB,aAbH,MAAAhoB,GAAA0O,GAAA,EAAAC,EAAA3O,EAAA,aAAAyO,GAAAI,EAAAzM,QAAAyM,EAAAzM,SAAA,WAAAsM,EAAA,MAAAC,GAgBb7U,GAAUyB,GAAW4C,KAAK0oC,QAAQ9sC,QAhBrB,IAAA2V,GAAA,EAAAC,GAAA,EAAAC,OAAAxT,EAAA,IAiBb,QAAAyT,EAAAC,EAAgB3R,KAAK0oC,QAArBjxC,OAAAqM,cAAAyN,GAAAG,EAAAC,EAAA5N,QAAAC,MAAAuN,GAAA,EAA8B,CAC1B5V,GAD0B+V,EAAA/Z,MACdkyB,aAlBH,MAAAhoB,GAAA2P,GAAA,EAAAC,EAAA5P,EAAA,aAAA0P,GAAAI,EAAA1N,QAAA0N,EAAA1N,SAAA,WAAAuN,EAAA,MAAAC,GAoBb,OAAO9V,KAjDf1D,IAAA,UAAAN,MAAA,WAqDQ,IAAMoH,EAAOiB,KAAK6jC,oBAEZpZ,EAAmBpoB,EAAA,IAAaC,IAAIC,MAAMxD,GAC1C2rB,EAAgBroB,EAAA,OAAgBooB,GAAkBpuB,WAGxD,OAFuBgG,EAAA,OAAgBA,EAAA,IAAaC,IAAIC,MAAMmoB,IAAgBruB,cAzDtFpE,IAAA,iBAAAN,MAAA,WA+DQ,OAAOqI,KAAK2oC,iBA/DpB1wC,IAAA,wBAAAN,MAAA,WAmEQ,OAAOqI,KAAK2oC,iBAnEpB1wC,IAAA,cAAAN,MAAA,WAuEQ,OAAOqI,KAAK6jC,uBAvEpB5rC,IAAA,OAAAN,MAAA,SA0ESie,GAAiF,IAAzD5N,EAAyDhK,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAA/BkH,GAAgBS,gBAGnE,OAFYiQ,EAAW2E,KAAKva,KAAK2oC,cAAe3gC,GAAQoE,eAClCrQ,UAAU,MA5ExC9D,IAAA,yBAAAN,MAAA,WAiFQ,MAAO,OAjFfywC,EAAA,yPCxBA,IAAMQ,GAAN,SAAAC,GAGI,SAAAC,iGAAAC,CAAA/oC,KAAA8oC,GAAA,IAAAvjB,mKAAAyjB,CAAAhpC,MAAA8oC,EAAAngC,WAAAvR,OAAAwR,eAAAkgC,IAAAjyC,KAAAmJ,OAAA,OAEIulB,EAAK5kB,KAAO4nB,GAAOqC,OAFvBrF,EAHJ,gUAAA0jB,CAAAH,EAA2CX,IAA3Ce,GAAAJ,IAAA7wC,IAAA,yBAAAN,MAAA,WASQ,IAAIgE,EAAS,GAGb,OAFAA,GAAUuB,GAAa8C,KAAKmpC,QAC5BxtC,GAAUmC,GAAckC,KAAKopC,IAAK,GAAG,OAX7CN,EAAA,yPCFA,IAAMO,GAAN,oBAAAC,iGAAAC,CAAAvpC,KAAAspC,GAAA,OAAAE,GAAAF,EAAA,OAAArxC,IAAA,qBAAAN,MAAA,SAE8BwJ,EAAapC,GACnC,IAAM0qC,EAAMzpC,KAAK0pC,YAAY,qBAAsB3qC,GACnD,OAAOsC,EAAAC,EAAMC,KAAKJ,EAAKsoC,GAAKjoC,KAAK,SAACC,GAC9B,OAAOA,EAAI1C,UALvB9G,IAAA,cAAAN,MAAA,SASuB61B,GAAgC,QAAA/e,EAAAzQ,UAAApC,OAAbwF,EAAapC,MAAAyP,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAbvN,EAAauN,EAAA,GAAA3Q,UAAA2Q,GAQ/C,OANI8e,QAAS,MACTD,SACApsB,SACAuI,GAAI,MAdhB1R,IAAA,aAAAN,MAAA,SAoBsBwJ,EAAasrB,EAAuB3X,GAClD,IAAM20B,EAAMzpC,KAAK0pC,YAAY,aAAcjd,EAAakd,cAAe70B,EAAQ+U,aAC/E,OAAOxoB,EAAAC,EAAMC,KAAKJ,EAAKsoC,GAAKjoC,KAAK,SAACC,GAC9B,OAAOA,EAAI1C,WAvBvBuqC,EAAA,yPCCA,IAAMM,GAAN,oBAAAC,iGAAAC,CAAA9pC,KAAA6pC,GAAA,OAAAE,GAAAF,IAAA5xC,IAAA,YAAAN,MAAA,WA0BQ,IAAIgE,EAAS,GAGb,OAFAA,GAAUuB,GAAa8C,KAAKgqC,WAC5BruC,GAAUuB,GAAa8C,KAAKoN,WA5BpCnV,IAAA,cAAAN,MAAA,SACuB2G,GACf,IAAMwL,EAAK,IAAIhK,GACTmqC,EAAU,IAAIJ,EAGpB,OAFAI,EAAQD,UAAYlgC,EAAG6D,gBACvBs8B,EAAQ78B,KAAOtD,EAAG6D,gBACXs8B,KANfhyC,IAAA,oBAAAN,MAAA,SAS6BkxB,GACrB,OAAOlc,GAAkBkc,MAVjC5wB,IAAA,oBAAAN,MAAA,SAa6B2c,GACrB,OAAOpI,GAAkBoI,MAdjCrc,IAAA,yBAAAN,MAAA,SAiBkCb,EAAWozC,GACrC,OAAO39B,GAAuB29B,EAAKpzC,OAlB3C+yC,EAAA,yPCEA,IAAMM,GAAN,oBAAAC,iGAAAC,CAAArqC,KAAAoqC,GAAA,OAAAE,GAAAF,EAAA,OAAAnyC,IAAA,wBAAAN,MAAA,SACiC80B,EAAuB8d,EAAel5B,GAC/D,IAAIjQ,EAASgQ,GAAqBC,GAIlC,OAHAjQ,GAAUtD,GAAc,KACxBsD,GAAUqrB,EAAa5C,YACZ7pB,KAAKwqC,0BAA0BppC,EAAQmpC,MAL1DtyC,IAAA,4BAAAN,MAAA,SASqCyJ,EAAgBmpC,GAC7C,IAAM5f,EAAK,IAAIie,GACfje,EAAGzD,QAAU,EACbyD,EAAGsV,cACH,IAAMwK,EAAQ,IAAI7iB,GAClB6iB,EAAMziB,MAAQR,GAA0BS,OACxCwiB,EAAM1rC,KAAOwrC,EAAK1gB,YAClBc,EAAGsV,WAAW,GAAKwK,EACnB,IAAMC,EAAQ,IAAI9iB,GAQlB,OAPA8iB,EAAM1iB,MAAQR,GAA0BU,eACxCwiB,EAAM3rC,KAAO8D,GAAY,IACzB8nB,EAAGsV,WAAW,GAAKyK,EACnB/f,EAAG8d,UACH9d,EAAG+d,WACH/d,EAAGwe,OAAS/nC,EACZupB,EAAGye,IAAM,EACFze,MAzBfyf,EAAA,yPCHA,IAAMO,GAAN,oBAAAC,iGAAAC,CAAA7qC,KAAA4qC,GAAA,OAAAE,GAAAF,IAAA3yC,IAAA,SAAAN,MAAA,SAgBWR,GACH,OAAIA,IAAM6I,MAGN,OAAS7I,IAGPA,aAAayzC,IAGZ5qC,KAAK+qC,WAAa5zC,EAAE4zC,UAAY/qC,KAAKgrC,YAAc7zC,EAAE6zC,eA1BpE/yC,IAAA,WAAAN,MAAA,WA8BQ,OAAOmE,SAAS0C,GAAWwB,KAAK+qC,UAAY,IAAM/qC,KAAKgrC,aA9B/D/yC,IAAA,YAAAN,MAAA,WAkCQ,IAAIgE,EAAS,GAGb,OAFAA,GAAUqE,KAAK+qC,SACfpvC,GAAUmC,GAAckC,KAAKgrC,UAAW,GAAG,QApCnD/yC,IAAA,cAAAN,MAAA,SAEuBiU,GACf,IAAM9B,EAAK,IAAIhK,GAAa8L,GACtBq/B,EAAQ,IAAIL,EAGlB,OAFAK,EAAMF,SAAWjhC,EAAGvJ,KAAK,IACzB0qC,EAAMD,UAAYlvC,SAAS0C,GAAWsL,EAAGvJ,KAAK,IAAK,IAC5C0qC,MAPfL,EAAA,yPCDA,IAAMM,GAAN,oBAAAC,iGAAAC,CAAAprC,KAAAmrC,GAAA,OAAAE,GAAAF,IAAAlzC,IAAA,YAAAN,MAAA,WAsBQ,IAAIgE,EAAS,GAIb,OAHAA,GAAUqE,KAAKsrC,QACf3vC,GAAUmC,GAAckC,KAAKrI,MAAO,GAAG,GACvCgE,GAAUqE,KAAKurC,WAAW1hB,iBAzBlC5xB,IAAA,cAAAN,MAAA,SAEuB2G,GACf,IAAMwL,EAAK,IAAIhK,GAAaxB,GACtBktC,EAAS,IAAIL,EAInB,OAHAK,EAAOF,QAAUxhC,EAAGvJ,KAAK,IACzBirC,EAAO7zC,MAAQmS,EAAG2hC,WAClBD,EAAOD,WAAa,IAAIr3B,GAAQpK,EAAGvJ,KAAK,KACjCirC,MARfL,EAAA,2QCYI,SAAAO,EAAavqC,gGAAawqC,CAAA3rC,KAAA0rC,GACtB1rC,KAAKmB,IAAMA,GAAO5G,EAAaE,oDAO/B,OAAOuF,KAAKmB,wCAQJqsB,GAAgC,QAAA/e,EAAAzQ,UAAApC,OAAbwF,EAAapC,MAAAyP,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAbvN,EAAauN,EAAA,GAAA3Q,UAAA2Q,GAQxC,OANI8e,QAAS,MACTD,SACApsB,SACAuI,GAAI,sCAWDmL,GACP,IAAM20B,EAAMzpC,KAAK0pC,YAAY,aAAc50B,EAAQH,YAEnD,OAAOtT,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,kDASAA,GAAsC,IACjD0qC,OAAA,EAQJ,OALIA,EAJiDzrC,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,IAAAA,UAAA,GAI3CgC,KAAK0pC,YAAY,qBAAsB3qC,EAAM,GAE7CiB,KAAK0pC,YAAY,qBAAsB3qC,GAG1CsC,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,iDASD6wB,GACd,IAAM6Z,EAAMzpC,KAAK0pC,YAAY,oBAAqB9Z,GAElD,OAAOvuB,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,qDASG6wB,GAClB,IAAM6Z,EAAMzpC,KAAK0pC,YAAY,oBAAqB9Z,EAAQ,GAE1D,OAAOvuB,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,8CAoBf,IAAM0qC,EAAMzpC,KAAK0pC,YAAY,sBAE7B,OAAOroC,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,gDAQf,IAAM0qC,EAAMzpC,KAAK0pC,YAAY,iBAE7B,OAAOroC,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,+CAQf,IAAM0qC,EAAMzpC,KAAK0pC,YAAY,iBAE7B,OAAOroC,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,4CASNpH,GACT,IAAM8xC,EAAMzpC,KAAK0pC,YAAY,WAAY/xC,EAAO,GAEhD,OAAO0J,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,2CASPmK,GACR,IAAMugC,EAAMzpC,KAAK0pC,YAAY,mBAAoBxgC,GAEjD,OAAO7H,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,+CASH8wB,GACZ,IAAM4Z,EAAMzpC,KAAK0pC,YAAY,mBAAoB7Z,EAAU,GAE3D,OAAOxuB,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,wCAUVpH,GACL,IAAM8xC,EAAMzpC,KAAK0pC,YAAY,WAAY/xC,GAEzC,OAAO0J,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,iDAWDpH,GACd,IAAM8xC,EAAMzpC,KAAK0pC,YAAY,oBAAqB/xC,GAElD,OAAO0J,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,sDAQI6wB,GACnB,IAAM6Z,EAAMzpC,KAAK0pC,YAAY,yBAA0B9Z,GAEvD,OAAOvuB,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,0CASR8wB,EAAkB53B,GACzB,IAAMwxC,EAAMzpC,KAAK0pC,YAAY,aAAc7Z,EAAU53B,GAKrD,OAFAyJ,QAAQC,IAAI8nC,GAELpoC,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,8CAQJmK,GACX,IAAMugC,EAAMzpC,KAAK0pC,YAAY,iBAAkBxgC,GAO/C,OAJAxH,QAAQC,IAAI3B,KAAKmB,KAEjBO,QAAQC,IAAI8nC,GAELpoC,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,4CAUN+wB,EAAehxB,EAAeixB,GACvC,GAAc,QAAVD,GAA6B,QAAVA,EACnB,MAAMn3B,EAAWyK,eAErB,IAAMqmC,EAAMzpC,KAAK0pC,YAAY,eAAgB5Z,EAAOhxB,EAAK6V,WAAYob,EAAGpb,YACxE,OAAOtT,EAAAC,EAAMC,KAAKvB,KAAKmB,IAAKsoC,GAAKjoC,KAAK,SAACC,GACnC,OAAOA,EAAI1C,gBClQV6sC,GAAe,2CACfC,GAAe,2CAMtB,SAAAC,GAA2BC,GAC7B,GAAIA,IAAclxC,EAAWC,IACzB,OAAO,IAAIoZ,GAAQ03B,IAChB,GAAIG,IAAclxC,EAAWE,IAChC,OAAO,IAAImZ,GAAQ23B,IAEnB,MAAM,IAAIluC,MAAM,qBAQlB,SAAAquC,GAAuBznC,GACzB,IAAM5M,EAAQ,IAAIqN,EAAA,UAAUT,GAE5B,IAAK5M,EAAMsN,aAAetN,EAAMs0C,IAAI,IAAIjnC,EAAA,UAAU,IAC9C,MAAM,IAAIrH,MAAM,sBAclB,SAAAuuC,GACFH,EACAjtC,EACAixB,EACAxrB,EACA6lB,EACAC,EACAP,GAEAkiB,GAAaznC,GACb,IAAMxG,EAAM,IAAIiH,EAAA,UAAUT,GACpBw7B,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAInf,EAAMixB,EAAIhyB,GACrB,IAAMyQ,KACNA,EAAK3S,MAAMkkC,IACX,IAAMoM,EAAWL,GAAiBC,GAE5BphB,EAAe4B,GAAqB,WAD3BsS,GAAsBrwB,GACyB29B,EAAU/hB,EAAUC,GAYlF,OAXAM,EAAGohB,UAAYA,EACfphB,EAAG7rB,KAAOA,EACV6rB,EAAGoF,GAAKA,EACRpF,EAAGpmB,OAASA,EACZomB,EAAG6C,OAAS,WAGR7C,EAAGb,MADHA,GAGWhrB,EAER6rB,EAsFL,SAAAyhB,GAA4BttC,EAAeixB,EAAaxrB,EAAyBulB,EACrDM,EAAkBC,GAChD2hB,GAAaznC,GACb,IAAMxG,EAAM,IAAIiH,EAAA,UAAUT,GAIpBiK,KACAuxB,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAInf,EAAM,IAAIoV,GAAQ03B,IAAe7b,EAAIhyB,GAChDyQ,EAAK3S,KAAKkkC,GACV,IACMpV,EAAe4B,GACjB,eAFSsS,GAAsBrwB,GAET,IAAI0F,GAAQ23B,IAAgBzhB,EAAUC,GAOhE,OANAM,EAAGb,MAAQA,EACXa,EAAGohB,UAAY,MACfphB,EAAG7rB,KAAOA,EACV6rB,EAAGoF,GAAKA,EACRpF,EAAGpmB,OAASA,EACZomB,EAAG6C,OAAS,eACL7C,EASL,SAAA0hB,GAA+Bvc,EAAehxB,EAAeixB,GAE/D,GAAc,SADdD,EAAQA,EAAME,gBACmB,QAAVF,EACnB,MAAMn3B,EAAWyK,eAGrB,IAAI+oC,EAAW,GAEXA,EADU,QAAVrc,EACW+b,GAEAD,GAEf,IAAMp9B,KACAuxB,EAAS,IAAI7sB,GAKnB,OAJA6sB,EAAO9hB,IAAInf,EAAMixB,GACjBvhB,EAAK3S,KAAKkkC,GAECxT,GAAqB,YADjBsS,GAAsBrwB,GACgB,IAAI0F,GAAQi4B,GAAW,IAAK,KAS/E,SAAAG,GAA6Bxc,EAAgBhb,GAE/C,GAAc,SADdgb,EAAQA,EAAME,gBACmB,QAAVF,EACnB,MAAMn3B,EAAWyK,eAErB,IAAI+oC,EAAW,GAQf,OANIA,EADU,QAAVrc,EACW+b,GAEAD,GAGJrf,GAAqB,YADjBrvB,GAAa4X,EAAQ+U,aACiB,IAAI3V,GAAQi4B,GAAW,IAAK,KAI/E,SAAAI,GAAgC7wC,GAClC,IAAMivB,EAAeV,GAAYpN,YAAYnhB,GACvC0R,EAAOud,EAAGH,QAAQX,YAClB2iB,EAAiBp/B,EAAKq/B,YAAY,6CAClCC,EAAiBt/B,EAAKq/B,YAAY,8CACxC,GAAID,EAAiB,GAA6C,MAAxCp/B,EAAKvP,OAAO2uC,EAAiB,GAAI,GACvD7hB,EAAGohB,UAAY,UACZ,MAAIS,EAAiB,GAA6C,MAAxCp/B,EAAKvP,OAAO2uC,EAAiB,GAAI,IAG9D,MAAM,IAAI7uC,MAAM,qBAFhBgtB,EAAGohB,UAAY,MAInB,IAAMY,EAAgB1qC,KAAK2qC,IAAIJ,EAAgBE,GACzCtrC,EAASgM,EAAKrR,UAAU,EAAG4wC,GAC3BE,EAAYzrC,EAAOhB,QAAQ,YAAc,EAC/C,GAAoC,SAAhCgB,EAAOvD,OAAOgvC,EAAW,GAAe,CACxC,IAAMC,EAAY1rC,EAAOrF,UAAU8wC,EAAY,GAC/CliB,EAAG6C,OAASvwB,GAAW6vC,OACpB,CACH,IAAMC,EAAY3rC,EAAOrF,UAAU8wC,EAAY,GAC/CliB,EAAG6C,OAASvwB,GAAW8vC,GAG3B,GAAkB,aAAdpiB,EAAG6C,OAAuB,CAC1B,IAAM1jB,EAAK,IAAIhK,GAAasB,GAG5B0I,EAAGlK,KAAO,GACV,IAAMd,EAAO,IAAIoV,GAAQpK,EAAGvJ,KAAK,KACjCoqB,EAAG7rB,KAAOA,EAEVgL,EAAGlK,KAAO,EACV,IAAMmwB,EAAK,IAAI7b,GAAQpK,EAAGvJ,KAAK,KAC/BoqB,EAAGoF,GAAKA,EAERjmB,EAAGlK,KAAO,EACV,IAAMotC,EAASlxC,SAASgO,EAAGvJ,KAAK,GAAI,IACpC,GAAiC,WAA7BuJ,EAAGpO,IAAImC,OAAOiM,EAAGlK,IAAK,GACtB+qB,EAAGpmB,OAASyoC,EAAS,OAClB,CACH,IAAMzoC,EAASmH,GAAOuhC,WAAWnjC,EAAGvJ,KAAKysC,IAASr1C,MAClDgzB,EAAGpmB,OAAS,IAAIS,EAAA,UAAUT,GAAQlI,gBAEnC,IAAkB,iBAAdsuB,EAAG6C,OAuBV,MAAM,IAAI7vB,MAAM,qBAtBhB,IAAMyrB,EAAK,IAAItpB,GAAasB,GAG5BgoB,EAAGxpB,KAAO,GACV,IAAMstC,EAAO,IAAIh5B,GAAQkV,EAAG7oB,KAAK,KACjCoqB,EAAG7rB,KAAOouC,EAIV9jB,EAAGxpB,KAAO,GACV,IAAMutC,EAAK,IAAIj5B,GAAQkV,EAAG7oB,KAAK,KAC/BoqB,EAAGoF,GAAKod,EAER/jB,EAAGxpB,KAAO,EACV,IAAMwtC,EAAStxC,SAASstB,EAAG7oB,KAAK,GAAI,IACpC,GAAiC,WAA7B6oB,EAAG1tB,IAAImC,OAAOurB,EAAGxpB,IAAK,GACtB+qB,EAAGpmB,OAAS6oC,EAAS,OAClB,CACH,IAAMC,EAAS3hC,GAAOuhC,WAAW7jB,EAAG7oB,KAAK6sC,IAASz1C,MAClDgzB,EAAGpmB,OAAS,IAAIS,EAAA,UAAUqoC,GAAQhxC,YAM1C,OAAOsuB,2VCzSX,IAAM2iB,GAMF,SAAAC,EAAmBzuC,EAAeixB,EAAayd,EAAiB71C,GAAa81C,GAAAztC,KAAAutC,GACzEvtC,KAAKlB,KAAOA,EAAK+qB,YACjB7pB,KAAK+vB,GAAKA,EAAGlG,YACb7pB,KAAKwtC,QAAU1vC,GAAc0vC,GAC7BxtC,KAAKrI,MAAQ,IAAIqN,EAAA,UAAUrN,IAI7B+1C,GAMF,SAAAC,EAAYC,EAAkB9uC,EAAeixB,EAAayd,EAAiB71C,GAAa81C,GAAAztC,KAAA2tC,GACpF3tC,KAAK4tC,QAAUA,EAAQ/jB,YACvB7pB,KAAKlB,KAAOA,EAAK+qB,YACjB7pB,KAAK+vB,GAAKA,EAAGlG,YACb7pB,KAAKwtC,QAAU1vC,GAAc0vC,GAC7BxtC,KAAKrI,MAAQ,IAAIqN,EAAA,UAAUrN,IAI7Bk2C,GACI,OADJA,GAEM,SAFNA,GAGW,cAHXA,GAIS,YAJTA,GAKQ,WALRA,GAMa,gBANbA,GAOO,UAPPA,GAQY,eARZA,GASS,YATTA,GAUY,eAVZA,GAWiB,oBAXjBA,GAYQ,WAZRA,GAcI,OAdJA,GAiBU,aAjBVA,GAkBc,iBAIdC,GAAN,WAGI,SAAAC,EAAYthB,GAAqBghB,GAAAztC,KAAA+tC,GAC7B/tC,KAAKysB,aAAeA,EAJ5B,OAAAuhB,GAAAD,IAAA91C,IAAA,aAAAN,MAAA,SAQQyyB,EACAC,EACAP,GAGA,OAAO6C,GADMkhB,MAC0B7tC,KAAKysB,aAAcrC,EAAUC,EAAUP,MAbtF7xB,IAAA,iBAAAN,MAAA,SAiBQs2C,EACAC,EACAV,EACAjpC,EACA6lB,EACAC,EACAP,GAEA,IAAMqkB,EAAON,GACPzsC,GACF,IAAI+M,GAAU,SAAUF,GAAcyB,UAAWu+B,EAASpkB,aAC1D,IAAI1b,GAAU,OAAQF,GAAcyB,UAAWw+B,EAASrkB,aACxD,IAAI1b,GAAU,UAAWF,GAAcyB,UAAW89B,GAClD,IAAIr/B,GAAU,SAAUF,GAAciC,KAAM3L,IAEhD,OAAOooB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MAhC1F7xB,IAAA,sBAAAN,MAAA,SAoCQy2C,EACAhkB,EACAC,EACAP,GAEA,IAAMtb,KACNA,EAAK3S,KAAKmB,GAAW6wC,KACrB,IAAMQ,KAJQ5qC,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAKd,QAAA2F,EAAAC,EAAoBuqC,EAApB32C,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA4B,KAAjB6qC,EAAiB1qC,EAAAjM,MACxB02C,EAAKxyC,MACDyyC,EAAMxvC,KACNwvC,EAAMve,GACNue,EAAMd,QACNc,EAAM32C,SAVA,MAAAkK,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAad6K,EAAK3S,KAAKwyC,GACV,IAAMjtC,EAASyQ,GAAuBrD,GACtC,OAAOme,GAAsB,GAAIvrB,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MAtDxF7xB,IAAA,gBAAAN,MAAA,SA0DQ42C,EACAX,EACAJ,EACAjpC,EACA6lB,EACAC,EACAP,GAEA,IAAMqkB,EAAON,GACPzsC,GACF,IAAI+M,GAAU,QAASF,GAAcyB,UAAW6+B,EAAM1kB,aACtD,IAAI1b,GAAU,UAAWF,GAAcyB,UAAWk+B,EAAQ/jB,aAC1D,IAAI1b,GAAU,UAAWF,GAAcyB,UAAW5R,GAAc0vC,IAChE,IAAIr/B,GAAU,SAAUF,GAAciC,KAAM3L,IAEhD,OAAOooB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MAzE1F7xB,IAAA,mBAAAN,MAAA,SA6EQy2C,EACAhkB,EACAC,EACAP,GAEA,IAAMqkB,EAAON,GACPr/B,KACNA,EAAK3S,KAAKmB,GAAWmxC,IACrB,IAAME,KALQxhC,GAAA,EAAAC,GAAA,EAAAC,OAAA9O,EAAA,IAMd,QAAA+O,EAAAC,EAAoBmhC,EAApB32C,OAAAqM,cAAA+I,GAAAG,EAAAC,EAAAlJ,QAAAC,MAAA6I,GAAA,EAA4B,KAAjByhC,EAAiBthC,EAAArV,MACxB02C,EAAKxyC,MACDyyC,EAAMxvC,KACNwvC,EAAMve,GACNue,EAAMd,QACNc,EAAM32C,SAXA,MAAAkK,GAAAiL,GAAA,EAAAC,EAAAlL,EAAA,aAAAgL,GAAAI,EAAAhJ,QAAAgJ,EAAAhJ,SAAA,WAAA6I,EAAA,MAAAC,GAcdyB,EAAK3S,KAAKwyC,GACV,IAAMjtC,EAASyQ,GAAuBrD,GACtC,OAAOme,GAAsB,GAAIvrB,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MAhGxF7xB,IAAA,wBAAAN,MAAA,SAoGQy2C,EACAhkB,EACAC,EACAP,GAEA,IAAMqkB,EAAON,GACPr/B,KACNA,EAAK3S,KAAKmB,GAAWmxC,IACrB,IAAME,KALQ/9B,GAAA,EAAAC,GAAA,EAAAC,OAAAvS,EAAA,IAMd,QAAAwS,EAAAC,EAAoB09B,EAApB32C,OAAAqM,cAAAwM,GAAAG,EAAAC,EAAA3M,QAAAC,MAAAsM,GAAA,EAA4B,KAAjBg+B,EAAiB79B,EAAA9Y,MACxB02C,EAAKxyC,MACDyyC,EAAMV,QACNU,EAAMxvC,KACNwvC,EAAMve,GACNue,EAAMd,QACNc,EAAM32C,SAZA,MAAAkK,GAAA0O,GAAA,EAAAC,EAAA3O,EAAA,aAAAyO,GAAAI,EAAAzM,QAAAyM,EAAAzM,SAAA,WAAAsM,EAAA,MAAAC,GAedhC,EAAK3S,KAAKwyC,GACV,IAAMjtC,EAASyQ,GAAuBrD,GACtC,OAAOme,GAAsB,GAAIvrB,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MAxHxF7xB,IAAA,qBAAAN,MAAA,SA4HQq9B,EACAl2B,EACAixB,EACAyd,EACAjpC,EACA6lB,EACAC,EACAP,GAEA,IAAMqkB,EAAON,GACPzsC,GACF,IAAI+M,GAAU,SAAUF,GAAcyB,UAAWslB,EAAOnL,aACxD,IAAI1b,GAAU,OAAQF,GAAcyB,UAAW5Q,EAAK+qB,aACpD,IAAI1b,GAAU,KAAMF,GAAcyB,UAAWqgB,EAAGlG,aAChD,IAAI1b,GAAU,UAAWF,GAAcyB,UAAW5R,GAAc0vC,IAChE,IAAIr/B,GAAU,SAAUF,GAAciC,KAAM3L,IAEhD,OAAOooB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MA7I1F7xB,IAAA,iBAAAN,MAAA,SAyJQm3B,EACA0f,EACApkB,EACAC,EACAP,GAEA,IAAMqkB,EAAON,GACPzsC,GACF,IAAI+M,GAAU,UAAWF,GAAcyB,UAAWof,EAAQjF,aAC1D,IAAI1b,GAAU,cAAeF,GAAcgC,QAASu+B,IAExD,OAAO7hB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MApK1F7xB,IAAA,uBAAAN,MAAA,SAwKQ42C,EACAX,EACAJ,GAEA,IAAMW,EAAON,GACPzsC,GACF,IAAI+M,GAAU,QAASF,GAAcyB,UAAW6+B,EAAM1kB,aACtD,IAAI1b,GAAU,UAAWF,GAAcyB,UAAWk+B,EAAQ/jB,aAC1D,IAAI1b,GAAU,UAAWF,GAAcyB,UAAW5R,GAAc0vC,KAEpE,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBAlLxDx0B,IAAA,uBAAAN,MAAA,SAsLQ4yC,EACAiD,GAEA,IAAMW,EAAON,GACPzsC,GACF,IAAI+M,GAAU,OAAQF,GAAcyB,UAAW66B,EAAK1gB,aACpD,IAAI1b,GAAU,UAAWF,GAAcyB,UAAW5R,GAAc0vC,KAEpE,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBA9LxDx0B,IAAA,yBAAAN,MAAA,SAkMQ61C,GAEA,IAAMW,EAAON,GACPzsC,GACF,IAAI+M,GAAU,UAAWF,GAAcyB,UAAW5R,GAAc0vC,KAEpE,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBAxMxDx0B,IAAA,kBAAAN,MAAA,SA4MQ61C,GAEA,IAAMW,EAAON,GACPzsC,GACF,IAAI+M,GAAU,UAAWF,GAAcyB,UAAW5R,GAAc0vC,KAEpE,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBAlNxDx0B,IAAA,sBAAAN,MAAA,WAuNQ,OAAOg1B,GADMkhB,MAC0B7tC,KAAKysB,iBAvNpDx0B,IAAA,oBAAAN,MAAA,SA2NQ61C,GAEA,IAAMW,EAAON,GACPzsC,GACF,IAAI+M,GAAU,UAAWF,GAAcyB,UAAW5R,GAAc0vC,KAEpE,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBAjOxDx0B,IAAA,sBAAAN,MAAA,SAqOQm3B,GAEA,IAAMqf,EAAON,GACPzsC,GACF,IAAI+M,GAAU,UAAWF,GAAcyB,UAAWof,EAAQjF,cAE9D,OAAO8C,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBA3OxDx0B,IAAA,0BAAAN,MAAA,SA+OQm3B,GAEA,IAAMqf,EAAON,GACPzsC,GACF,IAAI+M,GAAU,UAAWF,GAAcyB,UAAWof,EAAQjF,cAE9D,OAAO8C,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,kBArPxDshB,EAAA,yPCrDA,IAAMU,GAAN,oBAAAC,iGAAAC,CAAA3uC,KAAA0uC,GA4DI1uC,KAAA4uC,aAAuB,GACvB5uC,KAAA6uC,sBAAgC,GAShC7uC,KAAA8uC,cACA9uC,KAAA+uC,YAvEJ,OAAAC,GAAAN,IAAAz2C,IAAA,aAAAN,MAAA,SA0Eem3B,GAAgB,IAAArrB,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IACvB,QAAA2F,EAAAC,EAAiB7D,KAAK+uC,SAAtBt3C,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAgC,CAC5B,GAD4BG,EAAAjM,MACrBmd,QAAQH,aAAema,EAAQha,QAAQH,WAC1C,QAHe,MAAA9S,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAMvB3D,KAAK+uC,SAASlzC,KAAKizB,MAhF3B72B,IAAA,cAAAN,MAAA,SAmFgBowC,GAAkB,IAAAl7B,GAAA,EAAAC,GAAA,EAAAC,OAAA9O,EAAA,IAC1B,QAAA+O,EAAAC,EAAmBjN,KAAK8uC,WAAxBr3C,OAAAqM,cAAA+I,GAAAG,EAAAC,EAAAlJ,QAAAC,MAAA6I,GAAA,EAAoC,CAChC,GADgCG,EAAArV,MACvB4c,QAAUwzB,EAASxzB,MACxB,QAHkB,MAAA1S,GAAAiL,GAAA,EAAAC,EAAAlL,EAAA,aAAAgL,GAAAI,EAAAhJ,QAAAgJ,EAAAhJ,SAAA,WAAA6I,EAAA,MAAAC,GAM1B/M,KAAK8uC,WAAWjzC,KAAKksC,MAzF7B9vC,IAAA,oBAAAN,MAAA,SA4FsBmd,GACd9U,KAAK6uC,sBAAwB/5B,KA7FrC7c,IAAA,qBAAAN,MAAA,SAgGuB4c,GACfvU,KAAK4uC,aAAer6B,KAjG5Btc,IAAA,SAAAN,MAAA,WAqGQ,OAAOmK,KAAKC,UAAU/B,KAAKouB,gBArGnCn2B,IAAA,YAAAN,MAAA,WA2HQ,OAXIV,KAAM+I,KAAK/I,KACX23C,aAAc5uC,KAAK4uC,aACnBC,sBAAuB7uC,KAAK6uC,sBAC5BI,WAAYjvC,KAAKivC,WACjB/nB,QAASlnB,KAAKknB,QACd/R,OAAQnV,KAAKmV,OACb25B,WAAY9uC,KAAK8uC,WAAW18B,IAAI,SAAC1b,GAAD,OAAOA,EAAE03B,cACzC2gB,SAAU/uC,KAAK+uC,SAAS38B,IAAI,SAAC9Q,GAAD,OAAOA,EAAE8sB,cACrCc,MAAO,SAxHnBj3B,IAAA,gBAAAN,MAAA,WA+HQ,MAAO,MA/HfM,IAAA,eAAAN,MAAA,WAuIQ,OADYqI,KAAKouB,iBAtIzBn2B,IAAA,YAAAN,MAAA,SAEqB+P,GACb,OAAOgnC,EAAO1f,aAAaltB,KAAKS,MAAMmF,OAH9CzP,IAAA,eAAAN,MAAA,SAawBs3B,GAChB,IAAMigB,EAAS,IAAIR,EAUnB,OATAQ,EAAOj4C,KAAOg4B,EAAIh4B,KAClBi4C,EAAON,aAAe3f,EAAI2f,aAC1BM,EAAOL,sBAAwB5f,EAAI4f,sBACnCK,EAAOD,WAAahgB,EAAIggB,WACxBC,EAAOhoB,QAAU+H,EAAI/H,QACrBgoB,EAAO/5B,OAAS8Z,EAAI9Z,OACpB+5B,EAAOJ,WAAa7f,EAAI6f,YAAe7f,EAAI6f,WAAqB18B,IAAI,SAAC1b,GAAD,OAAOgxC,GAAS1Y,aAAat4B,KACjGw4C,EAAOH,SAAW9f,EAAI8f,UAAa9f,EAAI8f,SAAmB38B,IAAI,SAAC9Q,GAAD,OAAO0sB,GAAQgB,aAAa1tB,KAC1F4tC,EAAOhgB,MAAQD,EAAIC,MACZggB,KAxBfj3C,IAAA,iBAAAN,MAAA,SA2B0Bs3B,GAElB,OADeyf,EAAO1f,aAAaC,MA5B3Ch3B,IAAA,SAAAN,MAAA,SA0CkBV,GACV,IAAMi4C,EAAS,IAAIR,EAanB,OAZAQ,EAAOj4C,KAAOA,EAGdi4C,EAAOD,YAAc,IAAI9sC,MAAQgtC,cACjCD,EAAOhoB,QAAU,MACjBgoB,EAAO/5B,QACHhd,EAAGW,EAAeC,KAClBvB,EAAGsB,EAAeE,UAClBR,EAAGM,EAAeG,SAClByc,MAAO5c,EAAeI,MAGnBg2C,MAxDfR,EAAA,yPCqCA,IAAMU,GAAQ94C,EAAQ,IAMhB+4C,GAAgB,2CAEhBC,GAAW,oCASXC,GAAN,oBAAAC,iGAAAC,CAAAzvC,KAAAwvC,GAAA,OAAAE,GAAAF,EAAA,OAAAv3C,IAAA,gBAAAN,MAAA,SAMyBg4C,GACjB,GAAIA,EAAM,CACN,IAAIxuC,EAAM,GAOV,OALIA,EADAwuC,EAAKvvC,QAAQ,SAAW,EAClBuvC,EAAK9xC,OAAO,UAAUjC,QAEtB+zC,OAEVH,EAAII,YAAczuC,GAItB,MAAM,IAAIxD,MAAM,eAAiBgyC,EAAO,qBAlBhD13C,IAAA,cAAAN,MAAA,SAqBuBk4C,GACf,GAAIA,EAGA,OAFAL,EAAIM,UAAYD,OAChBL,EAAIO,WAAa,IAAIlL,GAAJ,UAAyB2K,EAAII,YAA7B,IAA4CJ,EAAIM,YAIrE,MAAM,IAAInyC,MAAM,eAAiBkyC,EAAO,uBA5BhD53C,IAAA,gBAAAN,MAAA,SA+ByBk4C,GACjB,IAAIA,EAIJ,MAAM,IAAIlyC,MAAM,eAAiBkyC,EAAO,kBAHpCL,EAAIQ,YAAcH,KAjC9B53C,IAAA,kBAAAN,MAAA,SAuC2BkK,GACnB,OACIouC,MAAOt3C,EAAWse,eAClBtb,OAAQ,OA1CpB1D,IAAA,oBAAAN,MAAA,SA8C6B+2B,GACrB,OAAIrrB,GAASqrB,GACF7vB,OAAOC,KAAK4vB,EAAU,UAAUryB,WAEpCqyB,KAlDfz2B,IAAA,eAAAN,MAAA,SAqDwBV,EACAy3B,EAAkB5E,EAAeM,EAAkBC,EAAkBtpB,GACrF,IAAMmuC,EAAST,GAAOz2C,OAAOf,GAC7By3B,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAM9Y,EAAa0D,GAAWvW,SACxBglC,EAAWL,GAAS1vC,OAAO4d,EAAY8Y,EAAUz3B,GAEvDi4C,EAAON,aAAe7G,EAASxzB,MAC/B26B,EAAOiB,YAAYpI,GAMnB,IACI9Y,GACAghB,MAAO,EACPt0C,OAHkBuzC,EAAOpH,SAIzBnd,GAAK,IAGHrW,EAAYsB,EAAWkF,eACvB6P,EAAKmV,GAAqBiI,EAASxzB,MAAOD,EAAW8V,EAAUC,GAQrE,OAPAM,EAAGb,MAAQ,IAAI5V,GAAQ4V,GACvB+B,GAAgBlB,EAAI/U,GAEpBA,EAAW3d,IAAM,GACjBy2B,EAAW,GAEQ,IAAImW,GAAJ,UAAyB2K,EAAII,YAA7B,IAA4CJ,EAAIM,WACjDhL,mBAAmBna,EAAGd,aAAa,GAAMroB,KAAK,SAACC,GAE7D,GAA0B,OAAtBA,EAAI00B,OAAOA,OAOX,OALAlH,EAAItE,GAAKA,EAAGd,YAER9oB,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAExCkuB,EAEP,IAAMmhB,GACFH,MAAOt3C,EAAW03C,cAClB10C,OAAQ,IAMZ,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUquC,GAAYrvC,GAE9CqvC,IAEZxuC,MAAM,SAACC,GACNotB,GACIghB,MAAOt3C,EAAW23C,cAClB30C,OAAQ,IAGRoF,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,QA/G3D9I,IAAA,2BAAAN,MAAA,SAqHQwN,EACAypB,EACAF,EACA5Z,EACA+B,EACA9V,GAEA,IAAIkuB,OAAA,EACA8Y,EAAW,IAAIL,GACnB,IAEI,IAAM6I,EAAyB,IAAIj3B,GAAWsV,GACxC2b,EAAO,IAAIr2B,GAAQY,GACzB4Z,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClCqZ,EAAWL,GAAS8I,eAAerrC,EAAOorC,EAAwB7hB,EAAU6b,EAAM1zB,GACpF,MAAOhV,GAML,OALAotB,EAAOjvB,KAAKywC,gBAAgB5uC,GAExBd,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAExCkuB,EAEXA,GACIghB,MAAQt3C,EAAW+3C,QACnB/0C,OAASosC,EAASD,UAGtB,IACMj5B,EAAQ6e,GADH4S,GAAcyH,EAASxzB,QAG5BpT,EAAMwsB,GADN,UAAoB6hB,EAAII,YAAxB,IAAuCJ,EAAIM,WACR,GAGzC,OADAphB,EAAW,GACJrtB,EAAAC,EAAMC,KAAKJ,EAAK0N,GAAOrN,KAAK,SAACC,GAYhC,OAXeA,EAAI1C,KAAKo3B,OACbA,SAGPlH,EAAIghB,MAAQt3C,EAAWg4C,cACvB1hB,EAAItzB,OAAS,IAGboF,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAExCkuB,IACRrtB,MAAM,SAACC,GACNotB,GACIghB,MAAOt3C,EAAW23C,cAClB30C,OAAS,IAGToF,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,QA3K3D9I,IAAA,gCAAAN,MAAA,SAkLQwN,EACAypB,EACAF,EACA5Z,EACA+B,EACA9V,GAEA,IAAIgnC,EAAW,IAAIL,GACfuI,KACAhhB,OAAA,EACJ,IACIP,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAM6hB,EAAyB,IAAIj3B,GAAWsV,GACxC2b,EAAO,IAAIr2B,GAAQY,GACzBizB,EAAWL,GAAS8I,eAAerrC,EAAOorC,EAAwB7hB,EAAU6b,EAAM1zB,GAClF,IAAMq4B,EAAST,GAAOz2C,OAAO+vC,EAAS5iC,OACtC+pC,EAAON,aAAe7G,EAASxzB,MAC/B26B,EAAOiB,YAAYpI,GACnB,IAAM6I,EAAY1B,EAAOpH,SACzB7Y,GACIghB,MAAOt3C,EAAW+3C,QAClB/0C,OAAQi1C,GAGZ,IACM/hC,EAAQ6e,GADH4S,GAAcyH,EAASxzB,QAG5BpT,EAAMwsB,GADN,UAAoB6hB,EAAII,YAAxB,IAAuCJ,EAAIM,WACR,GACzC,OAAOzuC,EAAAC,EAAMC,KAAKJ,EAAK0N,GAAOrN,KAAK,SAACC,GAahC,OAZeA,EAAI1C,KAAKo3B,OACbA,SAGPlH,EAAIghB,MAAQt3C,EAAWg4C,cACvB1hB,EAAItzB,OAAS,IAGjB+yB,EAAW,GACP3tB,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAExCkuB,IACRrtB,MAAM,SAACC,GACNotB,GACIghB,MAAOt3C,EAAW23C,cAClB30C,OAAS,IAGToF,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,KAKrD,MAAOc,GAML,OALAouC,EAAQjwC,KAAKywC,gBAAgB5uC,GAEzBd,GACAD,GAAsBgB,KAAKC,UAAUkuC,GAAQlvC,GAE1C0vB,QAAQJ,OAAO4f,OA9OlCh4C,IAAA,iBAAAN,MAAA,SAkP0BwN,EAAeupB,EAAkB5E,EACjCM,EAAkBC,EAAkBtpB,GACtD,IAAM6U,EAAa0D,GAAWvW,SAC9B2rB,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAMqZ,EAAWL,GAAS1vC,OAAO4d,EAAY8Y,EAAUvpB,GACjDxJ,EAASosC,EAASD,SACpB7Y,GACAghB,MAAOt3C,EAAW+3C,QAClB/0C,SACAgvB,GAAK,IAGHrW,EAAYsB,EAAWkF,eACvB6P,EAAKmV,GAAqBiI,EAASxzB,MAAOD,EAAW8V,EAAUC,GAMrE,OALAM,EAAGb,MAAQ,IAAI5V,GAAQ4V,GACvB+B,GAAgBlB,EAAI/U,GACpB8Y,EAAW,GACX9Y,EAAW3d,IAAM,GACE,IAAI4sC,GAAJ,UAAyB2K,EAAII,YAA7B,IAA4CJ,EAAIM,WACjDhL,mBAAmBna,EAAGd,aAAa,GAAMroB,KAAK,SAACC,GAE7D,GAA0B,OAAtBA,EAAI00B,OAAOA,OAUX,OARAlH,EAAItE,GAAKA,EAAGd,YAER9oB,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAG/C6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACJO,EAEP,IAAMmhB,GACFH,MAAOt3C,EAAW03C,cAClB10C,OAAQ,IAMZ,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUquC,GAAYrvC,GAE9CqvC,IAEZxuC,MAAM,SAACC,GACNotB,GACIghB,MAAOt3C,EAAW23C,cAClB30C,OAAQ,IAGRoF,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,QApS3D9I,IAAA,gBAAAN,MAAA,SAySyBwN,EAAeupB,EAAkB3tB,GAElD,IAAI8a,EAAW/Y,KACf4rB,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAMmiB,EAAc7zC,GAAW6e,GACzBjG,EAAa0D,GAAWw3B,qBAAqBj1B,GAC7CiT,EAAUd,GAAQh2B,OAAO4d,EAAY8Y,EAAUvpB,GAG/C4rC,EAAct5B,GAAsBo5B,EAF7B/hB,EAAQha,QACRjW,OAAOC,KAAKgwB,EAAQjY,KAAM,UAAUxa,SAAS,OACSqyB,GAC7D/yB,EAASmzB,EAAQgZ,SACjB7Y,GACFghB,MAAQt3C,EAAW+3C,QACnB/0C,SACAo1C,eAUJ,OAPIhwC,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAG/C6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACX7S,EAAW,GACJoT,KAjUfh3B,IAAA,qBAAAN,MAAA,SAoU8Bo5C,EACAj8B,EAAiB+B,EAAc6X,EAAkB3tB,GACvE,IAAIkuB,EACJP,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAGMsiB,EAAS/zC,GADGkb,GAAsB44B,EAF3B,IAAI78B,GAAQY,GACTjW,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACeqyB,IAQpE,OANAO,GACIghB,MAAOt3C,EAAW+3C,QAClB/0C,OAAQq1C,GAGZjwC,GAAYD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAChDkuB,KAlVfh3B,IAAA,0BAAAN,MAAA,SAsVQwN,EACAypB,EACA9Z,EACA+B,EACA6X,EACA3tB,GAEA,IAAI+tB,EAAU,IAAId,GAClBU,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAM6hB,EAAyB,IAAIj3B,GAAWsV,GAC9C,IACI,IAAM2b,EAAO,IAAIr2B,GAAQY,GACzBga,EAAUd,GAAQijB,cAAc9rC,EAAOorC,EAAwB7hB,EAAU6b,EAAM1zB,GACjF,MAAOhV,GACL,IAAMlG,EAASqE,KAAKywC,gBAAgB5uC,GAIpC,OAHId,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,EAEX,IAAMszB,GACFghB,MAAOt3C,EAAW+3C,QAClB/0C,OAAQmzB,EAAQgZ,UAapB,OAVIhzB,IAAYga,EAAQha,QAAQH,aAC5Bsa,EAAIghB,MAAQt3C,EAAWoiB,aACvBkU,EAAItzB,OAAS,IAGboF,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAG/C2tB,EAAW,GACJO,KAzXfh3B,IAAA,gBAAAN,MAAA,SA6XQgvC,EACAuK,EACA38B,EACAqa,EACAF,EACA5Z,EACA+B,EACA9V,GAEA,IAAI6U,OAAA,EACJ8Y,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAM6hB,EAAyB,IAAIj3B,GAAWsV,GACxCd,EAAA,UAAoB0hB,EAAII,YAAxB,IAAuCJ,EAAIM,UAAY91C,EAASE,UACtE,IACI,IAAMqwC,EAAO,IAAIr2B,GAAQY,GACnBq8B,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrDuZ,EAAa26B,EAAuBx5B,QAAQ2X,EAAU6b,EAAM4G,GAC9D,MAAOtvC,GACL,IAAMlG,EAASqE,KAAKywC,gBAAgB5uC,GAKpC,OAHId,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,EAIX,IAAMsmC,GACF5E,OAAQ9oB,EACR+oB,QAAS/oB,EACT4uB,SAAUnhC,MAIRyW,EAAclE,EAAQ,UACtB68B,EAAQ,IAAI9L,GAAMrD,OAAUhkC,OAAWA,GAC7CmzC,EAAM72B,KAAKuT,EAASrV,EAAa7C,GACjC,IAAMqZ,GACFghB,MAAQ,EACRt0C,OAASy1C,GAQb,OANIrwC,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAG/C6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACJO,KA5afh3B,IAAA,6BAAAN,MAAA,SAgbQi3B,EACAF,EACA5Z,EACA+B,EACA9V,GAEA2tB,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAM6hB,EAAyB,IAAIj3B,GAAWsV,GAC1C3S,OAAA,EACJ,IACI,IAAMsuB,EAAO,IAAIr2B,GAAQY,GACnBq8B,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrD4f,EAAMs0B,EAAuBx5B,QAAQ2X,EAAU6b,EAAM4G,GACvD,MAAOtvC,GACL,IAAMlG,EAASqE,KAAKywC,gBAAgB5uC,GAKpC,OAHId,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,EAEX,IAAMszB,GACFghB,MAAQ,EACRt0C,OAASsgB,EAAIhkB,KAOjB,OALI8I,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAG/C2tB,EAAW,GACJO,KA9cfh3B,IAAA,WAAAN,MAAA,SAkdQylC,EACAuJ,EACAtJ,EACAC,EACA1O,EACAF,EACA5Z,EACA+B,EACAiT,EACAM,EACAC,EACAtpB,GAEA,IAAI6U,OAAA,EACJ8Y,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAM6hB,EAAyB,IAAIj3B,GAAWsV,GAC9C,IACI,IAAM2b,EAAO,IAAIr2B,GAAQY,GACnBq8B,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrDuZ,EAAa26B,EAAuBx5B,QAAQ2X,EAAU6b,EAAM4G,GAC9D,MAAOtvC,GACL,IAAMlG,EAASqE,KAAKywC,gBAAgB5uC,GAMpC,OAJId,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAG3CpF,EAEX,IAAM01C,EAAO,QAAUjU,EACjBkU,GACF3lB,KAAO,OACP5S,OACIw4B,QAAS5K,EACT7pB,OAAQugB,IAIV1lC,EAAQmK,KAAKC,UAAUuvC,GACvBjzB,EAAO,IAAImjB,GACjBnjB,EAAKpmB,IAAMo5C,EACXhzB,EAAK1d,KAAO,OACZ0d,EAAK1mB,MAAQA,EACb,IACMgzB,EAAKwV,GAAoB7C,GAAUjf,GADvBzI,EAAWkF,eAC8BsP,EAAUC,GAIrE,OAHAM,EAAGb,MAAQ,IAAI5V,GAAQ4V,GACvB+B,GAAgBlB,EAAI/U,GACD,IAAIivB,GAAJ,UAAyB2K,EAAII,YAA7B,IAA4CJ,EAAIM,WACjDhL,mBAAmBna,EAAGd,aAAa,GAAMroB,KAAK,SAACC,GAC7D,GAA0B,OAAtBA,EAAI00B,OAAOA,OAAiB,CAI5B,IAAMlH,GACFghB,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ,GACRgvB,GAAIA,EAAGd,aASX,OANI9oB,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAG/C6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACJO,EAEP,IAAMuiB,GACFvB,MAAOt3C,EAAW03C,cAClB10C,OAAQ,IAMZ,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUyvC,GAAMzwC,GAExCywC,IAGb5vC,MAAM,SAACC,GACL,IAAMotB,GACFghB,MAAOt3C,EAAW23C,cAClB30C,OAAQ,IAGRoF,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,QAviB3D9I,IAAA,WAAAN,MAAA,SA6iBQkvC,EACAjY,EACAF,EACA5Z,EACA+B,EACA9V,GAEA,IAAI6U,OAAA,EACJ8Y,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAM6hB,EAAyB,IAAIj3B,GAAWsV,GAC1CjzB,OAAA,EACJ,IACI,IAAM4uC,EAAO,IAAIr2B,GAAQY,GACnBq8B,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrDuZ,EAAa26B,EAAuBx5B,QAAQ2X,EAAU6b,EAAM4G,GAC9D,MAAOtvC,GAML,OALAlG,EAASqE,KAAKywC,gBAAgB5uC,GAE1Bd,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,EAWX,OARAA,EADkBia,EAAW2E,KAAKssB,GACf4K,eAEf1wC,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAGlD6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACJ/yB,KA7kBf1D,IAAA,aAAAN,MAAA,SAglBsBmd,EAAiB/T,GAC/B,IAAM2wC,EAAa,IAAIx9B,GAAQY,GACzB68B,EAAA,UAAoBnC,EAAII,YAAxB,IAAuCJ,EAAIM,UAAY91C,EAASC,WAAhE,IAA8Ey3C,EAAW/8B,WAC/F,OAAOtT,EAAAC,EAAM/J,IAAIo6C,GAASnwC,KAAK,SAACC,GAC5B,GAAuB,IAAnBA,EAAI1C,KAAKpB,MAAa,CACtB,IACMsxB,GACFghB,MAAQ,EACRt0C,OAHW8F,EAAI1C,KAAKo3B,QASxB,OAHIp1B,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAExCkuB,EAEP,IAAM2iB,GACF3B,MAAOxuC,EAAI1C,KAAKpB,MAChBhC,OAAS,IAMb,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAU6vC,GAAM7wC,GAExC6wC,IAEZhwC,MAAO,SAACC,GACP,IAAMotB,GACFghB,MAAOt3C,EAAW23C,cAClB30C,OAAQ,IAMZ,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAExC0vB,QAAQJ,OAAOpB,QAnnBlCh3B,IAAA,iBAAAN,MAAA,SAynBQk6C,EACA/yC,EACAixB,EACAp4B,EACAi3B,EACAF,EACA7X,EACAuT,EACAC,EACAP,EACA/oB,GAEA,IAAI+wC,OAAA,EACAC,OAAA,EACJrjB,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IACIojB,EAAc,IAAI59B,GAAQpV,GAC1BizC,EAAY,IAAI79B,GAAQ6b,GAC1B,MAAOluB,GACL,IAAMmwC,GACF/B,MAAQt3C,EAAWyK,eACnBzH,OAAS,IAMb,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUiwC,GAASjxC,GAE3CixC,EAGX,IAAIp8B,OAAA,EACE26B,EAAyB,IAAIj3B,GAAWsV,GAC9C,IACI,IAAM2b,EAAO,IAAIr2B,GAAQpV,GACnBqyC,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrDuZ,EAAa26B,EAAuBx5B,QAAQ2X,EAAU6b,EAAM4G,GAC9D,MAAOtvC,GACL,IAAMowC,EAASjyC,KAAKywC,gBAAgB5uC,GAIpC,OAHId,GACAD,GAAsBgB,KAAKC,UAAUkwC,GAASlxC,GAE3CkxC,EAGX,IAAMtnB,EAAKuhB,GAAe2F,EAAOC,EAAaC,EAAWp6C,EAAOyyB,EAAUC,GAC1EM,EAAGb,MAAQ,IAAI5V,GAAQ4V,GACvB+B,GAAgBlB,EAAI/U,GACpB,IAAMja,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ,GACRgvB,GAAIA,EAAGd,YACP+F,OAAQpxB,GAAWmsB,EAAG1hB,mBAM1B,OAJAlI,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE1D6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACJ/yB,KAlrBf1D,IAAA,WAAAN,MAAA,SAsrBQmd,EACAnd,EACAi3B,EACAF,EACA7X,EACAuT,EACAC,EACAP,EACA/oB,GAEA,IAAI2wC,OAAA,EACJhjB,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IACIgjB,EAAa,IAAIx9B,GAAQY,GAE3B,MAAOjT,GACL,IAAMqwC,GACFjC,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAMZ,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUmwC,GAASnxC,GAE3CmxC,EAGX,IAAIt8B,OAAA,EACE26B,EAAyB,IAAIj3B,GAAWsV,GAC9C,IACI,IAAMuiB,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrDuZ,EAAa26B,EAAuBx5B,QAAQ2X,EAAUgjB,EAAYP,GACpE,MAAOtvC,GACL,IAAMswC,EAASnyC,KAAKywC,gBAAgB5uC,GAIpC,OAHId,GACAD,GAAsBgB,KAAKC,UAAUowC,GAASpxC,GAE3CoxC,EAGX,IAAMxnB,EAAKyhB,GAAkBsF,EAAYA,EAAY/5C,EAAO,IAAIuc,GAAQ4V,GAAQM,EAAUC,GAC1FwB,GAAgBlB,EAAI/U,GACpB,IAAMja,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ,GACRgvB,GAAIA,EAAGd,YACP+F,OAAQpxB,GAAWmsB,EAAG1hB,mBAM1B,OAJAlI,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE1D6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACJ/yB,KA1uBf1D,IAAA,yBAAAN,MAAA,SA6uBkCy6C,EAAyBrxC,GACnD,IAAMkuB,EAAMyY,GAAS7K,UAAUuV,GAC3Bv7B,EAAOoY,EAAI2Y,SAAS,GAAG/wB,KACtBxT,GAASwT,KACVA,EAAOhY,OAAOC,KAAK+X,EAAM,OAAOxa,SAAS,WAE7C,IAAMV,GACFgF,KAAO,IACPwE,MAAQ8pB,EAAI9pB,MACZ5L,UAAY,QACZ4b,QACIhd,EAAI,KACJK,EAAI,EACJhB,EAAI,EACJke,MAAQ,IAEZzd,IAAMg3B,EAAI2Y,SAAS,GAAGlxB,aAAaze,IACnC4e,OACA/B,QAASma,EAAI2Y,SAAS,GAAG9yB,QAAQH,WACjCnb,YACIC,MAAQ,cAOhB,OAHIsH,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,KAxwBf1D,IAAA,4BAAAN,MAAA,SA2wBqCy6C,EAAyBrxC,GACtD,IAAMkuB,EAAMyY,GAAS7K,UAAUuV,GACzBt9B,EAAUma,EAAI2Y,SAAS,GAAG9yB,QAAQH,WAGlChZ,EAFOszB,EAAI2Y,SAAS,GAAG/wB,KAEP/B,EADVma,EAAI2Y,SAAS,GAAGlxB,aAAaze,IAMzC,OAHI8I,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,KArxBf1D,IAAA,wBAAAN,MAAA,SAwxBiC06C,EAAwBtxC,GACjD,IAAMkuB,EAAMjB,GAAQ6O,UAAUwV,GACxB12C,GACFgF,KAAM,IACNwE,MAAO8pB,EAAI9pB,MACX5L,UAAW,QACX4b,QACIhd,EAAG,KACHK,EAAG,EACHhB,EAAG,EACHke,MAAO,IAEXzd,IAAKg3B,EAAIvY,aAAaze,IACtB4e,KAAMoY,EAAIpY,KACV/B,QAASma,EAAIna,QAAQH,WACrBnb,YACIC,MAAO,cAOf,OAHIsH,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,KA/yBf1D,IAAA,2BAAAN,MAAA,SAkzBoC06C,EAAwBtxC,GACpD,IAAMkuB,EAAMjB,GAAQ6O,UAAUwV,GAIxB12C,EAHOszB,EAAIpY,KACDoY,EAAIna,QAAQH,WAChBsa,EAAIvY,aAAaze,IAM7B,OAHI8I,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,KA5zBf1D,IAAA,wBAAAN,MAAA,SA+zBiCwN,EAAe0W,EAAkB6S,EAAkB3tB,GAG5E,GAFA8a,EAAWA,EAASkT,OACpBL,EAAW1uB,KAAKkwC,kBAAkBxhB,IAC7B1rB,EAAA,iBAAuB6Y,GAAW,CAEnC,IAAMy2B,GACFrC,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAIZ,OADAoF,GAAYD,GAAsBgB,KAAKC,UAAUuwC,GAAMvxC,GAChDuxC,EAEX,IAAMt2B,EAAOhZ,EAAA,kBAAwB6Y,GAE/BI,EADQmzB,GAAMlzB,eAAerd,OAAOC,KAAKkd,EAAM,QACnCG,OAAOhhB,GACnBlD,EAAM4G,OAAOC,KAAKmd,EAAIrG,YAAYvZ,SAAS,OAC3CuZ,EAAa,IAAI0D,GAAWrhB,GAE5B0D,EADUqyB,GAAQh2B,OAAO4d,EAAY8Y,EAAUvpB,GAC9B2iC,SACjB7Y,GACFghB,MAAOt3C,EAAW+3C,QAClB/0C,UAUJ,OAPIoF,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAG/C6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACX7S,EAAW,GACJoT,KA/1Bfh3B,IAAA,sBAAAN,MAAA,SAk2B+B+e,EAAsBgY,EACtB5Z,EAAiB+B,EAAc9V,GACtD,GAAuB,KAAnB+T,EAAQlZ,QAAoC,KAAnBkZ,EAAQlZ,OAAe,CAChD,IAAMqzB,GACFghB,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAGZ,OADAoF,GAAYD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAChDkuB,EAEXP,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAMtY,EAAU,IAAIkD,GAAW5C,GACzB6zB,EAAO,IAAIr2B,GAAQY,GACnBq8B,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OAC/CuZ,EAAaQ,EAAQW,QAAQ2X,EAAU6b,EAAM4G,GAC/CoB,EAAM38B,EAAW48B,eACf72C,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ42C,GAOZ,OALAxxC,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE1D6U,EAAW3d,IAAM,GACjBs6C,EAAM,GACN7jB,EAAW,GACJ/yB,KA33Bf1D,IAAA,uBAAAN,MAAA,SA83BgCwN,EAAeotC,EAAa7jB,EAAkB3tB,GACtE,IAAI6U,OAAA,EACJ8Y,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IACI9Y,EAAa0D,GAAWm5B,eAAeF,GACzC,MAAO1wC,GACL,IAAMotB,GACFghB,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAGZ,OADAoF,GAAYD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAChDkuB,EAEX,IAAMH,EAAUd,GAAQh2B,OAAO4d,EAAY8Y,EAAUvpB,GAC/CxJ,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQmzB,EAAQgZ,UAMpB,OAJA/mC,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE1D6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACJ/yB,KAp5Bf1D,IAAA,8BAAAN,MAAA,SAu5BuCwN,EAAeyQ,EAAoB8Y,EAAkB3tB,GAGpF,GAFA6U,EAAaA,EAAWmZ,OACxBL,EAAW1uB,KAAKkwC,kBAAkBxhB,IAC7B9Y,GAAoC,KAAtBA,EAAWha,SAAkB0H,GAAYsS,GAAa,CACrE,IAAMqZ,GACFghB,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAGZ,OADAoF,GAAYD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAChDkuB,EAEX,IAAMhT,EAAM,IAAI3C,GAAW1D,GACrBkZ,EAAUd,GAAQh2B,OAAOikB,EAAKyS,EAAUvpB,GACxCxJ,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQmzB,EAAQgZ,UAMpB,OAJA/mC,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE1D6U,EAAa,GACb8Y,EAAW,GACJ/yB,KA56Bf1D,IAAA,4BAAAN,MAAA,SAk7BqC+6C,EAAkBhkB,EAAkB3tB,GACjE,IAAI4xC,OAAA,EACJjkB,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IACIikB,EAAc7wC,KAAKS,MAAMmwC,GAC3B,MAAO7wC,GACL,IAAMotB,GACFghB,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAGZ,OADAoF,GAAYD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAChDkuB,EAEX,GAAyB,MAArB0jB,EAAYhyC,KAAc,CAC1B,IAAMiyC,GACF3C,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAGZ,OADAoF,GAAYD,GAAsBgB,KAAKC,UAAU6wC,GAAM7xC,GAChD6xC,EAEP,IAAI9jB,EAAU,IAAId,GACZuiB,EAAyB,IAAIj3B,GAAWq5B,EAAY16C,KAC1D,IACI,IAAMmJ,GACFrI,KAAM45C,EAAYx9B,OAAOhd,GAAK,KAC9Ba,UAAW25C,EAAYx9B,OAAO3c,GAAK,EACnCS,SAAU05C,EAAYx9B,OAAO3d,GAAK,EAClC0B,KAAMy5C,EAAYx9B,OAAOO,OAAS,IAEhC60B,EAAO,IAAIr2B,GAAQy+B,EAAY79B,SACrCga,EAAUd,GAAQijB,cACd0B,EAAYxtC,MAAOorC,EAAwB7hB,EAAU6b,EAAMoI,EAAY97B,KAAMzV,GACjF,IAAMyxC,GACF5C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQmzB,EAAQgZ,UAOpB,OALI/mC,GACAD,GAAsBgB,KAAKC,UAAU8wC,GAAM9xC,GAG/C2tB,EAAW,GACJmkB,EACT,MAAOhxC,GACL,IAAMlG,EAASqE,KAAKywC,gBAAgB5uC,GAIpC,OAHId,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,MAl+BvB1D,IAAA,kBAAAN,MAAA,SAu+B2Bmd,EAAiB/T,GAEpC,OADmB,IAAI8jC,GAAJ,UAAyB2K,EAAII,YAA7B,IAA4CJ,EAAIM,WACjDgD,aAAa,MAAO,IAAI5+B,GAAQ03B,IAAe,IAAI13B,GAAQY,IAAUtT,KAAK,SAACC,GACzF,IAAM9F,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ8F,EAAI00B,QAKhB,OAHIp1B,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,IACRiG,MAAM,SAACC,GACN,IAAMlG,GACFs0C,MAAOpuC,EAAIlE,MACXhC,OAAQ,IAKZ,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,OA1/BnB1D,IAAA,8BAAAN,MAAA,SA8/BuCi4B,EAAgB7uB,GAE/C,OADmB,IAAI8jC,GAAJ,UAAyB2K,EAAII,YAA7B,IAA4CJ,EAAIM,WACjDiD,kBAAkBnjB,GAAQpuB,KAAK,SAACC,GAC9C,IAAMwtB,GACFghB,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ8F,GAKZ,OAHIV,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAExCkuB,IACRrtB,MAAM,SAACC,GACN,IAAMlG,GACFs0C,MAAOpuC,EAAIlE,MACXhC,OAAQ,IAKZ,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,OAjhCnB1D,IAAA,qBAAAN,MAAA,SAqhC8Bq7C,EAA8BC,EAAuBlyC,GAC3E,IAAMioB,EAAKltB,SAASk3C,EAAsB,IACtC9I,KACAgJ,KACAjD,EAAQt3C,EAAW+3C,QACvB,IAEIwC,GADAhJ,EAAMpoC,KAAKS,MAAM0wC,IACN7gC,IAAI,SAAC5Z,GAAD,OAAe8P,GAAUsF,eAAe,IAAI9N,GAAatH,MAC1E,MAAOqJ,GACLouC,EAAQt3C,EAAWyK,gBAEnB4lB,EAAI,GAAKkhB,EAAItuC,OAASotB,GAAKkhB,EAAItuC,OAAS,MACxCq0C,EAAQt3C,EAAWyK,gBAEvB,IAAI0R,EAAU,GACd,IACIA,EAAUZ,GAAQi/B,iBAAiBnqB,EAAGkqB,GAAMv+B,WAC9C,MAAO9S,GACLouC,EAAQt3C,EAAWyK,eAEvB,GAAIrC,EAAU,CACV,IAAMpF,GACFs0C,QACAt0C,OAAQmZ,GAEZhU,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAElD,OAAO+T,KAhjCf7c,IAAA,uBAAAN,MAAA,SAmjCgC2c,EAAmBvT,GAC3C,IAAMoL,EAAK7D,GAAUsF,eAAe,IAAI9N,GAAawU,IAC/CQ,EAAUZ,GAAQQ,WAAWvI,GAAIwI,WACjChZ,GACFs0C,MAAQt3C,EAAW+3C,QACnB/0C,OAAQmZ,GAKZ,OAHI/T,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3C+T,KA7jCf7c,IAAA,2BAAAN,MAAA,SAgkCoCm4B,EAAehxB,EAAcixB,EAAYxrB,EAAgB6lB,EACzDC,EAAkBtpB,GAC9C,IAAI+wC,OAAA,EACAC,OAAA,EACJ,IACID,EAAc,IAAI59B,GAAQpV,GAC1BizC,EAAY,IAAI79B,GAAQ6b,GAC1B,MAAOluB,GACL,IAAMuxC,GACFnD,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAMZ,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUqxC,GAASryC,GAE3CqyC,EAEX,IAAMzoB,EAAKuhB,GAAepc,EAAOgiB,EAAaC,EAAWxtC,EAAQ6lB,EAAUC,GAC3EM,EAAGb,MAAQgoB,EACX,IAAMn2C,GACFs0C,MAAOt3C,EAAW+3C,QAClB9gB,OAAQpxB,GAAWmsB,EAAG1hB,kBACtBoqC,OAAQ1oB,EAAGd,aAGf,OADA9oB,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GACnDpF,KA1lCf1D,IAAA,2BAAAN,MAAA,SA8lCQi3B,EACA9Z,EACA+B,EACA6X,EACAukB,EACAD,EACAM,EACAvyC,GACA2tB,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAI9Y,OAAA,EACE26B,EAAyB,IAAIj3B,GAAWsV,GAC9C,IACI,IAAM2b,EAAO,IAAIr2B,GAAQY,GACnBq8B,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrDuZ,EAAa26B,EAAuBx5B,QAAQ2X,EAAU6b,EAAM4G,GAC9D,MAAOtvC,GACL,IAAM0xC,EAASvzC,KAAKywC,gBAAgB5uC,GAIpC,OAHId,GACAD,GAAsBgB,KAAKC,UAAUwxC,GAASxyC,GAE3CwyC,EAEX,IAAMvqB,EAAIltB,SAASk3C,EAAsB,IACnCroB,EAAKV,GAAYpN,YAAYy2B,GAE7BpJ,EADOpoC,KAAKS,MAAM0wC,GACP7gC,IAAI,SAAC5Z,GAAD,OAAe,IAAI8P,GAAU9P,KAClD6zB,GAAO1B,EAAI3B,EAAGkhB,EAAKt0B,GACnB,IAAMja,GACFs0C,MAAOt3C,EAAW+3C,QAClB8C,WAAY7oB,EAAGd,aAGnB,OADA9oB,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GACnD4pB,KA9nCf1yB,IAAA,cAAAN,MAAA,SAqoCQmH,EACAixB,EACAp4B,EACAi3B,EACAF,EACA7X,EACA9V,EACAK,GAEAstB,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IAAM+kB,EAAO,IAAIv/B,GAAQ6b,GACnBwa,EAAO,IAAIr2B,GAAQpV,GACnB40C,EAAU9W,GAAQC,UAvpCf,y5BAwpCHpQ,EAAe,IAAIvY,GAAQ1V,GAAW6wC,KACtC9qC,EAASzI,SAASnE,EAAO,IACzBw2C,EAAOuF,EAAQnW,YAAY,YACjC4Q,EAAKl3C,KAAOk3C,EAAKl3C,KAAK+4B,cACtB,IAAIpa,OAAA,EACE26B,EAAyB,IAAIj3B,GAAWsV,GAC9C,IACI,IAAMuiB,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrDuZ,EAAa26B,EAAuBx5B,QAAQ2X,EAAU6b,EAAM4G,EAAS/vC,GACvE,MAAOS,GACL,IAAMlG,EAASqE,KAAKywC,gBAAgB5uC,GAIpC,OAHId,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,EAEX,IAAM6hC,EAAK,IAAIrvB,GAAU,OAAQF,GAAcyB,UAAW66B,EAAK1gB,aACzD4T,EAAK,IAAItvB,GAAU,KAAMF,GAAcyB,UAAW+jC,EAAK5pB,aACvD6T,EAAK,IAAIvvB,GAAU,QAASF,GAAcgC,QAtqCvC,IAsqCgD1L,GACzD4pC,EAAKwF,eAAenW,EAAIC,EAAIC,GAC5B,IAAM/S,EAAKwf,GAAcyJ,sBAAsBnnB,EAAc8d,EAAM4D,GAC7D31C,EAAI,IAAIoxC,GAKd,OAJApxC,EAAEwxC,UAAYJ,GAAQiK,mBAAmBlpB,EAAGpQ,KAAK3E,KACjDpd,EAAE4U,KAAOw8B,GAAQkK,kBAAkBl+B,EAAWkF,gBAC9C6P,EAAG4d,SAAW/vC,GAEP6wC,GAAOvE,mBAAmBwK,GAAU3kB,EAAGd,aAAaroB,KAAK,SAACC,GAC7D,IAAM9F,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ,IASZ,OAPI8F,EAAI9F,QACJA,EAAOA,OAAS6C,GAAWmsB,EAAGqS,WAC9Bj8B,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,KAE1DpF,EAAOs0C,MAAQt3C,EAAW23C,cAC1BvvC,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,IAEvDpF,OAxrCnB1D,IAAA,gBAAAN,MAAA,SA4rCyBmd,EAAiB/T,GAClC,IAAM0rB,EAAe,IAAIvY,GAAQ1V,GAAW6wC,KACtC9E,EAAO,IAAIr2B,GAAQY,GACzB,OAAOu0B,GAAOpvC,WAAWq1C,GAAU7iB,EAAc8d,GAAM/oC,KAAK,SAACC,GACzD,IAAM9F,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ,GAEZ,GAAI8F,EAAI9F,OAAQ,CACZ,IAAMyI,EAAUtI,SAAS0C,GAAWiD,EAAI9F,QAAS,IACjDA,EAAOA,OAASyI,EAGpB,OADArD,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GACnDpF,OAzsCnB1D,IAAA,kBAAAN,MAAA,SA6sC2B07C,EAAgBtyC,GAEnC,OADmB,IAAI8jC,GAAJ,UAAyB2K,EAAII,YAA7B,IAA4CJ,EAAIM,WACjDhL,mBAAmBuO,GAAQ7xC,KAAK,SAACC,GAC/C,IAAMwtB,GACFghB,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ8F,GAKZ,OAHIV,GACAD,GAAsBgB,KAAKC,UAAUktB,GAAMluB,GAExCkuB,IACRrtB,MAAM,SAACC,GACN,IAAMlG,GACFs0C,MAAOpuC,EAAIlE,MACXhC,OAAQ,IAKZ,OAHIoF,GACAD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE3CpF,OAhuCnB1D,IAAA,mBAAAN,MAAA,SAsuCQo8C,EACAjlB,EACA0e,EACAzsC,GAEA,IAAM0rB,EAAe,IAAIvY,GAAQ1V,GAAWu1C,IACtCC,EAAO,IAAIlG,GAAcrhB,GACzB8d,EAAO,IAAIr2B,GAAQ4a,GACnBnE,EAAKqpB,EAAKC,qBAAqB1J,EAAMiD,GAC3C,OAAOgC,EAAIO,WAAWjL,mBAAmBna,EAAGd,aAAa,GAAMroB,KAAK,SAACC,GACjE,IAAM9F,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ,GAMZ,OAJI8F,EAAI00B,OAAOA,SACXx6B,EAAOA,OAASG,SAAS0C,GAAWiD,EAAI00B,OAAOA,QAAS,KAE5Dp1B,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GACnDpF,OAxvCnB1D,IAAA,oBAAAN,MAAA,SA6vCQo8C,EACAjlB,EACA/tB,GAEA,IAAM0rB,EAAe,IAAIvY,GAAQ1V,GAAWu1C,IACtCC,EAAO,IAAIlG,GAAcrhB,GACzB8d,EAAO,IAAIr2B,GAAQ4a,GACnBnE,EAAKqpB,EAAKE,oBAAoB3J,GACpC,OAAOiF,EAAIO,WAAWjL,mBAAmBna,EAAGd,aAAa,GAAMroB,KAAK,SAACC,GACjE,IAAM9F,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,QAAS,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAElC,GAAI8F,EAAI00B,OAAOA,OAAQ,CACnB,IAAMge,EAAO1yC,EAAI00B,OAAOA,OAAO/jB,IAAI,SAAC7U,GAAD,OAAeA,EAAIzB,SAAS0C,GAAWjB,GAAI,IAAM,IACpF5B,EAAOA,OAASw4C,EAGpB,OADApzC,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GACnDpF,OA/wCnB1D,IAAA,wBAAAN,MAAA,SAoxCQo8C,EACAjlB,EACA/tB,GAEA,IAAM0rB,EAAe,IAAIvY,GAAQ1V,GAAWu1C,IACtCC,EAAO,IAAIlG,GAAcrhB,GACzB8d,EAAO,IAAIr2B,GAAQ4a,GACnBnE,EAAKqpB,EAAKI,wBAAwB7J,GACxC,OAAOiF,EAAIO,WAAWjL,mBAAmBna,EAAGd,aAAa,GAAMroB,KAAK,SAACC,GACjE,IAAM9F,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ,GAMZ,OAJI8F,EAAI00B,OAAOA,SACXx6B,EAAOA,OAASG,SAAS0C,GAAWiD,EAAI00B,OAAOA,QAAS,KAE5Dp1B,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GACnDpF,OAryCnB1D,IAAA,eAAAN,MAAA,SA0yCQo8C,EACAj1C,EACAixB,EACAp4B,EACA61C,EACA5e,EACAF,EACA7X,EACAuT,EACAC,EACAP,EACA/oB,GAEA,IAAI+wC,OAAA,EACAC,OAAA,EACAsC,OAAA,EACJ3lB,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IACIojB,EAAc,IAAI59B,GAAQpV,GAC1BizC,EAAY,IAAI79B,GAAQ6b,GACxBskB,EAAe,IAAIngC,GAAQ4V,GAC7B,MAAOjoB,GAKL,OAHIouC,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAKhB,IAAIia,OAAA,EACE26B,EAAyB,IAAIj3B,GAAWsV,GAC9C,IACI,IAAM2b,EAAO,IAAIr2B,GAAQpV,GACnBqyC,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrDuZ,EAAa26B,EAAuBx5B,QAAQ2X,EAAU6b,EAAM4G,GAC9D,MAAOtvC,GAEL,OADe7B,KAAKywC,gBAAgB5uC,GAGxC,IAAM4qB,EAAe,IAAIvY,GAAQ1V,GAAWu1C,IAEtCppB,EADO,IAAImjB,GAAcrhB,GACf6nB,eAAexC,EAAaC,EAAWvE,EAAS71C,EAAOyyB,EAAUC,EAAUgqB,GAC3FxoB,GAAgBlB,EAAI/U,GACpB,IAAMja,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ,GACRgvB,GAAIA,EAAGd,YACP+F,OAAQpxB,GAAWmsB,EAAG1hB,mBAM1B,OAJAlI,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE1D6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACJ/yB,KA/1Cf1D,IAAA,eAAAN,MAAA,SAm2CQo8C,EACAjlB,EACA0f,EACA5f,EACAF,EACA7X,EACAuT,EACAC,EACAP,EACA/oB,GAEA,IAAIwpC,OAAA,EACJ7b,EAAW1uB,KAAKkwC,kBAAkBxhB,GAClC,IACI6b,EAAO,IAAIr2B,GAAQ4a,GACrB,MAAOjtB,GAKL,OAHIouC,MAAOt3C,EAAWyK,eAClBzH,OAAQ,IAKhB,IAAIia,OAAA,EACE26B,EAAyB,IAAIj3B,GAAWsV,GAC9C,IACI,IAAMuiB,EAAUtyC,OAAOC,KAAK+X,EAAM,UAAUxa,SAAS,OACrDuZ,EAAa26B,EAAuBx5B,QAAQ2X,EAAU6b,EAAM4G,GAC9D,MAAOtvC,GAEL,OADe7B,KAAKywC,gBAAgB5uC,GAGxC,IAAM4qB,EAAe,IAAIvY,GAAQ1V,GAAWu1C,IAEtCppB,EADO,IAAImjB,GAAcrhB,GACf8nB,eAAehK,EAAMiE,EAAapkB,EAAUC,EAAUkgB,GACtE1e,GAAgBlB,EAAI/U,GACpB,IAAMja,GACFs0C,MAAOt3C,EAAW+3C,QAClB/0C,OAAQ,GACRgvB,GAAIA,EAAGd,YACP+F,OAAQpxB,GAAWmsB,EAAG1hB,mBAM1B,OAJAlI,GAAYD,GAAsBgB,KAAKC,UAAUpG,GAASoF,GAE1D6U,EAAW3d,IAAM,GACjBy2B,EAAW,GACJ/yB,MAj5Cf6zC,EAAA,GACWD,GAAAK,YAAsBj2C,EACtB41C,GAAAO,UAAoBj2C,EACpB01C,GAAAS,YAAsBl2C,EACtBy1C,GAAAQ,WAAyB,IAAIlL,wnBCrDxC,IAMM2P,GAAkB,IAAItgC,GANA,4CAwBtB,SAAAugC,GACFlgC,EACAmgC,EACAC,EACAC,EACAC,EACA/qB,EACAM,EACAC,GAEAnnB,GAAkB2xC,GACS,QAAvBtgC,EAAM1W,OAAO,EAAG,KAChB0W,EAAQvX,GAAWuX,IAEvB,IAAMwrB,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAIjhB,GAAW03C,GAAaE,EAAS/qB,YAAagrB,EAAStgC,EAAOogC,GAElEpoB,GAAqB,oBADbsS,IAAuBkB,IACmByU,GACxBpqB,EAAUC,EAAUP,GAWnD,SAAAgrB,GACFF,EACAF,EACA5qB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAIjhB,GAAW03C,GAAaE,EAAS/qB,aAErC0C,GAAqB,sBADbsS,IAAuBkB,IACqByU,GAAiBpqB,EAAUC,EAAUP,GAU9F,SAAAirB,GACFL,EACA5qB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAIjhB,GAAW03C,IAEfnoB,GAAqB,mBADbsS,IAAuBkB,IACkByU,GACvBpqB,EAAUC,EAAUP,GAUnD,SAAAkrB,GACFN,EACA5qB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAIjhB,GAAW03C,IAEfnoB,GAAqB,kBADbsS,IAAuBkB,IACiByU,GACnDpqB,EAAUC,EAAUP,GActB,SAAAmrB,GACFL,EACAM,EACAC,EACArrB,EACAM,EACAC,GAEA,GAAI6qB,EAAYt5C,SAAWu5C,EAAQv5C,OAC/B,MAAMjD,EAAWyK,eAErB,IAAM28B,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAI22B,EAAS/qB,aACpBkW,EAAO9hB,IAAIi3B,EAAYt5C,QAPP,IAAA6H,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAQhB,QAAA2F,EAAAC,EAAgBqxC,EAAhBz9C,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA6B,KAAlBjL,EAAkBoL,EAAAjM,MACzBooC,EAAO9hB,IAAIjhB,GAAWxE,KATV,MAAAqJ,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAWhBo8B,EAAO9hB,IAAIk3B,EAAQv5C,QAXH,IAAAiR,GAAA,EAAAC,GAAA,EAAAC,OAAA9O,EAAA,IAYhB,QAAA+O,EAAAC,EAAgBkoC,EAAhB19C,OAAAqM,cAAA+I,GAAAG,EAAAC,EAAAlJ,QAAAC,MAAA6I,GAAA,EAAyB,KAAd1U,EAAc6U,EAAArV,MACrBooC,EAAO9hB,IAAI9lB,IAbC,MAAA0J,GAAAiL,GAAA,EAAAC,EAAAlL,EAAA,aAAAgL,GAAAI,EAAAhJ,QAAAgJ,EAAAhJ,SAAA,WAAA6I,EAAA,MAAAC,GAgBhB,OAAOwf,GAAqB,cADbsS,IAAuBkB,IACayU,GAChDpqB,EAAUC,EAAUP,GAYrB,SAAAsrB,GACFR,EACAM,EACAC,EACArrB,EACAM,EACAC,GAEA,GAAI6qB,EAAYt5C,SAAWu5C,EAAQv5C,OAC/B,MAAMjD,EAAWyK,eAErB,IAAM28B,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAI22B,EAAS/qB,aACpBkW,EAAO9hB,IAAIi3B,EAAYt5C,QAPP,IAAA0U,GAAA,EAAAC,GAAA,EAAAC,OAAAvS,EAAA,IAQhB,QAAAwS,EAAAC,EAAgBwkC,EAAhBz9C,OAAAqM,cAAAwM,GAAAG,EAAAC,EAAA3M,QAAAC,MAAAsM,GAAA,EAA6B,KAAlB9X,EAAkBiY,EAAA9Y,MACzBooC,EAAO9hB,IAAIjhB,GAAWxE,KATV,MAAAqJ,GAAA0O,GAAA,EAAAC,EAAA3O,EAAA,aAAAyO,GAAAI,EAAAzM,QAAAyM,EAAAzM,SAAA,WAAAsM,EAAA,MAAAC,GAWhBuvB,EAAO9hB,IAAIk3B,EAAQv5C,QAXH,IAAA2V,GAAA,EAAAC,GAAA,EAAAC,OAAAxT,EAAA,IAYhB,QAAAyT,EAAAC,EAAgBwjC,EAAhB19C,OAAAqM,cAAAyN,GAAAG,EAAAC,EAAA5N,QAAAC,MAAAuN,GAAA,EAAyB,KAAdpZ,EAAcuZ,EAAA/Z,MACrBooC,EAAO9hB,IAAI9lB,IAbC,MAAA0J,GAAA2P,GAAA,EAAAC,EAAA5P,EAAA,aAAA0P,GAAAI,EAAA1N,QAAA0N,EAAA1N,SAAA,WAAAuN,EAAA,MAAAC,GAgBhB,OAAO8a,GAAqB,gBADbsS,IAAuBkB,IACeyU,GAChDpqB,EAAUC,EAAUP,GAUvB,SAAAurB,GACFT,EACAM,EACAI,EACAxrB,EACAM,EACAC,GAEA,GAAI6qB,EAAYt5C,SAAW05C,EAAa15C,OACpC,MAAMjD,EAAWyK,eAErB,IAAM28B,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAI22B,EAAS/qB,aACpBkW,EAAO9hB,IAAIi3B,EAAYt5C,QAPP,IAAAmW,GAAA,EAAAC,GAAA,EAAAC,OAAAhU,EAAA,IAQhB,QAAAiU,EAAAC,EAAgB+iC,EAAhBz9C,OAAAqM,cAAAiO,GAAAG,EAAAC,EAAApO,QAAAC,MAAA+N,GAAA,EAA6B,KAAlBvZ,EAAkB0Z,EAAAva,MACzBooC,EAAO9hB,IAAIjhB,GAAWxE,KATV,MAAAqJ,GAAAmQ,GAAA,EAAAC,EAAApQ,EAAA,aAAAkQ,GAAAI,EAAAlO,QAAAkO,EAAAlO,SAAA,WAAA+N,EAAA,MAAAC,GAWhB8tB,EAAO9hB,IAAIq3B,EAAa15C,QAXR,IAAAyW,GAAA,EAAAC,GAAA,EAAAC,OAAAtU,EAAA,IAYhB,QAAAuU,EAAAC,EAAgB6iC,EAAhB79C,OAAAqM,cAAAuO,GAAAG,EAAAC,EAAA1O,QAAAC,MAAAqO,GAAA,EAA8B,KAAnB2N,EAAmBxN,EAAA7a,MAC1BooC,EAAO9hB,IAAI+B,IAbC,MAAAne,GAAAyQ,GAAA,EAAAC,EAAA1Q,EAAA,aAAAwQ,GAAAI,EAAAxO,QAAAwO,EAAAxO,SAAA,WAAAqO,EAAA,MAAAC,GAgBhB,OAAOga,GAAqB,WADbsS,IAAuBkB,IACUyU,GAC5CpqB,EAAUC,EAAUP,GAMtB,SAAAyrB,GACFX,EACAF,EACA5qB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAIjhB,GAAW03C,GAAaE,EAAS/qB,aAErC0C,GAAqB,WADbsS,IAAuBkB,IACUyU,GAAiBpqB,EAAUC,EAAUP,GAYnF,SAAA0rB,GACFd,EACAE,EACAa,EACA3rB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAIjhB,GAAW03C,GAAaE,EAAS/qB,YAAa4rB,GAElDlpB,GAAqB,yBADbsS,IAAuBkB,IACwByU,GAAiBpqB,EAAUC,EAAUP,GAYjG,SAAA4rB,GACFhB,EACAE,EACAe,EACA7rB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAIjhB,GAAW03C,GAAaE,EAAS/qB,YAAa8rB,GAElDppB,GAAqB,cADbsS,IAAuBkB,IACayU,GAAiBpqB,EAAUC,EAAUP,GAUtF,SAAA8rB,GACFhB,EACA9qB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAI22B,EAAS/qB,aAEb0C,GAAqB,cADbsS,IAAuBkB,IACayU,GAAiBpqB,EAAUC,EAAUP,GAYtF,SAAA+rB,GACFjB,EACAkB,EACAX,EACArrB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAI22B,EAAS/qB,aACpBkW,EAAO9hB,IAAI63B,EAAel6C,QAJV,IAAA6X,GAAA,EAAAC,GAAA,EAAAC,OAAA1V,EAAA,IAKhB,QAAA2V,EAAAC,EAAgBiiC,EAAhBr+C,OAAAqM,cAAA2P,GAAAG,EAAAC,EAAA9P,QAAAC,MAAAyP,GAAA,EAAgC,KAArBjb,EAAqBob,EAAAjc,MAC5BooC,EAAO9hB,IAAIjhB,GAAWxE,KANV,MAAAqJ,GAAA6R,GAAA,EAAAC,EAAA9R,EAAA,aAAA4R,GAAAI,EAAA5P,QAAA4P,EAAA5P,SAAA,WAAAyP,EAAA,MAAAC,GAQhBosB,EAAO9hB,IAAIk3B,EAAQv5C,QARH,IAAAm6C,GAAA,EAAAC,GAAA,EAAAC,OAAAh4C,EAAA,IAShB,QAAAi4C,EAAAC,EAAgBhB,EAAhB19C,OAAAqM,cAAAiyC,GAAAG,EAAAC,EAAApyC,QAAAC,MAAA+xC,GAAA,EAAyB,KAAd/1B,EAAck2B,EAAAv+C,MACrBooC,EAAO9hB,IAAI+B,IAVC,MAAAne,GAAAm0C,GAAA,EAAAC,EAAAp0C,EAAA,aAAAk0C,GAAAI,EAAAlyC,QAAAkyC,EAAAlyC,SAAA,WAAA+xC,EAAA,MAAAC,GAahB,OAAO1pB,GAAqB,mBADbsS,IAAuBkB,IACkByU,GAAiBpqB,EAAUC,EAAUP,GAM3F,SAAAssB,GACFxB,EACAkB,EACAX,EACArrB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GACnB6sB,EAAO9hB,IAAI22B,EAAS/qB,aACpBkW,EAAO9hB,IAAI63B,EAAel6C,QAJV,IAAAy6C,GAAA,EAAAC,GAAA,EAAAC,OAAAt4C,EAAA,IAKhB,QAAAu4C,EAAAC,EAAgBX,EAAhBr+C,OAAAqM,cAAAuyC,GAAAG,EAAAC,EAAA1yC,QAAAC,MAAAqyC,GAAA,EAAgC,KAArB79C,EAAqBg+C,EAAA7+C,MAC5BooC,EAAO9hB,IAAIjhB,GAAWxE,KANV,MAAAqJ,GAAAy0C,GAAA,EAAAC,EAAA10C,EAAA,aAAAw0C,GAAAI,EAAAxyC,QAAAwyC,EAAAxyC,SAAA,WAAAqyC,EAAA,MAAAC,GAQhBxW,EAAO9hB,IAAIk3B,EAAQv5C,QARH,IAAA86C,GAAA,EAAAC,GAAA,EAAAC,OAAA34C,EAAA,IAShB,QAAA44C,EAAAC,EAAgB3B,EAAhB19C,OAAAqM,cAAA4yC,GAAAG,EAAAC,EAAA/yC,QAAAC,MAAA0yC,GAAA,EAAyB,KAAd12B,EAAc62B,EAAAl/C,MACrBooC,EAAO9hB,IAAI+B,IAVC,MAAAne,GAAA80C,GAAA,EAAAC,EAAA/0C,EAAA,aAAA60C,GAAAI,EAAA7yC,QAAA6yC,EAAA7yC,SAAA,WAAA0yC,EAAA,MAAAC,GAahB,OAAOrqB,GAAqB,qBADbsS,IAAuBkB,IACoByU,GAAiBpqB,EAAUC,EAAUP,GAY7F,SAAAitB,GACFC,EACApC,EACAh1C,EACAkqB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAIjhB,GAAWg6C,GAAapC,EAAS/qB,YAAajqB,GAElD2sB,GAAqB,aADbsS,IAAuBkB,IACYyU,GAAiBpqB,EAAUC,EAAUP,GAYrF,SAAAmtB,GACFD,EACApC,EACAh1C,EACAkqB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAIjhB,GAAWg6C,GAAapC,EAAS/qB,YAAajqB,GAElD2sB,GAAqB,gBADbsS,IAAuBkB,IACeyU,GAAiBpqB,EAAUC,EAAUP,GAGxF,SAAAotB,GACFtC,EACA9qB,EACAM,EACAC,GAEA,IAAM0V,EAAS,IAAI7sB,GAGnB,OAFA6sB,EAAO9hB,IAAI22B,EAAS/qB,aAEb0C,GAAqB,cADbsS,IAAuBkB,IACayU,GAAiBpqB,EAAUC,EAAUP,GAQ5F,IAAAwV,GAAA,eAAAxlB,EAAAq9B,GAAAn9B,mBAAAC,KAAO,SAAAC,EAA6Bw6B,EAAoBvzC,GAAjD,IAAA4uC,EAAAlgB,EAAA53B,EAAAwJ,EAAA9F,EAAA,OAAAqe,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAArW,MAAA,cACGgsC,EAAa,IAAIlL,GAAW1jC,GAC5B0uB,EAAW2kB,GAAgB7K,cAC3B1xC,EAAM+E,GA7ZQ,kBA6ZsB03C,EAHvCt6B,EAAArW,KAAA,EAIegsC,EAAWqH,WAAWvnB,EAAU53B,GAJ/C,UAIGwJ,EAJH2Y,EAAAqP,OAKG9tB,EAAS8F,EAAI00B,QALhB,CAAA/b,EAAArW,KAAA,gBAAAqW,EAAAE,OAAA,SAOQ+8B,GAAex6B,YAAY,IAAI/c,GAAanE,KAPpD,eAAAye,EAAAE,OAAA,SASQ,IAAI+8B,IATZ,yBAAAj9B,EAAA3a,SAAAya,EAAAla,SAAP,gBAAAwa,EAAAC,GAAA,OAAAX,EAAApd,MAAAsD,KAAAhC,YAAA,GAkBAs5C,GAAA,eAAAhiB,EAAA6hB,GAAAn9B,mBAAAC,KAAO,SAAAsb,EAAkCzgB,EAAkB3T,GAApD,IAAA4uC,EAAAlgB,EAAA53B,EAAAwJ,EAAA9F,EAAA,OAAAqe,mBAAAG,KAAA,SAAAyb,GAAA,cAAAA,EAAAvb,KAAAub,EAAA7xB,MAAA,cACGgsC,EAAa,IAAIlL,GAAW1jC,GAC5B0uB,EAAW2kB,GAAgB7K,cAC3B1xC,EAAM+E,GA9aU,mBA8asB8X,EAAQ+U,YAHjD+L,EAAA7xB,KAAA,EAIegsC,EAAWqH,WAAWvnB,EAAU53B,GAJ/C,UAIGwJ,EAJHm0B,EAAAnM,OAKG9tB,EAAS8F,EAAI00B,QALhB,CAAAP,EAAA7xB,KAAA,gBAAA6xB,EAAAtb,OAAA,SAOQi9B,GAAgB16B,YAAY,IAAI/c,GAAanE,KAPrD,eAAAi6B,EAAAtb,OAAA,SASQ,IAAIi9B,IATZ,yBAAA3hB,EAAAn2B,SAAA81B,EAAAv1B,SAAP,gBAAA0a,EAAA8Z,GAAA,OAAAc,EAAA54B,MAAAsD,KAAAhC,YAAA,GAmBAw5C,GAAA,eAAA3hB,EAAAshB,GAAAn9B,mBAAAC,KAAO,SAAA6b,EAAgC4e,EAAoB5/B,EAAkB3T,GAAtE,IAAA4uC,EAAAlgB,EAAA53B,EAAAwJ,EAAA9F,EAAA,OAAAqe,mBAAAG,KAAA,SAAA+b,GAAA,cAAAA,EAAA7b,KAAA6b,EAAAnyB,MAAA,cACGgsC,EAAa,IAAIlL,GAAW1jC,GAC5B0uB,EAAW2kB,GAAgB7K,cAC3B1xC,EAAM+E,GAhcY,gBAgcsB03C,EAAa5/B,EAAQ+U,YAHhEqM,EAAAnyB,KAAA,EAIegsC,EAAWqH,WAAWvnB,EAAU53B,GAJ/C,UAIGwJ,EAJHy0B,EAAAzM,OAKG9tB,EAAS8F,EAAI00B,QALhB,CAAAD,EAAAnyB,KAAA,gBAAAmyB,EAAA5b,OAAA,SAOQm9B,GAAc56B,YAAY,IAAI/c,GAAanE,KAPnD,eAAAu6B,EAAA5b,OAAA,SASQ,IAAIm9B,IATZ,yBAAAvhB,EAAAz2B,SAAAq2B,EAAA91B,SAAP,gBAAAikC,EAAAc,EAAAC,GAAA,OAAAnP,EAAAn5B,MAAAsD,KAAAhC,YAAA,GAiBA05C,GAAA,eAAAphB,EAAA6gB,GAAAn9B,mBAAAC,KAAO,SAAAsc,EAAiCp1B,GAAjC,IAAA4uC,EAAAlgB,EAAA53B,EAAA0/C,EAAAC,EAAAC,EAAA,OAAA79B,mBAAAG,KAAA,SAAAqc,GAAA,cAAAA,EAAAnc,KAAAmc,EAAAzyB,MAAA,cACGgsC,EAAa,IAAIlL,GAAW1jC,GAC5B0uB,EAAW2kB,GAAgB7K,cAC3B1xC,EAAM+E,GAAW,kBAHpBw5B,EAAAzyB,KAAA,EAImBgsC,EAAWqH,WAAWvnB,EAAU53B,GAJnD,cAIG0/C,EAJHnhB,EAAA/M,KAKGmuB,EAAOD,EAAQxhB,OACf0hB,EAAiBC,GAAej7B,YAAY,IAAI/c,GAAa83C,IANhEphB,EAAAlc,OAAA,SAOIu9B,GAPJ,wBAAArhB,EAAA/2B,SAAA82B,EAAAv2B,SAAP,gBAAAklC,GAAA,OAAA5O,EAAA55B,MAAAsD,KAAAhC,YAAA,GAcA+5C,GAAA,eAAArhB,EAAAygB,GAAAn9B,mBAAAC,KAAO,SAAA0c,EAA8Bx1B,GAA9B,IAAA4uC,EAAAlgB,EAAAgoB,EAAAG,EAAAC,EAAAC,EAAAz2C,EAAAqI,EAAAlO,EAAAD,EAAAjF,EAAA8B,EAAA,OAAAwhB,mBAAAG,KAAA,SAAAyc,GAAA,cAAAA,EAAAvc,KAAAuc,EAAA7yB,MAAA,cACGgsC,EAAa,IAAIlL,GAAW1jC,GAC5B0uB,EAAW2kB,GAAgB7K,cAF9B/S,EAAA7yB,KAAA,EAG0B2zC,GAAkBv2C,GAH5C,cAGG02C,EAHHjhB,EAAAnN,KAIGuuB,EAAOh7C,GAAW,YAClBi7C,EAAOn6C,GAAc+5C,EAAeD,KAAM,GAAG,GAC7CM,EAAOF,EAAOC,EANjBrhB,EAAA7yB,KAAA,GAOegsC,EAAWqH,WAAWvnB,EAAUqoB,GAP/C,QAWH,IAJMz2C,EAPHm1B,EAAAnN,KAQG3f,EAAK,IAAIhK,GAAa2B,EAAI00B,QAC1Bv6B,EAASkO,EAAGquC,UACZx8C,KACGjF,EAAI,EAAGA,EAAIkF,EAAQlF,IAClB8B,EAAI4/C,GAAav7B,YAAY/S,GACnCnO,EAAOnD,EAAEw+C,YAAcx+C,EAbxB,OAAAo+B,EAAAtc,OAAA,SAeI3e,GAfJ,yBAAAi7B,EAAAn3B,SAAAk3B,EAAA32B,SAAP,gBAAAmlC,GAAA,OAAAzO,EAAAh6B,MAAAsD,KAAAhC,YAAA,GAkBAq6C,GAAA,eAAAvhB,EAAAqgB,GAAAn9B,mBAAAC,KAAO,SAAA8c,EAA8B51B,GAA9B,IAAA4uC,EAAAlgB,EAAA53B,EAAAwJ,EAAA,OAAAuY,mBAAAG,KAAA,SAAA6c,GAAA,cAAAA,EAAA3c,KAAA2c,EAAAjzB,MAAA,cACGgsC,EAAa,IAAIlL,GAAW1jC,GAC5B0uB,EAAW2kB,GAAgB7K,cAC3B1xC,EAAM+E,GAhfK,eA6edg6B,EAAAjzB,KAAA,EAIegsC,EAAWqH,WAAWvnB,EAAU53B,GAJ/C,YAIGwJ,EAJHu1B,EAAAvN,MAKK0M,OALL,CAAAa,EAAAjzB,KAAA,gBAAAizB,EAAA1c,OAAA,SAMQg+B,GAAYz7B,YAAY,IAAI/c,GAAa2B,EAAI00B,UANrD,eAAAa,EAAA1c,OAAA,SAQQ,IAAIg+B,IARZ,yBAAAthB,EAAAv3B,SAAAs3B,EAAA/2B,SAAP,gBAAAq2B,GAAA,OAAAS,EAAAp6B,MAAAsD,KAAAhC,YAAA,GAaAu6C,GAAA,eAAAthB,EAAAkgB,GAAAn9B,mBAAAC,KAAO,SAAAid,EAA6B0d,EAAmBzzC,GAAhD,IAAA4uC,EAAAlgB,EAAA53B,EAAAwJ,EAAA,OAAAuY,mBAAAG,KAAA,SAAAgd,GAAA,cAAAA,EAAA9c,KAAA8c,EAAApzB,MAAA,cACGgsC,EAAa,IAAIlL,GAAW1jC,GAC5B0uB,EAAW2kB,GAAgB7K,cAC3B1xC,EAAM+E,GA5fI,cA4fsB43C,EAAS/qB,YAH5CsN,EAAApzB,KAAA,EAIegsC,EAAWqH,WAAWvnB,EAAU53B,GAJ/C,YAIGwJ,EAJH01B,EAAA1N,MAKK0M,OALL,CAAAgB,EAAApzB,KAAA,gBAAAozB,EAAA7c,OAAA,SAMQk+B,GAAW37B,YAAY,IAAI/c,GAAa2B,EAAI00B,UANpD,eAAAgB,EAAA7c,OAAA,SAQQ,IAAIk+B,IARZ,yBAAArhB,EAAA13B,SAAAy3B,EAAAl3B,SAAP,gBAAAy2B,EAAAI,GAAA,OAAAI,EAAAv6B,MAAAsD,KAAAhC,YAAA,GAYAy6C,GAAA,eAAArhB,EAAA+f,GAAAn9B,mBAAAC,KAAO,SAAAod,EAAiCud,EAAmBzzC,GAApD,IAAAu3C,EAAA3I,EAAA4I,EAAAC,EAAAC,EAAA,OAAA7+B,mBAAAG,KAAA,SAAAmd,GAAA,cAAAA,EAAAjd,KAAAid,EAAAvzB,MAAA,cAAAuzB,EAAAvzB,KAAA,EACsBw0C,GAAc3D,EAAUzzC,GAD9C,WACGu3C,EADHphB,EAAA7N,MAEa3U,QAFb,CAAAwiB,EAAAvzB,KAAA,eAAAuzB,EAAAhd,OAAA,SAGQ,GAHR,cAKGy1B,EAAa,IAAIlL,GAAW1jC,GAL/Bm2B,EAAAvzB,KAAA,EAMwBgsC,EAAW+I,iBANnC,cAMGH,EANHrhB,EAAA7N,KAMqD0M,OANrDmB,EAAAvzB,KAAA,GAOkBgsC,EAAWgJ,aAAaJ,GAP1C,eAOGC,EAPHthB,EAAA7N,KAOwD0M,OACrD0iB,EAAYD,EAAMI,OAAOC,UAAY19C,EARxC+7B,EAAAhd,OAAA,SASInW,GAAeu0C,EAAWQ,MAAOR,EAAWS,WAAYN,IAT5D,yBAAAvhB,EAAA73B,SAAA43B,EAAAr3B,SAAP,gBAAAu3B,EAAAI,GAAA,OAAAP,EAAA16B,MAAAsD,KAAAhC,YAAA,GAeM85C,GAAN,oBAAAsB,IAAAC,GAAAr5C,KAAAo5C,GAQIp5C,KAAA43C,KAAe,EACf53C,KAAAq6B,OAAiB,EACjBr6B,KAAAs5C,OAAiB,GAVrB,OAAAC,GAAAH,IAAAnhD,IAAA,YAAAN,MAAA,WAaQ,IAAIgE,EAAS,GAIb,OAHAA,GAAUmC,GAAckC,KAAK43C,KAAM,GAAG,GACtCj8C,GAAUmC,GAAckC,KAAKq6B,OAAQ,GAAG,GACxC1+B,GAAUuB,GAAa8C,KAAKs5C,aAhBpCrhD,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAM0vC,EAAI,IAAIJ,EAId,OAHAI,EAAE5B,KAAO9tC,EAAGwD,aACZksC,EAAEnf,OAASvwB,EAAGwD,aACdksC,EAAEF,OAASxvC,EAAGvJ,KAAK,IACZi5C,MANfJ,EAAA,GAwBMhB,GAAN,oBAAAqB,IAAAJ,GAAAr5C,KAAAy5C,GAYIz5C,KAAAG,MAAgB,EAChBH,KAAAg3C,WAAqB,GAErBh3C,KAAAsmC,OAAiB,EACjBtmC,KAAA60C,QAAkB,EAClB70C,KAAA05C,SAAmB,EAjBvB,OAAAH,GAAAE,IAAAxhD,IAAA,YAAAN,MAAA,WAoBQ,IAAIgE,EAAS,GAOb,OANAA,GAAUmC,GAAckC,KAAKG,MAAO,GAAG,GACvCxE,GAAU0B,GAAa2C,KAAKg3C,YAC5Br7C,GAAUqE,KAAK8U,QAAQ+U,YACvBluB,GAAUmC,GAAckC,KAAKsmC,QAC7B3qC,GAAUmC,GAAckC,KAAK60C,QAAS,GAAG,GACzCl5C,GAAUmC,GAAckC,KAAK05C,SAAU,GAAG,QA1BlDzhD,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAMtR,EAAI,IAAIihD,EAOd,OANAjhD,EAAE2H,MAAQ2J,EAAGquC,UACb3/C,EAAEw+C,WAAa/5C,GAAW6M,EAAG6D,iBAC7BnV,EAAEsc,QAAUZ,GAAQ2I,YAAY/S,GAChCtR,EAAE8tC,OAASxqC,SAASgO,EAAGvJ,KAAK,GAAI,IAChC/H,EAAEq8C,QAAU/qC,EAAG2hC,WACfjzC,EAAEkhD,SAAW5vC,EAAG2hC,WACTjzC,MATfihD,EAAA,GA+BMpC,GAAN,oBAAAsC,IAAAN,GAAAr5C,KAAA25C,GAqBI35C,KAAAg3C,WAAqB,GACrBh3C,KAAAy1C,aAAuB,EACvBz1C,KAAA45C,WAAqB,IACrB55C,KAAA65C,WAAqB,IACrB75C,KAAA85C,UAAoB,EACpB95C,KAAA+5C,OAAiB,GACjB/5C,KAAAg6C,OAAiB,GACjBh6C,KAAAi6C,OAAiB,GACjBj6C,KAAAk6C,OAAiB,GA7BrB,OAAAX,GAAAI,IAAA1hD,IAAA,YAAAN,MAAA,WAgCQ,MAAO,QAhCfM,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAMqwC,EAAK,IAAIR,EASf,OARAQ,EAAGnD,WAAa/5C,GAAW6M,EAAG6D,iBAE9BwsC,EAAG1E,aAAe3rC,EAAG2hC,WAErB0O,EAAGP,WAAa9vC,EAAG2hC,WACnB0O,EAAGN,WAAa/vC,EAAG2hC,WACnB0O,EAAGL,UAAYhwC,EAAG2hC,WAEd3hC,EAAG5J,QACIi6C,GAEXA,EAAGJ,OAASjwC,EAAG6D,gBACfwsC,EAAGH,OAASlwC,EAAG6D,gBACfwsC,EAAGF,OAASnwC,EAAG6D,gBACfwsC,EAAGD,OAASpwC,EAAG6D,gBAERwsC,OAnBfR,EAAA,GAoCMpC,GAAN,oBAAA6C,IAAAf,GAAAr5C,KAAAo6C,GASIp6C,KAAAuE,OAAiB,EATrB,OAAAg1C,GAAAa,EAAA,OAAAniD,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAMuwC,EAAM,IAAID,EAGhB,OAFAC,EAAIvlC,QAAUZ,GAAQ2I,YAAY/S,GAClCuwC,EAAI91C,OAASuF,EAAG2hC,WACT4O,MALfD,EAAA,GAYM3C,GAAN,oBAAA6C,IAAAjB,GAAAr5C,KAAAs6C,GAcIt6C,KAAAg3C,WAAqB,GAErBh3C,KAAAu6C,aAAuB,EACvBv6C,KAAAw6C,UAAoB,EACpBx6C,KAAAy6C,OAAiB,EACjBz6C,KAAA06C,YAAsB,EACtB16C,KAAA26C,kBAA4B,EAC5B36C,KAAA46C,oBAA8B,EArBlC,OAAArB,GAAAe,EAAA,OAAAriD,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAM+wC,EAAK,IAAIP,EASf,OARAO,EAAG7D,WAAa/5C,GAAW6M,EAAG6D,iBAC9BktC,EAAG/lC,QAAUZ,GAAQ2I,YAAY/S,GACjC+wC,EAAGN,aAAezwC,EAAG2hC,WACrBoP,EAAGL,UAAY1wC,EAAG2hC,WAClBoP,EAAGJ,OAAS3wC,EAAG2hC,WACfoP,EAAGH,YAAc5wC,EAAG2hC,WACpBoP,EAAGF,kBAAoB7wC,EAAG2hC,WAC1BoP,EAAGD,oBAAsB9wC,EAAG2hC,WACrBoP,MAXfP,EAAA,GAwBMhC,GAAN,oBAAAwC,IAAAzB,GAAAr5C,KAAA86C,GAAA,OAAAvB,GAAAuB,EAAA,OAAA7iD,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAMixC,EAAK,IAAID,EACTE,EAAYlxC,EAAG6D,gBACfstC,EAAkBvvC,GAAOuhC,WAAW+N,GAAWrjD,MACrDojD,EAAGG,aAAe98C,OAAO68C,GACzB,IAAME,EAASzvC,GAAOuhC,WAAWnjC,EAAG6D,iBAAiBhW,MACrDojD,EAAGK,aAAeh9C,OAAO+8C,GACzB,IAAME,EAAkB3vC,GAAOuhC,WAAWnjC,EAAG6D,iBAAiBhW,MACxD2jD,EAAel9C,OAAOi9C,GAC5BN,EAAGO,aAAeA,EAClB,IAAMC,EAAc7vC,GAAOuhC,WAAWnjC,EAAG6D,iBAAiBhW,MAC1DojD,EAAGS,SAAWp9C,OAAOm9C,GACrB,IAAME,EAAO/vC,GAAOuhC,WAAWnjC,EAAG6D,iBAAiBhW,MAC7C2J,EAAIlD,OAAOq9C,GACXC,EAAOhwC,GAAOuhC,WAAWnjC,EAAG6D,iBAAiBhW,MAC7C+H,EAAItB,OAAOs9C,GACXC,EAAOjwC,GAAOuhC,WAAWnjC,EAAG6D,iBAAiBhW,MAC7CikD,EAAOx9C,OAAOu9C,GACdE,EAAOnwC,GAAOuhC,WAAWnjC,EAAG6D,iBAAiBhW,MAC7CmkD,EAAU19C,OAAOy9C,GAKvB,OAJAd,EAAGx8B,EAAIjd,EACPy5C,EAAGl9B,EAAIne,EACPq7C,EAAGa,KAAOA,EACVb,EAAGe,QAAUA,EACNf,MAzBfD,EAAA,GAsCMtC,GAAN,oBAAAuD,IAAA1C,GAAAr5C,KAAA+7C,GAAA,OAAAxC,GAAAwC,EAAA,OAAA9jD,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAMkyC,EAAK,IAAID,EAIf,OAHAC,EAAGlnC,QAAUZ,GAAQ2I,YAAY/S,GACjCkyC,EAAG9C,MAAQpvC,EAAG2hC,WACduQ,EAAG7C,WAAarvC,EAAGwD,aACZ0uC,MANfD,EAAA,wVCpsBA,IAAME,GAAN,WAmBI,SAAAC,IAAAC,GAAAn8C,KAAAk8C,GAFAl8C,KAAAouC,UAjBJ,OAAAgO,GAAAF,IAAAjkD,IAAA,YAAAN,MAAA,WAwBQ,IAAIgE,EAAS,GAEbA,GAAUmC,GAAckC,KAAKouC,OAAOxyC,QAEpC,IAAK,IAAIlF,EAAI,EAAGA,EAAIsJ,KAAKouC,OAAOxyC,OAAQlF,IACpCiF,GAAUqE,KAAKouC,OAAO13C,GAAGmzB,YAE7B,OAAOluB,OA/Bf1D,IAAA,cAAAN,MAAA,SACuBmS,GAMf,IALA,IAAMlS,EAAI,IAAIskD,EAGR9N,KACAiO,EAAWvyC,EAAGxJ,cACX5J,EAAI,EAAGA,EAAI2lD,EAAU3lD,IAAK,CAC/B,IAAM43C,EAAQgO,GAAMz/B,YAAY/S,GAChCskC,EAAOvyC,KAAKyyC,GAGhB,OADA12C,EAAEw2C,OAASA,EACJx2C,MAZfskD,EAAA,GAmCMK,GAAN,oBAAAC,IAAAL,GAAAn8C,KAAAw8C,GAAA,OAAAJ,GAAAI,IAAAvkD,IAAA,YAAAN,MAAA,WAoBQ,IAAIgE,EAAS,GACbA,GAAUqE,KAAKmsC,SAEfxwC,GADYmC,GAAckC,KAAKouC,OAAOxyC,QAGtC,IAAK,IAAIlF,EAAI,EAAIA,EAAIsJ,KAAKouC,OAAOxyC,OAAQlF,IACrCiF,GAAUqE,KAAKouC,OAAO13C,GAAGmzB,YAE7B,OAAOluB,OA5Bf1D,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAM2yC,EAAK,IAAID,EACfC,EAAGrO,UACH,IAAMjC,EAAWriC,EAAGvJ,KAAK,IACzBk8C,EAAGtQ,SAAWA,EAGd,IADA,IAAM3rC,EAAMsJ,EAAGxJ,cACN5J,EAAI,EAAGA,EAAI8J,EAAK9J,IAAK,CAC1B,IAAM43C,EAAQgO,GAAMz/B,YAAY/S,GAChC2yC,EAAGrO,OAAOvyC,KAAKyyC,GAEnB,OAAOmO,MAZfD,EAAA,GAgCMF,GAAN,WAmBI,SAAAje,EAAYv/B,EAAeixB,EAAap4B,GAAawkD,GAAAn8C,KAAAq+B,GACjD,IAAMt5B,EAAK,IAAIC,EAAA,UAAUrN,GACzB,IAAKoN,EAAGE,aAAeF,EAAGpF,aACtB,MAAMhH,EAAWyK,eAErBpD,KAAKlB,KAAOA,EACZkB,KAAK+vB,GAAKA,EACV/vB,KAAKrI,MAAQA,EA1BrB,OAAAykD,GAAA/d,EAAA,OAAApmC,IAAA,cAAAN,MAAA,SACuBmS,GAQf,OAAO,IAAIu0B,EANE,IAAInqB,GAAQpK,EAAG6D,iBACf,IAAIuG,GAAQpK,EAAG6D,iBAGdjC,GAAOuhC,WAAWnjC,EAAG6D,iBAAiBhW,MAEnB0E,gBATzC+/C,GAAA/d,IAAApmC,IAAA,YAAAN,MAAA,WA8BQ,IAAIgE,EAAS,GAMb,OAJAA,GAAUuB,GAAa8C,KAAKlB,KAAK+qB,aACjCluB,GAAUuB,GAAa8C,KAAK+vB,GAAGlG,aAE/BluB,GAAUuB,GADC,IAAIwO,GAAO1L,KAAKrI,OAAOgU,gBAlC1C0yB,EAAA,GAwCMqe,GAAN,WAyBI,SAAAC,IAAAR,GAAAn8C,KAAA28C,GACI38C,KAAKknB,QAAU,KA1BvB,OAAAk1B,GAAAO,EAAA,OAAA1kD,IAAA,cAAAN,MAAA,SACuBmS,GACf,IAAM/S,EAAI,IAAI4lD,EACRz1B,EAAUpd,EAAGvJ,KAAK,GAClBuU,EAAUZ,GAAQ2I,YAAY/S,GAC9B0jB,EAAS1jB,EAAG6D,gBACZe,EAAO5E,EAAG6D,gBAKhB,OAJA5W,EAAEmwB,QAAUA,EACZnwB,EAAE+d,QAAUA,EACZ/d,EAAEy2B,OAASvwB,GAAWuwB,GACtBz2B,EAAE2X,KAAOA,EACF3X,MAXfqlD,GAAAO,IAAA1kD,IAAA,YAAAN,MAAA,WA8BQ,IAAIgE,EAAS,GASb,OARAA,GAAUqE,KAAKknB,QAEfvrB,GAAUqE,KAAK8U,QAAQ+U,YAEvBluB,GAAU0B,GAAa2C,KAAKwtB,QAE5B7xB,GAAUuB,GAAa8C,KAAK0O,UArCpCiuC,EAAA,GA2CMC,GAAN,WAqBI,SAAAjP,EAAY3Y,EAAiBl2B,EAAeixB,EAAap4B,GAAawkD,GAAAn8C,KAAA2tC,GAClE,IAAM5oC,EAAK,IAAIC,EAAA,UAAUrN,GACzB,IAAKoN,EAAGE,cAAgBF,EAAGpF,aACvB,MAAMhH,EAAWyK,eAErBpD,KAAKg1B,OAASA,EACdh1B,KAAKlB,KAAOA,EACZkB,KAAK+vB,GAAKA,EACV/vB,KAAKrI,MAAQA,EA7BrB,OAAAykD,GAAAzO,EAAA,OAAA11C,IAAA,cAAAN,MAAA,SACuBmS,GAOf,OADW,IAAI6jC,EAJA,IAAIz5B,GAAQpK,EAAG6D,iBACjB,IAAIuG,GAAQpK,EAAG6D,iBACjB,IAAIuG,GAAQpK,EAAG6D,iBACZjC,GAAOuhC,WAAWnjC,EAAG6D,iBAAiBhW,MACA0E,gBAP5D+/C,GAAAzO,IAAA11C,IAAA,YAAAN,MAAA,WAiCQ,IAAIgE,EAAS,GAOb,OALAA,GAAUuB,GAAa8C,KAAKg1B,OAAOnL,aACnCluB,GAAUuB,GAAa8C,KAAKlB,KAAK+qB,aACjCluB,GAAUuB,GAAa8C,KAAK+vB,GAAGlG,aAE/BluB,GAAUuB,GADI,IAAIwO,GAAO1L,KAAKrI,OAAOgU,gBAtC7CgiC,EAAA,wVCpJA,IAAMkP,GACI,OADJA,GAEQ,WAFRA,GAGa,gBAHbA,GAIO,UAJPA,GAKa,eALbA,GAMS,YANTA,GAOS,YAPTA,GAQW,cARXA,GASM,SATNA,GAUQ,WAVRA,GAWI,OAGJC,GAKF,SAAAC,EAAYj+C,EAAeixB,EAAaxrB,GAAcy4C,GAAAh9C,KAAA+8C,GAClD/8C,KAAKlB,KAAOA,EAAK+qB,YACjB7pB,KAAK+vB,GAAKA,EAAGlG,YACb7pB,KAAKuE,OAAS,IAAIS,EAAA,UAAUT,IAM9B04C,GAAN,WAII,SAAAC,EAAYzwB,GAAqBuwB,GAAAh9C,KAAAk9C,GAC7Bl9C,KAAKysB,aAAeA,EAL5B,OAAA0wB,GAAAD,IAAAjlD,IAAA,OAAAN,MAAA,SAcSyyB,EAAkBC,EAAkBP,GAErC,OAAO6C,GADUkwB,MAC0B78C,KAAKysB,aAAcrC,EAAUC,EAAUP,MAhB1F7xB,IAAA,iBAAAN,MAAA,SA6BQmH,EACAixB,EACAxrB,EACA6lB,EACAC,EACAP,GAEA,IAAM0C,EAAWqwB,GACXrf,EAAK,IAAIrvB,GAAU,OAAQF,GAAcyB,UAAW5Q,EAAK+qB,aACzD4T,EAAK,IAAItvB,GAAU,KAAMF,GAAcyB,UAAWqgB,EAAGlG,aACrD6T,EAAK,IAAIvvB,GAAU,QAASF,GAAciC,KAAM3L,GACtD,OAAOooB,GAAsBH,GAAWgR,EAAIC,EAAIC,GAAK19B,KAAKysB,aAAcrC,EAAUC,EAAUP,MAxCpG7xB,IAAA,sBAAAN,MAAA,SAoDQy2C,EACAhkB,EACAC,EACAP,GAEA,IAAMtb,KACNA,EAAK3S,KAAKmB,GAAW6/C,KACrB,IAAMxO,KAJQ5qC,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAKd,QAAA2F,EAAAC,EAAoBuqC,EAApB32C,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA4B,KAAjB6qC,EAAiB1qC,EAAAjM,MACxB02C,EAAKxyC,MACDyyC,EAAMxvC,KACNwvC,EAAMve,GACNue,EAAM/pC,UATA,MAAA1C,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAYd6K,EAAK3S,KAAKwyC,GACV,IAAMjtC,EAASyQ,GAAuBrD,GACtC,OAAOme,GAAsB,GAAIvrB,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MArExF7xB,IAAA,gBAAAN,MAAA,SAkFQ42C,EACAX,EACArpC,EACA6lB,EACAC,EACAP,GAEA,IAAM0C,EAAWqwB,GACXz7C,GACF,IAAI+M,GAAU,QAASF,GAAcyB,UAAW6+B,EAAM1kB,aACtD,IAAI1b,GAAU,UAAWF,GAAcyB,UAAWk+B,EAAQ/jB,aAC1D,IAAI1b,GAAU,SAAUF,GAAciC,KAAM3L,IAEhD,OAAOooB,GAAsBH,EAAUprB,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MA/F9F7xB,IAAA,qBAAAN,MAAA,SAmGQq9B,EACAl2B,EACAixB,EACAxrB,EACA6lB,EACAC,EACAP,GAEA,IAAM0C,EAAWqwB,GACXz7C,GACF,IAAI+M,GAAU,QAASF,GAAcyB,UAAWslB,EAAOnL,aACvD,IAAI1b,GAAU,OAAQF,GAAcyB,UAAW5Q,EAAK+qB,aACpD,IAAI1b,GAAU,KAAMF,GAAcyB,UAAWqgB,EAAGlG,aAChD,IAAI1b,GAAU,SAAUF,GAAciC,KAAM3L,IAEhD,OAAOooB,GAAsBH,EAAUprB,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MAlH9F7xB,IAAA,uBAAAN,MAAA,SAsHQ42C,EACAX,GAEA,IAAMphB,EAAWqwB,GACXz7C,GACF,IAAI+M,GAAU,QAASF,GAAcyB,UAAW6+B,EAAM1kB,aACtD,IAAI1b,GAAU,UAAWF,GAAcyB,UAAWk+B,EAAQ/jB,cAE9D,OAAO8C,GAAsBH,EAAUprB,EAAQpB,KAAKysB,iBA9H5Dx0B,IAAA,iBAAAN,MAAA,SAqImBmd,GACX,IAAM0X,EAAWqwB,GACXrf,EAAK,IAAIrvB,GAAU,OAAQF,GAAcyB,UAAWoF,EAAQ+U,aAElE,OAAO8C,GAAsBH,GAAWgR,GAAKx9B,KAAKysB,iBAzI1Dx0B,IAAA,mBAAAN,MAAA,WAiJQ,OAAOg1B,GADUkwB,MAC0B78C,KAAKysB,iBAjJxDx0B,IAAA,gBAAAN,MAAA,WAyJQ,OAAOg1B,GADUkwB,MAC0B78C,KAAKysB,iBAzJxDx0B,IAAA,cAAAN,MAAA,WAiKQ,OAAOg1B,GADUkwB,MAC0B78C,KAAKysB,iBAjKxDx0B,IAAA,YAAAN,MAAA,WAyKQ,OAAOg1B,GADUkwB,MAC0B78C,KAAKysB,kBAzKxDywB,EAAA,wVC5BA,IAAME,GAIF,SAAAA,EAAmBC,EAAiB7P,GAAe8P,GAAAt9C,KAAAo9C,GAC/Cp9C,KAAKq9C,OAASA,EAAOxzB,YACrB7pB,KAAKwtC,QAAUA,GAIjB+P,GACI,OADJA,GAEI,OAFJA,GAGM,SAHNA,GAIW,cAJXA,GAKS,YALTA,GAMO,UANPA,GAOQ,WAPRA,GAQa,gBARbA,GASO,UATPA,GAWa,gBAXbA,GAYmB,sBAZnBA,GAac,iBAbdA,GAcW,cAKXC,GAAN,WAGI,SAAAC,EAAYhxB,GAAqB6wB,GAAAt9C,KAAAy9C,GAC7Bz9C,KAAKysB,aAAeA,EAJ5B,OAAAixB,GAAAD,IAAAxlD,IAAA,aAAAN,MAAA,SAQQyyB,EACAC,EACAP,GAGA,OAAO6C,GADM4wB,MAC0Bv9C,KAAKysB,aAAcrC,EAAUC,EAAUP,MAbtF7xB,IAAA,gBAAAN,MAAA,SAiBQ61C,GAEA,IAAMW,EAAOoP,GACPn8C,GACF,IAAI+M,GAAU,UAAWF,GAAcyB,UAAW89B,IAEtD,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBAvBxDx0B,IAAA,iBAAAN,MAAA,SAkCQgmD,EACAvzB,EACAC,EACAP,GAEA,IAAMqkB,EAAOoP,GACPn8C,GACF,IAAI+M,GAAU,SAAUF,GAAcyB,UAAWiuC,EAAUN,QAC3D,IAAIlvC,GAAU,UAAWF,GAAcyB,UAAWiuC,EAAUnQ,UAEhE,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MA5C1F7xB,IAAA,sBAAAN,MAAA,SAmDQimD,EACAxzB,EACAC,EACAP,GAEA,IAAMtb,KACNA,EAAK3S,KAAKmB,GAAWugD,KACrB,IAAMlP,KAJQ5qC,GAAA,EAAAC,GAAA,EAAAC,OAAA1F,EAAA,IAKd,QAAA2F,EAAAC,EAAoB+5C,EAApBnmD,OAAAqM,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAgC,KAArBoL,EAAqBjL,EAAAjM,MAC5B02C,EAAKxyC,MACDgT,EAAMwuC,OACNxuC,EAAM2+B,WARA,MAAA3rC,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,aAAA4B,GAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,GAWd6K,EAAK3S,KAAKwyC,GACV,IAAMjtC,EAASyQ,GAAuBrD,GACtC,OAAOme,GAAsB,GAAIvrB,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MAnExF7xB,IAAA,gBAAAN,MAAA,SA8EQgmD,EACAvzB,EACAC,EACAP,GAEA,IAAMqkB,EAAOoP,GACPn8C,GACF,IAAI+M,GAAU,SAAUF,GAAcyB,UAAWiuC,EAAUN,QAC3D,IAAIlvC,GAAU,UAAWF,GAAcyB,UAAWiuC,EAAUnQ,UAEhE,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MAxF1F7xB,IAAA,sBAAAN,MAAA,SAmGQgmD,EACAvzB,EACAC,EACAP,GAEA,IAAMqkB,EAAOoP,GACPn8C,GACF,IAAI+M,GAAU,SAAUF,GAAcyB,UAAWiuC,EAAUN,QAC3D,IAAIlvC,GAAU,UAAWF,GAAcyB,UAAWiuC,EAAUnQ,UAEhE,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,aAAcrC,EAAUC,EAAUP,MA7G1F7xB,IAAA,uBAAAN,MAAA,SAiHQ4yC,GAEA,IAAM4D,EAAOoP,GACPn8C,GACF,IAAI+M,GAAU,OAAQF,GAAcyB,UAAW66B,EAAK1gB,cAExD,OAAO8C,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBAvHxDx0B,IAAA,yBAAAN,MAAA,WA4HQ,OAAOg1B,GADM4wB,MAC0Bv9C,KAAKysB,iBA5HpDx0B,IAAA,4BAAAN,MAAA,SAgIQwI,GAEA,IAAMguC,EAAOoP,GACPn8C,GACF,IAAI+M,GAAU,QAASF,GAAciC,KAAM/P,IAE/C,OAAOwsB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBAtIxDx0B,IAAA,uBAAAN,MAAA,SA0IQ61C,GAEA,IAAMW,EAAOoP,GACPn8C,GACF,IAAI+M,GAAU,UAAWF,GAAcyB,UAAW89B,IAEtD,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBAhJxDx0B,IAAA,oBAAAN,MAAA,SAoJQ61C,GAEA,IAAMW,EAAOoP,GACPn8C,GACF,IAAI+M,GAAU,UAAWF,GAAcyB,UAAW89B,IAEtD,OAAO7gB,GAAsBwhB,EAAM/sC,EAAQpB,KAAKysB,iBA1JxDx0B,IAAA,kBAAAN,MAAA,WA+JQ,OAAOg1B,GADM4wB,MAC0Bv9C,KAAKysB,iBA/JpDx0B,IAAA,oBAAAN,MAAA,WAoKQ,OAAOg1B,GADM4wB,MAC0Bv9C,KAAKysB,kBApKpDgxB,EAAA,ikDCLAI,cAkCI,SAAA/iD,iGAAAgjD,CAAA99C,KAAAlF,GACIkF,KAAKiuB,QAAUD,GACfhuB,KAAK2nC,SAAWD,GAChB1nC,KAAKwlC,MAAQF,GACbtlC,KAAK2hC,IAAMD,GACX1hC,KAAKyhC,aAAeD,GACpBxhC,KAAKkqB,YAAcD,GACnBjqB,KAAKmrB,SAAWA,GAChBnrB,KAAKyoB,YAAcD,GACnBxoB,KAAK+9C,mBAAqBC,EAC1Bh+C,KAAKi+C,kBAAoBC,EACzBl+C,KAAKm+C,oBAAsBC,EAC3Bp+C,KAAKmO,UAAYA,GACjBnO,KAAKiO,cAAgBA,GACrBjO,KAAK2mB,YAAckG,GACnB7sB,KAAKu8B,QAAUK,GACf58B,KAAKq+C,MAAQC,EACbt+C,KAAKmV,OAASopC,EACdv+C,KAAKw+C,MAAQC,EACbz+C,KAAK0uC,OAASD,GACdzuC,KAAKwvC,IAAMD,GACXvvC,KAAK0+C,MAAQC,EACb3+C,KAAK4+C,cAAgBC,EACrB7+C,KAAKovB,WAAayV,GAClB7kC,KAAK0rC,UAAYoT,GACjB9+C,KAAK40B,gBAAkBD,GACvB30B,KAAK++C,OAASC,EACdh/C,KAAKsO,OAAS4E,GACdlT,KAAKi/C,cAAgBC,EACrBl/C,KAAKm/C,QAAUC,EACfp/C,KAAKq/C,KAAOC,EACZt/C,KAAKu/C,KAAOC,EACZx/C,KAAKy/C,KAAOC,6CAERv+C,GACJnB,KAAKw+C,MAAM7kD,UAAYwH,qCAGhB0uC,GACP7vC,KAAKw+C,MAAMzkD,eAAiB81C,sCAGpBA,GACR7vC,KAAKw+C,MAAM3kD,eAAiBg2C,wCAGlBA,GACV7vC,KAAKw+C,MAAM1kD,aAAe+1C,WAIlC8P,EAAA","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","module.exports = require(\"crypto-js\");","module.exports = require(\"axios\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"bip39\");","module.exports = require(\"base64-url\");","module.exports = require(\"sm.js\");","module.exports = require(\"elliptic\");","module.exports = require(\"bs58\");","module.exports = require(\"js-sha3\");","module.exports = require(\"long\");","module.exports = require(\"secure-random\");","module.exports = require(\"@ont-community/hdkey-secp256r1\");","module.exports = require(\"wif\");","module.exports = require(\"crypto\");","module.exports = require(\"scrypt-async\");","module.exports = require(\"milagro-crypto-js\");","module.exports = require(\"@ont-community/html5-websocket\");","module.exports = require(\"websocket-as-promised\");","module.exports = require(\"uuid\");","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport enum ERROR_CODE {\n    SUCCESS\t            =     0, // 成功\n    SESSION_EXPIRED     = 41001,   // 会话无效或已过期（ 需要重新登录） |\n    SERVICE_CEILING     = 41002,   // 达到服务上限 |\n    ILLEGAL_DATAFORMAT  = 41003,   // 不合法数据格式 |\n    INVALID_VERSION     = 41004,   // 不合法的版本 |\n    INVALID_METHOD      = 42001,   // 无效的方法 |\n    INVALID_PARAMS      = 42002,   // 无效的参数 |\n    INVALID_TRANSACTION = 43001,   // 无效的交易 |\n    INVALID_ASSET       = 43002,   // 无效的资产 |\n    INVALID_BLOCK       = 43003,   // 无效的块 |\n    UNKNOWN_TRANSACTION = 44001,   // 找不到交易 |\n    UNKNOWN_ASSET       = 44002,   // 找不到资产 |\n    UNKNOWN_BLOCK       = 44003,   // 找不到块 |\n    UNKNWN_CONTRACT     = 44004,   // 找不到合约 |\n    INTERNAL_ERROR      = 45001,   // 内部错误 |\n    SMARTCODE_ERROR     = 47001,   // 智能合约错误 |\n\n    UNKNOWN_ONTID       = 51000,   // 不存在的ONT ID,\n    NETWORK_ERROR       = 52000,   // 网络错误,\n    Decrypto_ERROR      = 53000,    // 解密错误,\n    INVALID_ADDR        = 53001,   // 地址验证失败\n\n    PreExec_ERROR = 54000   // 预执行错误\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nenum OPCODE {\n    // Constants\n    PUSH0 = 0x00, // An empty array of bytes is pushed onto the stack.\n    PUSHF = PUSH0,\n    PUSHBYTES1 = 0x01, // 0x01-0x4B The next bytes is data to be pushed onto the stack\n    PUSHBYTES75 = 0x4B,\n    PUSHDATA1 = 0x4C, // The next byte contains the number of bytes to be pushed onto the stack.\n    PUSHDATA2 = 0x4D, // The next two bytes contain the number of bytes to be pushed onto the stack.\n    PUSHDATA4 = 0x4E, // The next four bytes contain the number of bytes to be pushed onto the stack.\n    PUSHM1 = 0x4F, // The number -1 is pushed onto the stack.\n    PUSH1 = 0x51, // The number 1 is pushed onto the stack.\n    PUSHT = PUSH1,\n    PUSH2 = 0x52, // The number 2 is pushed onto the stack.\n    PUSH3 = 0x53, // The number 3 is pushed onto the stack.\n    PUSH4 = 0x54, // The number 4 is pushed onto the stack.\n    PUSH5 = 0x55, // The number 5 is pushed onto the stack.\n    PUSH6 = 0x56, // The number 6 is pushed onto the stack.\n    PUSH7 = 0x57, // The number 7 is pushed onto the stack.\n    PUSH8 = 0x58, // The number 8 is pushed onto the stack.\n    PUSH9 = 0x59, // The number 9 is pushed onto the stack.\n    PUSH10 = 0x5A, // The number 10 is pushed onto the stack.\n    PUSH11 = 0x5B, // The number 11 is pushed onto the stack.\n    PUSH12 = 0x5C, // The number 12 is pushed onto the stack.\n    PUSH13 = 0x5D, // The number 13 is pushed onto the stack.\n    PUSH14 = 0x5E, // The number 14 is pushed onto the stack.\n    PUSH15 = 0x5F, // The number 15 is pushed onto the stack.\n    PUSH16 = 0x60, // The number 16 is pushed onto the stack.\n\n    // Flow control\n    NOP = 0x61, // Does nothing.\n    JMP = 0x62,\n    JMPIF = 0x63,\n    JMPIFNOT = 0x64,\n    CALL = 0x65,\n    RET = 0x66,\n    APPCALL = 0x67,\n    SYSCALL = 0x68,\n    TAILCALL = 0x69,\n    DUPFROMALTSTACK = 0x6A,\n\n    // Stack\n    TOALTSTACK = 0x6B, // Puts the input onto the top of the alt stack. Removes it from the main stack.\n    FROMALTSTACK = 0x6C, // Puts the input onto the top of the main stack. Removes it from the alt stack.\n    XDROP = 0x6D,\n    XSWAP = 0x72,\n    XTUCK = 0x73,\n    DEPTH = 0x74, // Puts the number of stack items onto the stack.\n    DROP = 0x75, // Removes the top stack item.\n    DUP = 0x76, // Duplicates the top stack item.\n    NIP = 0x77, // Removes the second-to-top stack item.\n    OVER = 0x78, // Copies the second-to-top stack item to the top.\n    PICK = 0x79, // The item n back in the stack is copied to the top.\n    ROLL = 0x7A, // The item n back in the stack is moved to the top.\n    ROT = 0x7B, // The top three items on the stack are rotated to the left.\n    SWAP = 0x7C, // The top two items on the stack are swapped.\n    TUCK = 0x7D, // The item at the top of the stack is copied and inserted before the second-to-top item.\n\n    // Splice\n    CAT = 0x7E, // Concatenates two strings.\n    SUBSTR = 0x7F, // Returns a section of a string.\n    LEFT = 0x80, // Keeps only characters left of the specified point in a string.\n    RIGHT = 0x81, // Keeps only characters right of the specified point in a string.\n    SIZE = 0x82, // Returns the length of the input string.\n\n    // Bitwise logic\n    INVERT = 0x83, // Flips all of the bits in the input.\n    AND = 0x84, // Boolean and between each bit in the inputs.\n    OR = 0x85, // Boolean or between each bit in the inputs.\n    XOR = 0x86, // Boolean exclusive or between each bit in the inputs.\n    EQUAL = 0x87, // Returns 1 if the inputs are exactly equal, 0 otherwise.\n    // EQUALVERIFY = 0x88, // Same as EQUAL, but runs VERIFY afterward.\n    // RESERVED1 = 0x89, // Transaction is invalid unless occuring in an unexecuted IF branch\n    // RESERVED2 = 0x8A, // Transaction is invalid unless occuring in an unexecuted IF branch\n\n    // Arithmetic\n    // Note: Arithmetic inputs are limited to signed 32-bit integers, but may overflow their output.\n    INC = 0x8B, // 1 is added to the input.\n    DEC = 0x8C, // 1 is subtracted from the input.\n    // SAL           = 0x8D, // The input is multiplied by 2.\n    // SAR           = 0x8E, // The input is divided by 2.\n    NEGATE = 0x8F, // The sign of the input is flipped.\n    ABS = 0x90, // The input is made positive.\n    NOT = 0x91, // If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\n    NZ = 0x92, // Returns 0 if the input is 0. 1 otherwise.\n    ADD = 0x93, // a is added to b.\n    SUB = 0x94, // b is subtracted from a.\n    MUL = 0x95, // a is multiplied by b.\n    DIV = 0x96, // a is divided by b.\n    MOD = 0x97, // Returns the remainder after dividing a by b.\n    SHL = 0x98, // Shifts a left b bits, preserving sign.\n    SHR = 0x99, // Shifts a right b bits, preserving sign.\n    BOOLAND = 0x9A, // If both a and b are not 0, the output is 1. Otherwise 0.\n    BOOLOR = 0x9B, // If a or b is not 0, the output is 1. Otherwise 0.\n    NUMEQUAL = 0x9C, // Returns 1 if the numbers are equal, 0 otherwise.\n    NUMNOTEQUAL = 0x9E, // Returns 1 if the numbers are not equal, 0 otherwise.\n    LT = 0x9F, // Returns 1 if a is less than b, 0 otherwise.\n    GT = 0xA0, // Returns 1 if a is greater than b, 0 otherwise.\n    LTE = 0xA1, // Returns 1 if a is less than or equal to b, 0 otherwise.\n    GTE = 0xA2, // Returns 1 if a is greater than or equal to b, 0 otherwise.\n    MIN = 0xA3, // Returns the smaller of a and b.\n    MAX = 0xA4, // Returns the larger of a and b.\n    WITHIN = 0xA5, // Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\n\n    // Crypto\n    // RIPEMD160 = 0xA6, // The input is hashed using RIPEMD-160.\n    SHA1 = 0xA7, // The input is hashed using SHA-1.\n    SHA256 = 0xA8, // The input is hashed using SHA-256.\n    HASH160 = 0xA9,\n    HASH256 = 0xAA,\n    // tslint:disable-next-line:max-line-length\n    CHECKSIG = 0xAC, // The entire transaction's outputs inputs and script (from the most recently-executed CODESEPARATOR to the end) are hashed. The signature used by CHECKSIG must be a valid signature for this hash and public key. If it is 1 is returned 0 otherwise.\n    // tslint:disable-next-line:max-line-length\n    CHECKMULTISIG = 0xAE, // For each signature and public key pair CHECKSIG is executed. If more public keys than signatures are listed some key/sig pairs can fail. All signatures need to match a public key. If all signatures are valid 1 is returned 0 otherwise. Due to a bug one extra unused value is removed from the stack.\n\n    // Array\n\t// tslint:disable:indent\n    ARRAYSIZE  = 0xC0,\n\tPACK       = 0xC1,\n\tUNPACK     = 0xC2,\n\tPICKITEM   = 0xC3,\n\tSETITEM    = 0xC4,\n\tNEWARRAY   = 0xC5,\n\tNEWSTRUCT  = 0xC6,\n\tNEWMAP     = 0xC7,\n\tAPPEND     = 0xC8,\n\tREVERSE    = 0xC9,\n\tREMOVE     = 0xCA,\n\tHASKEY     = 0xCB,\n\tKEYS       = 0xCC,\n\tVALUES     = 0xCD,\n\n\t// Exception\n\tTHROW = 0xF0,\n\tTHROWIFNOT = 0xF1\n}\n\nexport default OPCODE;\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// export const ADDR_VERSION = '41';\nexport const ADDR_VERSION = '17';\n\nexport const DEFAULT_SCRYPT = {\n    cost: 4096, // 除以2时间减半\n    blockSize: 8,\n    parallel: 8,\n    size: 64\n};\n\n// specified by oep, same as bip38\nexport const OEP_HEADER = '0142';\n\nexport const OEP_FLAG = 'e0';\n\n// Ont://nativeMethod?param1=xxx&param2=yyy\nexport const WEBVIEW_SCHEME = 'Ont';\n\nexport const DEFAULT_ALGORITHM = {\n    algorithm: 'ECDSA',\n    parameters: {\n        curve: 'P-256' // also called secp256r1\n    }\n};\n\nexport const DEFAULT_SM2_ID = '1234567812345678';\n\nexport const TEST_NODE = 'polaris1.ont.io'; // 0.9\n// export const TEST_NODE = '139.219.129.26'; // 0.81\n// export const TEST_NODE = '192.168.50.74';\n// export const TEST_NODE = '127.0.0.1';\n\nexport const MAIN_NODE = 'dappnode1.ont.io';\n\nexport const HTTP_REST_PORT = '20334';\nexport const HTTP_WS_PORT = '20335';\nexport const HTTP_JSON_PORT = '20336';\n\nexport const REST_API = {\n    getBalance: '/api/v1/balance',\n    sendRawTx: '/api/v1/transaction',\n    getMerkleProof: '/api/v1/merkleproof' // end with /txHash\n};\n\nexport const ONT_NETWORK = {\n    MAIN: 'MainNet',\n    TEST: 'TestNet'\n};\n\nexport const TEST_ONT_URL = {\n    SOCKET_URL: `ws://${TEST_NODE}:${HTTP_WS_PORT}`,\n\n    RPC_URL: `http://${TEST_NODE}:${HTTP_JSON_PORT}`,\n\n    REST_URL: `http://${TEST_NODE}:${HTTP_REST_PORT}`,\n\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\n};\n\nexport const MAIN_ONT_URL = {\n    SOCKET_URL: `ws://${MAIN_NODE}:${HTTP_WS_PORT}`,\n\n    RPC_URL: `http://${MAIN_NODE}:${HTTP_JSON_PORT}/`,\n\n    REST_URL: `http://${MAIN_NODE}:${HTTP_REST_PORT}/`,\n\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\n\n};\n\nexport const TOKEN_TYPE = {\n    ONT: 'ONT',\n    ONG: 'ONG'\n};\n\nexport const DEFAULT_GAS_LIMIT = 30000;\n\nexport const NATIVE_INVOKE_NAME = 'Ontology.Native.Invoke';\n\nexport const TX_MAX_SIG_SIZE = 16;\n\n// tslint:disable-next-line:quotemark\nexport const ONT_BIP44_PATH = \"m/44'/1024'/0'/0/0\";\n\nexport const UNBOUND_GENERATION_AMOUNT = [5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n\nexport const UNBOUND_TIME_INTERVAL = 31536000;\n\nexport const ONT_TOTAL_SUPPLY = 1000000000;\n\nexport const GENESIS_BLOCK_TIMESTAMP = 1530316800;\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport axios from 'axios';\nimport * as bip39 from 'bip39';\nimport * as cryptoJS from 'crypto-js';\nimport * as Long from 'long';\nimport * as secureRandom from 'secure-random';\nimport { ONT_TOTAL_SUPPLY, UNBOUND_GENERATION_AMOUNT, UNBOUND_TIME_INTERVAL, WEBVIEW_SCHEME } from './consts';\nimport { ERROR_CODE } from './error';\n/**\n * Turn hex string into array buffer\n * @param str hex string\n */\nexport function hexstring2ab(str: string): number[] {\n    const result = [];\n\n    while (str.length >= 2) {\n        result.push(parseInt(str.substring(0, 2), 16));\n        str = str.substring(2, str.length);\n    }\n\n    return result;\n}\n\n/**\n * Turn array buffer into hex string\n * @param arr Array like value\n */\nexport function ab2hexstring(arr: any): string {\n    let result: string = '';\n    const uint8Arr: Uint8Array = new Uint8Array(arr);\n    for (let i = 0; i < uint8Arr.byteLength; i++) {\n        let str = uint8Arr[i].toString(16);\n        str = str.length === 0\n            ? '00'\n            : str.length === 1\n                ? '0' + str\n                : str;\n        result += str;\n    }\n    return result;\n}\n\n /**\n  * Turn ArrayBuffer or array-like oject into normal string\n  * @param buf\n  */\nexport function ab2str(buf: ArrayBuffer | number[]): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\n}\n\n/**\n * Turn normal string into ArrayBuffer\n * @param str Normal string\n */\nexport function str2ab(str: string) {\n    const buf = new ArrayBuffer(str.length); // 每个字符占用1个字节\n    const bufView = new Uint8Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n}\n\n/**\n * Turn normal string into hex string\n * @param str Normal string\n */\nexport function str2hexstr(str: string) {\n    return ab2hexstring(str2ab(str));\n}\n\n/**\n * Turn hex string into normal string\n * @param str Hex string\n */\nexport function hexstr2str(str: string) {\n    return ab2str(hexstring2ab(str));\n}\n\n/**\n * return the (length of bytes) + bytes\n * @param hex Hex string\n */\nexport function hex2VarBytes(hex: string) {\n    let result = '';\n    result += num2VarInt(hex.length / 2);\n    result += hex;\n    return result;\n}\n\n/**\n * return the length of string(bytes) + string(bytes)\n * @param str Normal string\n */\nexport function str2VarBytes(str: string) {\n    let result = '';\n    const hex = str2hexstr(str);\n    const hexLen = num2VarInt(hex.length / 2);\n    result += hexLen;\n    result += hex;\n    return result;\n}\n\n/**\n * return the byte of boolean value\n * @param v\n */\nexport function bool2VarByte(v: boolean) {\n    return v ? '01' : '00';\n}\n\n/**\n * Do xor operation with two strings\n * @param str1 Hex string\n * @param str2 Hex string\n */\nexport function hexXor(str1: string, str2: string): string {\n    if (str1.length !== str2.length) {\n        throw new Error('strings are disparate lengths');\n    }\n    if (str1.length % 2 !== 0) {\n        throw new Error('strings must be hex');\n    }\n\n    const result = new ArrayBuffer(str1.length / 2);\n    const result8 = new Uint8Array(result);\n    for (let i = 0; i < str1.length; i += 2) {\n        // tslint:disable-next-line:no-bitwise\n        result8[i / 2] = (parseInt(str1.substr(i, 2), 16) ^ parseInt(str2.substr(i, 2), 16));\n    }\n    return ab2hexstring(result);\n}\n\n/**\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\n * @param {number} num\n * @param {number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\n * @param {boolean} littleEndian - Encode the hex in little endian form\n * @return {string}\n */\nexport const num2hexstring = (num: number, size = 1, littleEndian = false) => {\n    if (num < 0) {\n        throw new RangeError('num must be >=0');\n    }\n    if (size % 1 !== 0) {\n        throw new Error('size must be a whole integer');\n    }\n    if (!Number.isSafeInteger(num)) {\n        throw new RangeError(`num (${num}) must be a safe integer`);\n    }\n\n    size = size * 2;\n    let hexstring = num.toString(16);\n    hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n    if (littleEndian) {\n        hexstring = reverseHex(hexstring);\n    }\n    return hexstring;\n};\n\n/**\n * Converts a number to a hex\n * @param {number} num - The number\n * @returns {string} hexstring of the variable Int.\n */\nexport const num2VarInt = (num: number) => {\n    if (num < 0xfd) {\n        return num2hexstring(num);\n    } else if (num <= 0xffff) {\n        // uint16\n        return 'fd' + num2hexstring(num, 2, true);\n    } else if (num <= 0xffffffff) {\n        // uint32\n        return 'fe' + num2hexstring(num, 4, true);\n    } else {\n        // uint64\n        return 'ff' + num2hexstring(num, 8, true);\n    }\n};\n\n/**\n * Reverses a hex string, 2 chars as 1 byte\n * @example\n * reverseHex('abcdef') = 'efcdab'\n * @param {string} hex - HEX string\n * @return {string} reversed hex string.\n */\nexport const reverseHex = (hex: string) => {\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Incorrect Length: ${hex}`);\n    }\n    let out = '';\n    for (let i = hex.length - 2; i >= 0; i -= 2) {\n        out += hex.substr(i, 2);\n    }\n    return out;\n};\n\nexport function bigIntFromBytes(bytes: string): Long {\n    const buff = Buffer.from(bytes, 'hex');\n    let data = Array.from(buff.subarray(0));\n    const b = data[data.length - 1];\n\n    if (b >> 7 === 1) {\n        data = data.concat(Array(8 - data.length).fill(255));\n    }\n    return Long.fromBytesLE(data);\n}\n\nexport function bigIntToBytes(value: Long) {\n    let data = value.toBytesLE();\n    const negData = value.neg().toBytesLE();\n    let stop;\n    if (value.isNegative()) {\n        stop = 255;\n    } else {\n        stop = 0;\n    }\n    let b = stop;\n    let pos = 0;\n    for (let i = data.length - 1; i >= 0; i--) {\n        if (data[i] !== stop) {\n            b = value.isNegative() ? negData[i] : data[i];\n            pos = i + 1;\n            break;\n        }\n    }\n    data = data.slice(0, pos);\n\n    if (b >> 7 === 1) {\n        data.push(value.isNegative() ? 255 : 0);\n    }\n    return new Buffer(data).toString('hex');\n}\n\n/**\n * @class StringReader\n * @classdesc A string helper used to read given string as bytes.2 chars as one byte.\n * @param {string} str - The string to read.\n */\nexport class StringReader {\n    str: string;\n    pos: number;\n    size: number;\n    constructor(str = '') {\n        if (str.length % 2 !== 0) {\n            throw new Error('Param\\'s length is not even.');\n        }\n        this.str = str;\n        this.pos = 0;\n        this.size = this.str.length / 2;\n    }\n\n    /**\n     * Checks if reached the end of the string.\n     */\n    isEmpty() {\n        return this.pos >= this.str.length;\n    }\n\n    /**\n     * Reads some bytes.\n     * @param {number} bytes - Number of bytes to read\n     */\n    read(bytes: number) {\n        if (this.isEmpty()) {\n            throw new Error('StringReader reached the end.');\n        }\n        const out = this.str.substr(this.pos, bytes * 2);\n        this.pos += bytes * 2;\n        return out;\n    }\n\n    unreadBytes(bytes: number) {\n        if ( (this.pos - bytes * 2) < 0 ) {\n            throw new Error('Can not unread too many bytes.');\n        }\n        this.pos -= bytes * 2;\n        return;\n    }\n\n    /**\n     * Reads string terminated by NULL.\n     */\n    readNullTerminated(): string {\n        const index = this.str.indexOf('00', this.pos);\n        if (index === -1) {\n            throw new Error('No ending NULL found');\n        }\n\n        const out = this.str.substring(this.pos, index);\n        this.pos = index + 2;\n        return out;\n    }\n\n    /**\n     * First, read one byte as the length of bytes to read. Then read the following bytes.\n     */\n    readNextBytes() {\n        const bytesToRead = this.readNextLen();\n        if (bytesToRead === 0) {\n            return '';\n        }\n\n        return this.read(bytesToRead);\n    }\n\n    /**\n     * Reads one byte as int, which may indicates the length of following bytes to read.\n     * @returns {number}\n     */\n    readNextLen() {\n        let len = parseInt(this.read(1), 16);\n\n        if (len === 0xfd) {\n            len = parseInt(reverseHex(this.read(2)), 16);\n        } else if (len === 0xfe) {\n            len = parseInt(reverseHex(this.read(4)), 16);\n        } else if (len === 0xff) {\n            len = parseInt(reverseHex(this.read(8)), 16);\n        }\n\n        return len;\n    }\n\n    /**\n     * Read Uint8\n     */\n    readUint8() {\n        return parseInt(reverseHex(this.read(1)), 16);\n    }\n\n    /**\n     * read 2 bytes as uint16 in littleEndian\n     */\n    readUint16() {\n        return parseInt(reverseHex(this.read(2)), 16);\n    }\n\n    /**\n     * Read 4 bytes as uint32 in littleEndian\n     */\n    readUint32() {\n        return parseInt(reverseHex(this.read(4)), 16);\n    }\n\n    /**\n     * Read 4 bytes as int in littleEndian\n     */\n    readInt() {\n        return parseInt(reverseHex(this.read(4)), 16);\n    }\n\n    /**\n     * Read 8 bytes as long in littleEndian\n     */\n    readLong() {\n        return parseInt(reverseHex(this.read(8)), 16);\n    }\n\n    readBoolean() {\n        return parseInt(this.read(1), 16) !== 0;\n    }\n}\n\nexport class EventEmitter {\n    handlers: any = {};\n\n    // register event type and handler\n    on(type: string, handler: () => void) {\n        if (typeof this.handlers[type] === 'undefined') {\n            this.handlers[type] = [];\n        }\n        this.handlers[type].push(handler);\n    }\n\n    /**\n     * trigger event\n     * @param { string } type\n     * @param { any } event , is the parameter\n     */\n    trigger(type: string, event?: any) {\n        if (this.handlers[type] instanceof Array) {\n            const handlers = this.handlers[type];\n            for (let i = 0, len = handlers.length; i < len; i++) {\n                handlers[i](event);\n            }\n        }\n    }\n\n    // remove event listener\n    off(type: string) {\n        delete this.handlers[type];\n    }\n}\n\nexport const sendBackResult2Native = (result: string, callback: string) => {\n    if (window && window.prompt) {\n        window.prompt(`${WEBVIEW_SCHEME}://${callback}?params=${result}`);\n    }\n};\n\nexport const axiosPost = (url: string, params: any) => {\n    return axios.post(url, params).then((res: any) => {\n        // tslint:disable-next-line:no-console\n        console.log('axios res:' + res);\n        return res;\n    }).catch((err: any) => {\n        // tslint:disable-next-line:no-console\n        console.log('axios res:' + JSON.stringify(err));\n\n        return err;\n    });\n};\n\n/**\n * Gets current time in unix timestamp format.\n */\nexport function now(): number {\n    return Math.floor(Date.now() / 1000);\n}\n\n/**\n * Computes sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function sha256(data: string) {\n    const hex = cryptoJS.enc.Hex.parse(data);\n    const sha = cryptoJS.SHA256(hex).toString();\n    return sha;\n}\n\n/**\n * Computes ripemd-160 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function ripemd160(data: string) {\n    const hex = cryptoJS.enc.Hex.parse(data);\n    const ripemd = cryptoJS.RIPEMD160(hex).toString();\n    return ripemd;\n}\n\n/**\n * Computes ripemd-160 hash of sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function hash160(SignatureScript: string): string {\n    return ripemd160(sha256(SignatureScript));\n}\n\n/**\n * Generates random ArrayBuffer of specified length.\n *\n * @param len Length of the array to generate\n */\nexport function generateRandomArray(len: number): ArrayBuffer {\n    return secureRandom(len);\n}\n\n/**\n * Generates random ArrayBuffer of specified length encoded as hex string\n *\n * @param len Length of the array to generate\n */\nexport function randomBytes(len: number) {\n    return ab2hexstring(generateRandomArray(len));\n}\n\nexport function generateMnemonic(size: number = 16): string {\n    const random = ab2hexstring(generateRandomArray(size));\n    return bip39.entropyToMnemonic(random);\n}\n\nexport function parseMnemonic(str: string) {\n    return bip39.mnemonicToEntropy(str);\n}\n\nexport function varifyPositiveInt(v: number) {\n    if (!/^[1-9]\\d*$/.test(v.toString())) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    return;\n}\n\nexport function isBase64(str: string): boolean {\n    return Buffer.from(str, 'base64').toString('base64') === str;\n}\n\nexport function isHexString(str: string): boolean {\n    const regexp = /^[0-9a-fA-F]+$/;\n    return regexp.test(str) && (str.length % 2 === 0);\n}\n\nexport function unboundDeadline() {\n    let count = 0;\n    for (const m of UNBOUND_GENERATION_AMOUNT) {\n        count += m;\n    }\n    count *= UNBOUND_TIME_INTERVAL;\n    const numInterval = UNBOUND_GENERATION_AMOUNT.length;\n    if (UNBOUND_GENERATION_AMOUNT[numInterval - 1] !== 1 ||\n        ! ((count - UNBOUND_TIME_INTERVAL < ONT_TOTAL_SUPPLY) && ONT_TOTAL_SUPPLY <= count)) {\n        throw new Error('incompatible constants setting');\n    }\n    return UNBOUND_TIME_INTERVAL * numInterval - (count - ONT_TOTAL_SUPPLY);\n}\n\nexport function calcUnboundOng(balance: number, startOffset: number, endOffset: number) {\n    let amount = 0;\n    if (startOffset >= endOffset) {\n        return 0;\n    }\n    const UNBOUND_DEADLINE = unboundDeadline();\n    if (startOffset < UNBOUND_DEADLINE) {\n        let ustart = Math.floor(startOffset / UNBOUND_TIME_INTERVAL);\n        let istart = startOffset % UNBOUND_TIME_INTERVAL;\n        if (endOffset >= UNBOUND_DEADLINE) {\n            endOffset = UNBOUND_DEADLINE;\n        }\n        const uend = Math.floor(endOffset / UNBOUND_TIME_INTERVAL);\n        const iend = endOffset % UNBOUND_TIME_INTERVAL;\n        while (ustart < uend) {\n            amount += (UNBOUND_TIME_INTERVAL - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\n            ustart++;\n            istart = 0;\n        }\n        amount += (iend - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\n    }\n    return amount * balance;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport * as Long from 'long';\nimport { ERROR_CODE } from './../error';\nimport { bigIntToBytes, reverseHex } from './../utils';\n\n// const SIZE = 8;\n/**\n * Big positive integer base on BigNumber\n */\nexport default class BigInt {\n    /**\n     * Create BigInt from string\n     * @param hex Byte string value\n     */\n    static fromHexstr(hex: string): BigInt {\n        hex = reverseHex(hex);\n        const bi = new BigNumber(hex, 16).toString();\n        return new BigInt(bi);\n    }\n\n    value: string | number;\n\n    constructor(value: string | number) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.value = value;\n    }\n\n    /**\n     * Create hex string from BigInt\n     */\n    toHexstr(): string {\n        const bi = Long.fromValue(this.value);\n        const hex = bigIntToBytes(bi);\n        return hex;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Schema used during signing and verification of signature.\n */\nexport class SignatureScheme {\n    static values: SignatureScheme[] = [];\n\n    static ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\n    static ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\n    static ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\n    static ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\n    static ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\n    static SM2withSM3 = new SignatureScheme('SM3withSM2', 9, 'SM');\n    static EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\n\n    /**\n     * Finds Signature schema corresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Signature schema corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Signature schema corresponding to specified label representation in JWS.\n     *\n     * @param label Label\n     */\n    static fromLabelJWS(label: string): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.labelJWS === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n    hex: number;\n    labelJWS: string;\n\n    constructor(label: string, hex: number, labelJWS: string) {\n        this.label = label;\n        this.hex = hex;\n        this.labelJWS = labelJWS;\n\n        SignatureScheme.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Type of key. ECDSA is the default one to use.\n */\nexport class KeyType {\n    static values: KeyType[] = [];\n\n    static ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\n    static SM2 = new KeyType('SM2', 0x13, SignatureScheme.SM2withSM3);\n    static EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\n\n    /**\n     * Finds Key type corresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): KeyType {\n        const item = KeyType.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Key type corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): KeyType {\n        const item = KeyType.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n    hex: number;\n    defaultSchema: SignatureScheme;\n\n    constructor(label: string, hex: number, defaultSchema: SignatureScheme) {\n        this.label = label;\n        this.hex = hex;\n        this.defaultSchema = defaultSchema;\n\n        KeyType.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Elliptic curve used.\n */\nexport class CurveLabel {\n    static values: CurveLabel[] = [];\n\n    static SECP224R1 = new CurveLabel('P-224', 1, 'p224');\n    static SECP256R1 = new CurveLabel('P-256', 2, 'p256');\n    static SECP384R1 = new CurveLabel('P-384', 3, 'p384');\n    static SECP521R1 = new CurveLabel('P-521', 4, 'p521');\n    static SM2P256V1 = new CurveLabel('sm2p256v1', 20, 'sm2p256v1');\n    static ED25519 = new CurveLabel('ed25519', 25, 'ed25519');\n\n    /**\n     * Finds Curvecorresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): CurveLabel {\n        const item = CurveLabel.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Curve corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): CurveLabel {\n        const item = CurveLabel.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n    hex: number;\n    preset: string;\n\n    constructor(label: string, hex: number, preset: string) {\n        this.label = label;\n        this.hex = hex;\n        this.preset = preset;\n\n        CurveLabel.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as cryptoJS from 'crypto-js';\nimport { sha3_224, sha3_256, sha3_384, sha3_512 } from 'js-sha3';\nimport { sm3 } from 'sm.js';\nimport { DEFAULT_ALGORITHM } from '../consts';\nimport { hexstring2ab } from '../utils';\nimport { CurveLabel } from './CurveLabel';\nimport { KeyType } from './KeyType';\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Specific parameters for the key type.\n */\nexport class KeyParameters {\n    /**\n     * Create KeyParameters from json.\n     * @param json JsonKeyParameters\n     */\n    static deserializeJson(json: JsonKeyParameters): KeyParameters {\n        return new KeyParameters(\n        CurveLabel.fromLabel(json.curve)\n        );\n    }\n    curve: CurveLabel;\n\n    constructor(curve: CurveLabel) {\n        this.curve = curve;\n    }\n\n    /**\n     * Serialize KeyParameters to json.\n     */\n    serializeJson(): JsonKeyParameters {\n        return {\n            curve: this.curve.label\n        };\n    }\n}\n\n/**\n * Common representation of private or public key\n */\nexport class Key {\n    /**\n     * Algorithm used for key generation.\n     */\n    algorithm: KeyType;\n\n    /**\n     * Parameters of the algorithm.\n     */\n    parameters: KeyParameters;\n\n    /**\n     * Key data.\n     */\n    key: string;\n\n    /**\n     * Creates Key.\n     *\n     * If no algorithm or parameters are specified, default values will be used.\n     * This is strongly discurraged, because it will forbid using other Key types.\n     * Therefore use it only for testing.\n     *\n     * @param key Hex encoded key value\n     * @param algorithm Key type\n     * @param parameters Parameters of the key type\n     */\n    constructor(key: string, algorithm?: KeyType, parameters?: KeyParameters) {\n        this.key = key;\n\n        if (algorithm === undefined) {\n            algorithm = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\n        }\n\n        if (parameters === undefined) {\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\n        }\n\n        this.algorithm = algorithm;\n        this.parameters = parameters;\n    }\n\n    /**\n     * Computes hash of message using hashing function of signature schema.\n     *\n     * @param msg Hex encoded input data\n     * @param scheme Signing schema to use\n     */\n    computeHash(msg: string, scheme: SignatureScheme): string {\n        switch (scheme) {\n        case SignatureScheme.ECDSAwithSHA224:\n            return cryptoJS.SHA224(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA256:\n            return cryptoJS.SHA256(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA384:\n            return cryptoJS.SHA384(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.EDDSAwithSHA512:\n            return cryptoJS.SHA512(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA3_224:\n            return sha3_224(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithSHA3_256:\n            return sha3_256(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithSHA3_384:\n            return sha3_384(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithSHA3_512:\n            return sha3_512(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return cryptoJS.RIPEMD160(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.SM2withSM3:\n            return (new sm3()).sum(hexstring2ab(msg), 'hex');\n        default:\n            throw new Error('Unsupported hash algorithm.');\n        }\n    }\n\n    /**\n     * Tests if signing schema is compatible with key type.\n     *\n     * @param schema Signing schema to use\n     */\n    isSchemaSupported(schema: SignatureScheme): boolean {\n        switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return this.algorithm === KeyType.ECDSA;\n        case SignatureScheme.EDDSAwithSHA512:\n            return this.algorithm === KeyType.EDDSA;\n        case SignatureScheme.SM2withSM3:\n            return this.algorithm === KeyType.SM2;\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Gets JSON representation of the Key (Public/Private).\n     */\n    serializeJson(): JsonKey {\n        return {\n            algorithm: this.algorithm.label,\n            parameters: this.parameters.serializeJson(),\n            key: this.key\n        };\n    }\n}\n\n/**\n * Json representation of the Key.\n */\nexport interface JsonKey {\n    algorithm: string;\n    parameters: JsonKeyParameters;\n    key: string | null;\n    external?: any | null;\n}\n\n/**\n * Json representation of the Key parameters.\n */\nexport interface JsonKeyParameters {\n    curve: string;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as elliptic from 'elliptic';\nimport { sm2 } from 'sm.js';\nimport { DEFAULT_SM2_ID } from '../consts';\nimport { hexstr2str, hexstring2ab, num2hexstring, StringReader } from '../utils';\nimport { CurveLabel } from './CurveLabel';\nimport { Key, KeyParameters } from './Key';\nimport { KeyType } from './KeyType';\nimport { Signable } from './signable';\nimport { Signature } from './Signature';\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Class to manage the public key with some userful functions.\n */\nexport class PublicKey extends Key {\n    /**\n     * Creates PublicKey from Hex representation.\n     *\n     * @param sr String reader\n     * @param length Byte length of the serialized object\n     *\n     */\n    static deserializeHex(sr: StringReader, length: number = 33): PublicKey {\n        if (length === 33) { // ECDSA\n            const algorithm = KeyType.ECDSA;\n            const curve = CurveLabel.SECP256R1;\n            const pk = sr.read(33);\n            return new PublicKey(pk, algorithm, new KeyParameters(curve));\n        } else {\n            const algorithmHex = parseInt(sr.read(1), 16);\n            const curveHex = parseInt(sr.read(1), 16);\n            const pk = sr.read(length - 2);\n\n            return new PublicKey(\n                pk,\n                KeyType.fromHex(algorithmHex),\n                new KeyParameters(CurveLabel.fromHex(curveHex))\n            );\n        }\n    }\n\n    /**\n     * Verifies if the signature was created with private key corresponding to supplied public key\n     * and was not tampered with using signature schema.\n     *\n     * @param msg Hex encoded input data or Signable object\n     * @param signature Signature object\n     */\n    verify(msg: string | Signable, signature: Signature): boolean {\n        if (!this.isSchemaSupported(signature.algorithm)) {\n            throw new Error('Signature schema does not match key type.');\n        }\n\n        // retrieves content to sign if not provided directly\n        if (typeof msg !== 'string') {\n            msg = msg.getSignContent();\n        }\n\n        let hash: string;\n        if (signature.algorithm === SignatureScheme.SM2withSM3) {\n            // library sm.js (SM2withSM3) has implemented hashing as part of verification, therefore it is skipped\n            hash = msg;\n        } else {\n            hash = this.computeHash(msg, signature.algorithm);\n        }\n\n        return this.verifySignature(hash, signature.value, signature.algorithm);\n    }\n\n    /**\n     * Serializes public key to Hex representation.\n     *\n     * Length definition is not included.\n     */\n    serializeHex(): string {\n        let result = '';\n        switch (this.algorithm) {\n        case KeyType.ECDSA:\n            result += this.key;\n            break;\n        case KeyType.EDDSA:\n        case KeyType.SM2:\n            result += num2hexstring(this.algorithm.hex);\n            result += num2hexstring(this.parameters.curve.hex);\n            result += this.key;\n            break;\n        }\n        return result;\n    }\n\n    /**\n     * For internal use.\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     * @param schema Signature scheme to use\n     */\n    verifySignature(hash: string, signature: string, schema: SignatureScheme): boolean {\n        switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return this.verifyEcDSASignature(hash, signature);\n        case SignatureScheme.EDDSAwithSHA512:\n            return this.verifyEdDSASignature(hash, signature);\n        case SignatureScheme.SM2withSM3:\n            return this.verifySM2Signature(hash, signature);\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Verifies EcDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     */\n    verifyEcDSASignature(hash: string, signature: string): boolean {\n        const r = signature.substr(0, 64);\n        const s = signature.substr(64, 64);\n\n        const ec = new elliptic.ec(this.parameters.curve.preset);\n        return ec.verify(hash, { r, s }, this.key, 'hex');\n    }\n\n    /**\n     * Verifies EdDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     */\n    verifyEdDSASignature(hash: string, signature: string): boolean {\n        const r = signature.substr(0, 64);\n        const s = signature.substr(64, 64);\n\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\n        return eddsa.verify(hash, { r, s }, this.key, 'hex');\n    }\n\n    /**\n     * Verifies SM2 signature of message hash.\n     *\n     * Only default SM2 ID is supported.\n     *\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     */\n    verifySM2Signature(hash: string, signature: string): boolean {\n        const reader = new StringReader(signature);\n\n        const id = hexstr2str(reader.readNullTerminated());\n        if (id !== DEFAULT_SM2_ID && id !== '') {\n            throw new Error('Unsupported SM2 id used.');\n        }\n\n        const r = reader.read(32);\n        const s = reader.read(32);\n\n        const keyPair = sm2.SM2KeyPair(this.key);\n        return keyPair.verify(hexstring2ab(hash), r, s);\n    }\n}\n\n/**\n * Public key status enumaration.\n */\nexport class PublicKeyStatus {\n    static values: PublicKeyStatus[] = [];\n\n    static IN_USE = new PublicKeyStatus('in use');\n\n    static REVOKED = new PublicKeyStatus('revoked');\n\n    /**\n     * Finds Public key status corresponding to specified label representation.\n     *\n     * @param label Hex encoded label\n     */\n    static fromHexLabel(hexLabel: string): PublicKeyStatus {\n        const label = hexstr2str(hexLabel);\n\n        const item = PublicKeyStatus.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n\n    constructor(label: string) {\n        this.label = label;\n\n        PublicKeyStatus.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as elliptic from 'elliptic';\nimport { sm2 } from 'sm.js';\nimport BigInt from '../common/bigInt';\nimport { KeyType } from '../crypto/KeyType';\nimport { PublicKey } from '../crypto/PublicKey';\nimport { ERROR_CODE } from '../error';\nimport { num2hexstring, StringReader } from './../utils';\nimport opcode from './opcode';\n// The sorting rules is as follows:\n//    1. if keys have different types, then sorted by the KeyType value.\n//    2. else,\n//       2.1. ECDSA or SM2:\n//           2.1.1. if on different curves, then sorted by the curve label.\n//           2.1.2. else if x values are different, then sorted by x.\n//           2.1.3. else sorted by y.\n//       2.2. EdDSA: sorted by the byte sequence directly.\nexport function comparePublicKeys(a: PublicKey, b: PublicKey) {\n    if (a.algorithm !== b.algorithm) {\n        return a.algorithm.hex - b.algorithm.hex;\n    }\n    switch (a.algorithm) {\n    case KeyType.ECDSA:\n        const ec = new elliptic.ec(a.parameters.curve.preset);\n        const paKey = ec.keyFromPublic(a.key, 'hex', true);\n        const pbKey = ec.keyFromPublic(b.key, 'hex', true);\n        const pa = paKey.getPublic();\n        const pb = pbKey.getPublic();\n        if (pa.getX() !== pb.getX()) {\n            return pa.getX() - pb.getX();\n        } else {\n            return pa.getY() - pb.getY();\n        }\n    case KeyType.SM2:\n        const pka = new sm2.SM2KeyPair();\n        const pkb = new sm2.SM2KeyPair();\n        pka._pubFromString(a.key);\n        pkb._pubFromString(b.key);\n        if (pka.getX().toString() !== pkb.getX().toString()) {\n            return Number(pka.getX().toString()) - Number(pkb.getX().toString());\n        } else {\n            return Number(pka.getY().toString()) - Number(pkb.getY().toString());\n        }\n    case KeyType.EDDSA:\n        return Number(a.key) - Number(b.key);\n    default:\n        return 0;\n    }\n}\n\nexport function pushOpCode(op: opcode): string {\n    return num2hexstring(op);\n}\n\nexport function pushPubKey(pk: PublicKey): string {\n    const pkStr = pk.serializeHex();\n    return pushBytes(pkStr);\n}\n\nexport function pushBigInt(num: number): string {\n    if (num === -1) {\n        return num2hexstring(opcode.PUSHM1);\n    }\n    if (num === 0) {\n        return num2hexstring(opcode.PUSH0);\n    }\n    if (num > 0 && num <= 16) {\n        return num2hexstring(opcode.PUSH1 - 1 + num);\n    }\n    return num2hexstring(num, 8, true);\n}\n\nexport function pushNum(num: number): string {\n    if ( num === 0 ) {\n        return pushOpCode(opcode.PUSH0);\n    } else if ( num <= 16 ) {\n        return num2hexstring(num - 1 + opcode.PUSH1);\n    }\n    const bint = new BigInt(num.toString());\n    return pushBytes(bint.toHexstr());\n}\n\nexport function pushBytes(hexstr: string): string {\n    let result = '';\n    if (hexstr.length === 0) {\n        throw new Error('pushBytes error, hexstr is empty.');\n    }\n    const len = hexstr.length / 2;\n    if (len <= opcode.PUSHBYTES75 + 1 - opcode.PUSHBYTES1 ) {\n        result += num2hexstring(len + opcode.PUSHBYTES1 - 1);\n    } else if (len < 0x100) {\n        result += num2hexstring(opcode.PUSHDATA1);\n        result += num2hexstring(len);\n    } else if (len < 0x10000) {\n        result += num2hexstring(opcode.PUSHDATA2);\n        result += num2hexstring(len, 2, true);\n    } else if (len < 0x100000000) {\n        result += num2hexstring(opcode.PUSHDATA4);\n        result += num2hexstring(len, 4, true);\n    } else {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    result += hexstr;\n    return result;\n}\n\nexport function programFromPubKey(pk: PublicKey): string {\n    let result = '';\n    result += pushPubKey(pk);\n    result += pushOpCode(opcode.CHECKSIG);\n    return result;\n}\n\nexport function programFromMultiPubKey(pubkeys: PublicKey[], m: number): string {\n    const n = pubkeys.length;\n    if (!(1 <= m && m <= n && n <= 1024)) {\n        throw new Error('Wrong multi-sig param');\n    }\n    // const pkStrList = pubkeys.map( (p) => p.serializeHex());\n    // pkStrList.sort();\n\n    pubkeys.sort(comparePublicKeys);\n\n    let result = '';\n    result += pushNum(m);\n\n    for (const pk of pubkeys) {\n        result += pushBytes(pk.serializeHex());\n    }\n    result += pushNum(n);\n    result += pushOpCode(opcode.CHECKMULTISIG);\n    return result;\n}\n\nexport function programFromParams(sigs: string[]): string {\n    let result = '';\n    sigs.sort();\n    for ( const s of sigs) {\n        result += pushBytes(s);\n    }\n    return result;\n}\n\nexport function readOpcode(sr: StringReader) {\n    return parseInt(sr.read(1), 16);\n}\n\nexport function readNum(sr: StringReader) {\n    let code;\n    try {\n        code = readOpcode(sr);\n    } catch (err) {\n        return 0;\n    }\n    let num = code - opcode.PUSH1 + 1;\n    if (code === opcode.PUSH0) {\n        readOpcode(sr);\n        return 0;\n    } else if (1 <= num && num <= 16) {\n        readOpcode(sr);\n        return num;\n    }\n    const bint = BigInt.fromHexstr(sr.readNextBytes());\n    num = parseInt(bint.value.toString(), 10);\n    return num;\n}\n\nexport function readBytes(sr: StringReader) {\n    const code = readOpcode(sr);\n    let keylen;\n    if (code === opcode.PUSHDATA4) {\n        keylen = sr.readUint32();\n    } else if (code === opcode.PUSHDATA2) {\n        keylen = sr.readUint16();\n    } else if (code === opcode.PUSHDATA1) {\n        keylen = sr.readUint8();\n    } else if (code <= opcode.PUSHBYTES75 && code >= opcode.PUSHBYTES1) {\n        keylen = code - opcode.PUSHBYTES1 + 1;\n    } else {\n        throw new Error('unexpected opcode: ' + code);\n    }\n    return sr.read(keylen);\n}\n\nexport function readPubKey(sr: StringReader) {\n    const pkStr = sr.readNextBytes();\n    return PublicKey.deserializeHex(new StringReader(pkStr));\n}\n\nexport function getParamsFromProgram(hexstr: string): string[] {\n    const sigs = [];\n    const sr = new StringReader(hexstr);\n    while (!sr.isEmpty()) {\n        sigs.push(readBytes(sr));\n    }\n    return sigs;\n}\n\nexport class ProgramInfo {\n    M: number;\n    pubKeys: PublicKey[];\n}\nexport function getProgramInfo(hexstr: string): ProgramInfo {\n    const info = new ProgramInfo();\n    const end = parseInt(hexstr.substr(-2, 2), 16);\n    if (end === opcode.CHECKSIG) {\n        const sr = new StringReader(hexstr);\n        const pk = readPubKey(sr);\n        info.M = 1;\n        info.pubKeys = [pk];\n        return info;\n    } else if (end === opcode.CHECKMULTISIG) {\n        const sr = new StringReader(hexstr);\n        const m = parseInt(sr.read(1), 16) - opcode.PUSH1 + 1;\n        const n = parseInt(hexstr.substr(-4, 2), 16) - opcode.PUSH1 + 1;\n        info.M = m;\n        info.pubKeys = [];\n        for (let i = 0; i < n; i++) {\n            const key = readPubKey(sr);\n            info.pubKeys.push(key);\n        }\n        // const n = readNum(sr);\n        return info;\n    } else {\n        throw new Error('Unsupported program.');\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nexport enum ParameterType  {\n    Boolean = 'Boolean',\n    Integer = 'Integer',\n    ByteArray = 'ByteArray',\n    Interface = 'Interface',\n    Array = 'Array',\n    Struct = 'Struct',\n    Map = 'Map',\n    String  = 'String',\n    Int = 'Int',\n    Long = 'Long', // value should be string\n    IntArray = 'IntArray',\n    LongArray = 'LongArray',\n    Address = 'Address'\n}\n\nexport enum ParameterTypeVal {\n    ByteArray = 0x00,\n    Boolean = 0x01,\n    Integer = 0x02,\n    Interface = 0x40,\n    Array = 0x80,\n    Struct = 0x81,\n    Map = 0x82\n}\n\n/**\n * Decribes the parameter.\n */\nexport class Parameter {\n    public name: string;\n    public type: ParameterType;\n    public value: any;\n    constructor(name: string, type: ParameterType, value: any) {\n        this.name = name;\n        this.type = type;\n        this.value = value;\n    }\n\n    getName(): string {\n        return this.name;\n    }\n\n    getType(): ParameterType {\n        return this.type;\n    }\n\n    getValue(): any {\n        return this.value;\n    }\n\n    setValue(value: any): boolean {\n        if (value.type === this.type && value.name === this.name && value.value != null) {\n            this.value = value.value;\n            return true;\n        }\n        return false;\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Struct is a special kind of parameter that used in smart contract.\n */\nexport default class Struct {\n    list: any[];\n\n    constructor() {\n        this.list = [];\n    }\n    /**\n     * Add arguments to struct.\n     * @param args Array of some kinds of value.\n     * Boolean, number, string, Address and Struct are supported.\n     */\n    add(...args: any[]) {\n        for (const a of args) {\n            this.list.push(a);\n        }\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport BigInt from '../common/bigInt';\nimport { ERROR_CODE } from '../error';\nimport AbiFunction from '../smartcontract/abi/abiFunction';\nimport { Parameter, ParameterType, ParameterTypeVal } from '../smartcontract/abi/parameter';\nimport Struct from '../smartcontract/abi/struct';\nimport { bigIntFromBytes, hexstr2str, num2hexstring, num2VarInt, str2hexstr, StringReader } from '../utils';\nimport opcode from './opcode';\n\nexport const pushBool = (param: boolean) => {\n    let result = '';\n    if (param) {\n        result += num2hexstring(opcode.PUSHT);\n    } else {\n        result += num2hexstring(opcode.PUSHF);\n    }\n    return result;\n};\n\nexport const pushInt = (param: number) => {\n    let result = '';\n    if (param === -1) {\n        result = num2hexstring(opcode.PUSHM1);\n    } else if (param === 0) {\n        result = num2hexstring(opcode.PUSH0);\n    } else if (param > 0 && param < 16) {\n        const num = opcode.PUSH1 - 1 + param;\n        result = num2hexstring(num);\n    } else {\n        const biHex = new BigInt(param.toString()).toHexstr();\n        result = pushHexString(biHex);\n    }\n\n    return result;\n};\n\nexport const pushBigNum = (param: BigNumber) => {\n    let result = '';\n    if (param.isEqualTo(-1)) {\n        result = num2hexstring(opcode.PUSHM1);\n    } else if (param.isEqualTo(0)) {\n        result = num2hexstring(opcode.PUSH0);\n    } else if (param.isGreaterThan(0) && param.isLessThan(16)) {\n        const num = opcode.PUSH1 - 1 + param.toNumber();\n        result = num2hexstring(num);\n    } else {\n        const biHex = new BigInt(param.toString()).toHexstr();\n        result = pushHexString(biHex);\n    }\n    return result;\n};\n\nexport const pushHexString = (param: string) => {\n    let result = '';\n    const len = param.length / 2;\n    if (len <= opcode.PUSHBYTES75) {\n        result += num2hexstring(len);\n    } else if (len < 0x100) {\n        result += num2hexstring(opcode.PUSHDATA1);\n        result += num2hexstring(len);\n    } else if (len < 0x10000) {\n        result += num2hexstring(opcode.PUSHDATA2);\n        result += num2hexstring(len, 2, true);\n    } else {\n        result += num2hexstring(opcode.PUSHDATA4);\n        result += num2hexstring(len, 4, true);\n    }\n    result += param;\n    return result;\n};\n\nexport const getStructBytes = (val: Struct) => {\n    let result = '';\n    result += num2hexstring(ParameterTypeVal.Struct);\n    result += num2hexstring(val.list.length); // val is array-like\n    for (const v of val.list) {\n        if (typeof v === 'string') {// consider as hex string\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(v);\n        } else if (typeof v === 'number') {\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(num2VarInt(v));\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n    return result;\n};\n\nexport const getMapBytes = (val: Map<string, Parameter>) => {\n    let result = '';\n    result += num2hexstring(ParameterTypeVal.Map);\n    result += num2hexstring(val.size);\n    for (const k of val.keys()) {\n        result += num2hexstring(ParameterTypeVal.ByteArray);\n        result += pushHexString(str2hexstr(k));\n        const p = val.get(k);\n        if (p && p.getType() === ParameterType.ByteArray) {\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(p.getValue());\n        } else if (p && p.getType() === ParameterType.String) {\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(str2hexstr(p.getValue()));\n        } else if (p && p.getType() === ParameterType.Integer) {\n            result += num2hexstring(ParameterTypeVal.Integer);\n            result += pushHexString(num2VarInt(p.getValue()));\n        } else if (p && p.getType() === ParameterType.Long) {\n            result += num2hexstring(ParameterTypeVal.Integer);\n            result += pushHexString(num2VarInt(p.getValue()));\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n    return result;\n};\n\nexport const pushMap = (val: Map<string, any>) => {\n    let result = '';\n    result += num2hexstring(opcode.NEWMAP);\n    result += num2hexstring(opcode.TOALTSTACK);\n    for (const k of val.keys()) {\n        result += num2hexstring(opcode.DUPFROMALTSTACK);\n        result += pushHexString(str2hexstr(k));\n        result += pushParam(val.get(k));\n        result += num2hexstring(opcode.SETITEM);\n    }\n    result += num2hexstring(opcode.FROMALTSTACK);\n    return result;\n};\n\nexport const pushParam = (p: any) => {\n    if (!p) {\n        throw Error('Parameter can not be undefined');\n    }\n    let result = '';\n    if (p.type === ParameterType.ByteArray) {\n        result += pushHexString(p.value);\n    } else if (p.type === ParameterType.String) {\n        result += pushHexString(str2hexstr(p.value));\n    } else if (p.type === ParameterType.Boolean) {\n        result += pushBool(Boolean(p.value));\n        result += num2hexstring(opcode.PUSH0);\n        result += num2hexstring(opcode.BOOLOR);\n    } else if (p instanceof Map) {\n        result += pushMap(p);\n    } else if (p.type === ParameterType.Array) {\n        for (let i = p.value.length - 1; i > -1; i--) {\n            result += pushParam(p.value[i]);\n        }\n        result += pushInt(p.value.length);\n        result += num2hexstring(opcode.PACK);\n    } else if (p.type === ParameterType.Integer) {\n        result += pushInt(p.value);\n        result += num2hexstring(opcode.PUSH0);\n        result += num2hexstring(opcode.ADD);\n    } else if (p.type === ParameterType.Long) {\n        result += pushBigNum(new BigNumber(p.value));\n        result += num2hexstring(opcode.PUSH0);\n        result += num2hexstring(opcode.ADD);\n    } else {\n        throw Error('Invalid parameter type: ' + p.type);\n    }\n    return result;\n};\n\nexport const serializeAbiFunction = (abiFunction: AbiFunction) => {\n    const list = [];\n    list.push(str2hexstr(abiFunction.name));\n    const tmp = [];\n    for (const p of abiFunction.parameters) {\n        if (p.getType() === ParameterType.String) {\n            tmp.push(str2hexstr(p.getValue()));\n        } else if (p.getType() === ParameterType.Long) {\n            tmp.push(new BigNumber(p.getValue()));\n        } else if (p.getType() === ParameterType.Map) {\n            tmp.push(convertMap(p));\n        } else {\n            tmp.push(p.getValue());\n        }\n    }\n    if (list.length > 0) {\n        list.push(tmp);\n    }\n    const result = createCodeParamsScript(list);\n    return result;\n};\n\nexport function convertArray(list: Parameter[]): any {\n    const tmp = [];\n    for (const p of list) {\n        if (p.getType && p.getType() === ParameterType.String) {\n            tmp.push(str2hexstr(p.getValue()));\n        } else if (p.getType && p.getType() === ParameterType.Long) {\n            tmp.push(new BigNumber(p.getValue()));\n        } else if (p.getType && p.getType() === ParameterType.Array) {\n            tmp.push(convertArray(p.value));\n        } else if (p.getType && p.getType() === ParameterType.Map) {\n            tmp.push(convertMap(p));\n        } else {\n            tmp.push(p.getValue ? p.getValue() : p);\n        }\n    }\n    return tmp;\n}\n\nexport function convertMap(p: Parameter): any {\n    const map = new Map();\n    for (const k of Object.keys(p.value)) {\n        const pVal = p.value[k];\n        // map.set(k, pVal);\n        if (pVal.type && pVal.type === ParameterType.Map) {\n            map.set(k, convertMap(pVal));\n        } else {\n            map.set(k, pVal);\n        }\n    }\n    return map;\n}\n\n/**\n * To deserialize the value return from smart contract invoke.\n * @param hexstr\n */\nexport function deserializeItem(sr: StringReader): any {\n    const t = parseInt(sr.read(1), 16);\n    if ( t === ParameterTypeVal.ByteArray) {\n        return sr.readNextBytes();\n    } else if (t === ParameterTypeVal.Boolean) {\n        return sr.readBoolean();\n    } else if (t === ParameterTypeVal.Integer) {\n        const v = bigIntFromBytes(sr.readNextBytes()).toNumber();\n        return v;\n    } else if (t === ParameterTypeVal.Array || t === ParameterTypeVal.Struct ) {\n        const length = sr.readNextLen();\n        const list = [];\n        for (let i = length; i > 0; i--) {\n            const ele = deserializeItem(sr);\n            list.push(ele);\n        }\n        return list;\n    } else if (t === ParameterTypeVal.Map ) {\n        const length = sr.readNextLen();\n        const map = new Map();\n        for (let i = length; i > 0; i--) {\n            const key = hexstr2str(deserializeItem(sr));\n            const value = deserializeItem(sr);\n            map.set(key, value);\n        }\n        return map;\n    } else {\n        throw Error('Invalid parameter type: ' + t);\n    }\n}\n\nexport const createCodeParamsScript = (list: any[]) => {\n    let result = '';\n    for (let i = list.length - 1; i >= 0; i--) {\n        const val = list[i];\n        if (typeof val === 'string') {\n            result += pushHexString(val);\n        } else if (typeof val === 'number') {\n            result += pushInt(val);\n        } else if (typeof val === 'boolean') {\n            result += pushBool(val);\n        } else if (val instanceof BigNumber) {\n            result += pushBigNum(val);\n        } else if (val instanceof Map) {\n            result += pushMap(val);\n            // const mapBytes = getMapBytes(val);\n            // result += pushHexString(mapBytes);\n        } else if (val instanceof Struct) {\n            const structBytes = getStructBytes(val);\n            result += pushHexString(structBytes);\n        } else if (val instanceof Array) {\n            result += createCodeParamsScript(convertArray(val));\n            result += pushInt(val.length);\n            result += num2hexstring(opcode.PACK);\n        }\n    }\n    return result;\n};\n\n// deprecated\nexport const buildSmartContractParam = (functionName: string, params: Parameter[]) => {\n    let result = '';\n    for (let i = params.length - 1; i > -1; i--) {\n        const type = params[i].getType();\n        switch (type) {\n        case ParameterType.Boolean:\n            result += pushBool(params[i].getValue());\n            break;\n\n        case ParameterType.Integer:\n            result += pushInt(params[i].getValue());\n            break;\n\n        case ParameterType.String:\n            const value = str2hexstr(params[i].getValue());\n            result += pushHexString(value);\n            break;\n\n        case ParameterType.ByteArray:\n            result += pushHexString(params[i].getValue());\n            break;\n\n        case ParameterType.Map:\n            const mapBytes = getMapBytes(params[i].getValue());\n            result += pushHexString(mapBytes);\n            break;\n\n        case ParameterType.Struct:\n            const structBytes = getStructBytes(params[i].getValue());\n            result += pushHexString(structBytes);\n            break;\n        // case ParameterType.Array:\n        //     result += buildSmartContractParam(params[i].getValue());\n        //     result += pushInt(params[i].getValue().length);\n        //     result += num2hexstring(opcode.PACK);\n        //     break;\n        default:\n            throw new Error('Unsupported param type: ' + JSON.stringify(params[i]));\n        }\n    }\n\n    result += pushInt(params.length);\n    result += num2hexstring(opcode.PACK);\n\n    result += pushHexString(str2hexstr(functionName));\n\n    return result;\n};\n\nexport const buildWasmContractParam = (params: Parameter[]) => {\n    const pList = [];\n\n    for (const p of params) {\n        const type = p.getType();\n        let o;\n\n        switch (type) {\n        case ParameterType.String:\n            o = {\n                type: 'string',\n                value: p.getValue()\n            };\n            break;\n        case ParameterType.Int:\n            o = {\n                type: 'int',\n                value: p.getValue().toString()\n            };\n            break;\n        case ParameterType.Long:\n            o = {\n                type: 'int64',\n                value: p.getValue()\n            };\n            break;\n        case ParameterType.IntArray:\n            o = {\n                type: 'int_array',\n                value: p.getValue()\n            };\n            break;\n        case ParameterType.LongArray:\n            o = {\n                type: 'int_array',\n                value: p.getValue()\n            };\n            break;\n        default:\n            break;\n        }\n        pList.push(o);\n    }\n\n    const result = {\n        Params: pList\n    };\n    return str2hexstr(JSON.stringify(result));\n};\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as base58 from 'bs58';\nimport * as cryptoJS from 'crypto-js';\nimport { ADDR_VERSION } from '../consts';\nimport { ERROR_CODE } from '../error';\nimport opcode from '../transaction/opcode';\nimport { comparePublicKeys, programFromPubKey, pushBigInt } from '../transaction/program';\nimport { pushHexString } from '../transaction/scriptBuilder';\nimport { ab2hexstring, hash160, num2hexstring, sha256, StringReader } from '../utils';\nimport { reverseHex } from './../utils';\nimport { PublicKey } from './PublicKey';\n\n/**\n * Representation of Address.\n *\n * There are 4 types of address:\n * 1. Public key based\n * 2. Multi public key based (m, n)\n * 3. Contract based\n * 4. ONT ID based\n *\n * The value is stored as base58 or hex encoded, therefore always use\n * toBase58() or serialize() according to requirements.\n */\nexport class Address {\n    static deserialize(sr: StringReader): Address {\n        return new Address(sr.read(20));\n    }\n    /**\n     * Generates public key based address.\n     *\n     * @param publicKey Public key to use\n     */\n    static fromPubKey(publicKey: PublicKey): Address {\n        const program = programFromPubKey(publicKey);\n        // const program = publicKey.key + num2hexstring(opcode.CHECKSIG);\n        const programHash = hash160(program);\n        return new Address(programHash);\n    }\n\n    /**\n     * Generates identity based address.\n     * @param ontid ONT ID in the form did:ont:AXmQDzzvpEtPkNwBEFsREzApTTDZFW6frD\n     */\n    static fromOntid(ontid: string): Address {\n        const address = ontid.substr(8);\n        return new Address(address);\n    }\n\n    /**\n     * Generates address from smart contract code.\n     *\n     * @param vmCode Hex encoded smart contract code\n     */\n    static fromVmCode(vmCode: string): Address {\n        const programHash = hash160(vmCode);\n        // programHash = num2hexstring(vmType) + programHash.substring(2);\n        return new Address(programHash);\n    }\n\n    /**\n     * Generates (m, n) threshold address.\n     *\n     * m - threshold\n     * n - total number of public keys\n     *\n     * @param m The threshold\n     * @param publicKeys Public key\n     */\n    static fromMultiPubKeys(m: number, publicKeys: PublicKey[]): Address {\n        const n = publicKeys.length;\n\n        if (m <= 0 || m > n || n > 24 ) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n\n        // const pkHexStrs = publicKeys.map((p) => p.serializeHex());\n        // pkHexStrs.sort();\n        publicKeys.sort(comparePublicKeys);\n        let result = '';\n        result += pushBigInt(m);\n        for (const s of publicKeys) {\n            result += pushHexString(s.serializeHex());\n        }\n        result += pushBigInt(n);\n        result += num2hexstring(opcode.CHECKMULTISIG);\n        const programHash = hash160(result);\n        return new Address(programHash);\n    }\n\n    /**\n     * Deterministicaly generates ONT ID from this public key.\n     */\n    static generateOntid(publicKey: PublicKey): string {\n        const address = Address.fromPubKey(publicKey);\n        const ontid = 'did:ont:' + address.toBase58();\n\n        return ontid;\n    }\n\n    /**\n     * Base58 or Hex encoded address\n     */\n    value: string;\n\n    constructor(value: string) {\n        if (value.length === 40 || value.length === 34) {\n            this.value = value;\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n\n    /**\n     * Gets Base58 encoded representation of the address.\n     */\n    toBase58() {\n        if (this.value.length === 34) {\n            return this.value;\n        } else {\n            return hexToBase58(this.value);\n        }\n    }\n\n    /**\n     * Gets Hex encoded representation of the address.\n     */\n    toHexString() {\n        let val;\n        if (this.value.length === 40) {\n            val = this.value;\n        } else {\n            val = base58ToHex(this.value);\n        }\n        return reverseHex(val);\n    }\n\n    serialize() {\n        if (this.value.length === 40) {\n            return this.value;\n        } else {\n            return base58ToHex(this.value);\n        }\n    }\n\n    /**\n     * Computes the salt from address for decrypt.\n     */\n    getB58Checksum() {\n        const address = this.toBase58();\n        const hash = cryptoJS.SHA256(address).toString();\n        const hash2 = sha256(hash);\n        return hash2.slice(0, 8);\n    }\n}\n\n/**\n *\n * @param programhash\n */\nfunction hexToBase58(hexEncoded: string): string {\n    const data = ADDR_VERSION + hexEncoded;\n\n    const hash = sha256(data);\n    const hash2 = sha256(hash);\n    const checksum = hash2.slice(0, 8);\n\n    const datas = data + checksum;\n\n    return base58.encode(new Buffer(datas, 'hex'));\n}\n\nfunction base58ToHex(base58Encoded: string) {\n    const decoded = base58.decode(base58Encoded);\n    const hexEncoded = ab2hexstring(decoded).substr(2, 40);\n\n    if (base58Encoded !== hexToBase58(hexEncoded)) {\n        throw new Error('[addressToU160] decode encoded verify failed');\n    }\n    return hexEncoded;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as base58 from 'bs58';\nimport { createCipheriv, createDecipheriv } from 'crypto';\nimport * as CryptoJS from 'crypto-js';\nimport * as asyncScrypt from 'scrypt-async';\nimport { DEFAULT_SCRYPT, OEP_FLAG, OEP_HEADER } from './consts';\nimport { Address } from './crypto/address';\nimport { PublicKey } from './crypto/PublicKey';\nimport { ERROR_CODE } from './error';\nimport { ab2hexstring, hexstring2ab, hexXor, isHexString, StringReader } from './utils';\n\n/**\n * Decribtes the structure of params for scrypt\n */\nexport interface ScryptParams {\n    cost: number;\n    blockSize: number;\n    parallel: number;\n    size: number;\n}\n\n/**\n * Synchronious call to scrypt-async-js.\n *\n * @param keyphrase Keyphrase to use\n * @param addressHash Hex encoded address\n * @param params Scrypt params\n */\nfunction scrypt(keyphrase: string, addressHash: string, params: ScryptParams) {\n    let derived: number[] = [];\n\n    asyncScrypt(\n        keyphrase.normalize('NFC'),\n        hexstring2ab(addressHash),\n        {\n            N: params.cost,\n            r: params.blockSize,\n            p: params.parallel,\n            dkLen: params.size\n        },\n        (result: string | number[]) => {\n            derived = result as number[];\n        }\n    );\n    return new Buffer(derived);\n}\n\n/**\n * Encrypt with aes-ctr\n */\nexport function encryptWithCtr(\n    privateKey: string,\n    publicKeyEncoded: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    // let privateKey = PrivateKey.deserializeWIF(wifKey);\n    // console.log( \"privateKey: \", privateKey );\n\n    // console.log( \"publickeyEncode: \", publicKey );\n\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    const address = Address.fromPubKey(publicKey);\n    // console.log( \"address: \", address );\n\n    const addresshash = address.getB58Checksum();\n    // console.log( \"addresshash: \", addresshash );\n\n    // Scrypt\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 32);\n    const derived2 = derived.slice(64);\n    const iv = CryptoJS.enc.Hex.parse(derived1);\n\n    // console.log('decrypt derived: ' + derived)\n    // console.log('decrypt iv: ' + iv)\n    // console.log('decrypt derived2: ' + derived2)\n\n    // AES Encrypt\n    // let xor = hexXor(privateKey, derived1);\n    const encrypted = CryptoJS.AES.encrypt(\n        CryptoJS.enc.Hex.parse(privateKey),\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\n    );\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\n\n    // Construct\n    // let assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\n    const assembled = encrypted.ciphertext.toString();\n\n    // console.log( \"enc assembled: \", assembled );\n\n    // return Bs58check.encode(Buffer.from(assembled, 'hex'));\n    return new Buffer(assembled, 'hex').toString('base64');\n}\n\n/**\n * Decrypt with aes-ctr\n * @param encryptedKey encrypted private key\n * @param keyphrase user's password to encrypt private key\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\n */\nexport function decryptWithCtr(\n    encryptedKey: string,\n    keyphrase: string,\n    saltOrAddress: string | Address,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    // let assembled = ab2hexstring(Bs58check.decode(encryptedKey));\n    const encrypted = Buffer.from(encryptedKey, 'base64').toString('hex');\n\n    // tslint:disable-next-line:no-console\n    // console.log('dec assembled: ', encrypted);\n\n    let salt = '';\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\n        salt = saltOrAddress;\n    } else if (saltOrAddress instanceof Address) {\n        salt = saltOrAddress.getB58Checksum();\n    } else {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    // let addressHash = assembled.substr(0, 8);\n    // console.log( \"dec addressHash: \", addressHash );\n\n    // let encrypted = assembled.substr(8);\n    // console.log( \"encrypted: \", encrypted );\n\n    // Scrypt\n    const derived = scrypt(keyphrase, salt, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 32);\n    const derived2 = derived.slice(64);\n    // console.log('decrypt derived: ' + derived)\n\n    const iv = CryptoJS.enc.Hex.parse(derived1);\n\n    // AES Decrypt\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\n    const decrypted = CryptoJS.AES.decrypt(\n        ciphertexts,\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\n    );\n    // console.log( \"decrypted: \", decrypted.toString() );\n\n    // Check PrivateKey\n    // ----------------------------------------------------------\n\n    // PrivateKey\n    // let privateKey = hexXor(decrypted.toString(), derived1);\n    const privateKey = decrypted.toString();\n    // console.log( \"privateKey: \", privateKey );\n    return privateKey;\n}\n\n/**\n * Checks if the password supplied to decrypt was correct.\n *\n * This method was taken out from decrypt, because it needs to create public key from private key\n * and it needs to be supplied from outside.\n *\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\n * @param publicKeyEncoded Public key from decrypted key\n */\nexport function checkCtrDecrypted(saltOrAddress: string | Address, publicKeyEncoded: string): void {\n    // const assembled = ab2hexstring(Bs58check.decode(encryptedKey));\n    // let assembled = Buffer.from(encryptedKey, 'base64').toString('hex')\n\n    // console.log( \"assembled: \", assembled );\n\n    // const addressHash = assembled.substr(0, 8);\n    // console.log( \"addressHash: \", addressHash );\n\n    // console.log('publicKey', publicKey)\n    let salt = '';\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\n        salt = saltOrAddress;\n    } else if (saltOrAddress instanceof Address) {\n        salt = saltOrAddress.getB58Checksum();\n    } else {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    // Address\n    const address = Address.fromPubKey(publicKey);\n    // console.log('address 2', address)\n\n    // AddressHash\n    const saltNew = address.getB58Checksum();\n\n    if (saltNew !== salt) {\n\n        // tslint:disable-next-line:no-console\n        console.log('keyphrase error.');\n\n        throw ERROR_CODE.Decrypto_ERROR;\n    }\n\n    // WIF\n    // let wifKey = privateKey.serializeWIF();\n    // console.log( \"wifKey: \", wifKey );\n}\n\n/**\n * Encrypt with aes-ecb\n */\nexport function encryptWithEcb(\n    privateKey: string,\n    publicKeyEncoded: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    const address = Address.fromPubKey(publicKey);\n    // console.log( \"address: \", address );\n\n    const addresshash = address.getB58Checksum();\n    // console.log( \"addresshash: \", addresshash );\n    // Scrypt\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 64);\n    const derived2 = derived.slice(64);\n\n    // AES Encrypt\n    const xor = hexXor(privateKey, derived1);\n    const encrypted = CryptoJS.AES.encrypt(\n        CryptoJS.enc.Hex.parse(xor),\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\n    // Construct\n    const assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\n    // console.log( \"assembled: \", assembled );\n    return base58.encode(Buffer.from(assembled, 'hex'));\n}\n\n/**\n * Decrypt with aes-ecb\n */\nexport function decryptWithEcb(\n    encryptedKey: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\n    // console.log( \"assembled: \", assembled );\n    const addressHash = assembled.substr(6, 8);\n    // console.log( \"addressHash: \", addressHash );\n    const encrypted = assembled.substr(-64);\n    // console.log( \"encrypted: \", encrypted );\n    // Scrypt\n    const derived = scrypt(keyphrase, addressHash, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 64);\n    const derived2 = derived.slice(64);\n\n    // AES Decrypt\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\n    const decrypted = CryptoJS.AES.decrypt(\n        ciphertexts,\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\n    // console.log( \"decrypted: \", decrypted.toString() );\n    // Check PrivateKey\n    // ----------------------------------------------------------\n    // PrivateKey\n    const privateKey = hexXor(decrypted.toString(), derived1);\n    // console.log( \"privateKey: \", privateKey );\n    return privateKey;\n}\n\n/**\n * Checks if the password supplied to decrypt was correct.\n *\n * This method was taken out from decrypt, because it needs to create public key from private key\n * and it needs to be supplied from outside.\n *\n * @param encryptedKey Original encrypted key\n * @param decryptedKey Decrypted key with decrypt\n * @param publicKeyEncoded Public key from decrypted key\n */\nexport function checkEcbDecrypted(encryptedKey: string, decryptedKey: string, publicKeyEncoded: string): void {\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\n    // console.log( \"assembled: \", assembled );\n    const addressHash = assembled.substr(6, 8);\n\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    // Address\n    const address = Address.fromPubKey(publicKey);\n    // console.log('address', address)\n    // AddressHash\n    const addressHashNew = address.getB58Checksum();\n\n    if (addressHashNew !== addressHash) {\n        // tslint:disable-next-line:no-console\n        console.log('keyphrase error.');\n        throw ERROR_CODE.Decrypto_ERROR;\n    }\n}\n\n/**\n * Encrypt with aes-gcm-256\n * This is the default encryption algorithm for private key\n * @param privateKey Private key to encpryt with\n * @param address Adderss to encrypt with\n * @param salt Salt to encrypt with\n * @param keyphrase User's password\n * @param scryptParams Optional params to encrypt\n */\nexport function encryptWithGcm(\n    privateKey: string,\n    address: Address,\n    salt: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n) {\n    if (!isHexString(privateKey)) {\n        throw new Error(ERROR_CODE.INVALID_PARAMS + ', Invalid private key');\n    }\n    const derived = scrypt(keyphrase, salt, scryptParams);\n    const derived1 = derived.slice(0, 12);\n    const derived2 = derived.slice(32);\n    const key = derived2;\n    const iv = derived1;\n    const aad = new Buffer(address.toBase58());\n    const cipher = createCipheriv('aes-256-gcm', key, iv);\n    cipher.setAAD(aad);\n    const plainText = Buffer.from(privateKey, 'hex');\n    let ciphertext = cipher.update(plainText);\n    // ciphertext += cipher.final();\n    const final = cipher.final();\n    const authTag = cipher.getAuthTag();\n    ciphertext = Buffer.concat([ciphertext, final]);\n\n    const result = Buffer.concat([ciphertext, authTag]);\n    return result.toString('base64');\n}\n\n/**\n * Decrypt with aes-256-gcm\n * @param encrypted Encrypted private key\n * @param address Address to decrypt with\n * @param salt Salt to decrypt with\n * @param keyphrase User's password\n * @param scryptParams Optioanl params to decrypt with\n */\nexport function decryptWithGcm(\n    // ciphertext: string,\n    // authTag: string,\n    encrypted: string,\n    address: Address,\n    salt: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n) {\n    if (salt.length !== 32) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const result = Buffer.from(encrypted, 'base64');\n    const ciphertext = result.slice(0, result.length - 16);\n    const authTag = result.slice(result.length - 16);\n    const derived = scrypt(keyphrase, salt, scryptParams);\n    const derived1 = derived.slice(0, 12);\n    const derived2 = derived.slice(32);\n    const key = derived2;\n    const iv = derived1;\n    const aad = new Buffer(address.toBase58());\n    // const auth = new Buffer(authTag, 'hex');\n    const decipher = createDecipheriv('aes-256-gcm', key, iv);\n    decipher.setAAD(aad);\n    decipher.setAuthTag(authTag);\n    let decrypted = decipher.update(ciphertext).toString('hex');\n\n    try {\n        decrypted += decipher.final().toString('hex');\n    } catch (err) {\n        throw ERROR_CODE.Decrypto_ERROR;\n    }\n    return decrypted;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as b64 from 'base64-url';\nimport { num2hexstring, StringReader } from '../utils';\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Signature generated by signing data with Private Key.\n */\nexport class Signature {\n    static deserializeJWT(encoded: string, algorithm: SignatureScheme, publicKeyId: string): Signature {\n        const decoded = b64.decode(encoded, 'hex');\n\n        return new Signature(\n        algorithm,\n        decoded,\n        publicKeyId\n        );\n    }\n\n    /**\n     * Deserializes PgpSignature to Signature.\n     * @param pgpSignature PgpSignature\n     */\n    static deserializePgp(pgpSignature: PgpSignature): Signature {\n        const value = new Buffer(pgpSignature.Value, 'base64').toString('hex');\n        const deserialzedValue = Signature.deserializeHex(value).value;\n        return new Signature(\n        SignatureScheme.fromLabel(pgpSignature.Algorithm),\n            deserialzedValue\n        );\n    }\n\n    /**\n     * Deserializes hex representation to Signature\n     * @param data hex string\n     */\n    static deserializeHex(data: string): Signature {\n        if (data.length < 4) {\n            throw new Error('Invalid params.');\n        }\n        const sr = new StringReader(data);\n        const scheme = parseInt(sr.read(1), 16);\n        const sigScheme = SignatureScheme.fromHex(scheme);\n        const value = data.substr(2);\n        const sig = new Signature(sigScheme, value);\n        return sig;\n    }\n\n    algorithm: SignatureScheme;\n    value: string;\n\n    /**\n     * Public key Id used for create this signature.\n     *\n     */\n    publicKeyId?: string;\n\n    constructor(algorithm: SignatureScheme, value: string, publicKeyId?: string) {\n        this.algorithm = algorithm;\n        this.value = value;\n        this.publicKeyId = publicKeyId;\n    }\n\n    /**\n     * Serializes signature to Hex representation.\n     * For transfer to java backend and verify it.\n     */\n    serializeHex(): string {\n        let result = '';\n        result += num2hexstring(this.algorithm.hex);\n        result += this.value;\n        return result;\n\n    }\n\n    /**\n     * Serializes signature to PGP representation with optional PublicKeyId.\n     *\n     * @param keyId Whole Public Key Id in the form <ONTID>#keys-<id>\n     */\n    serializePgp(keyId?: string): PgpSignature {\n        const encoded = new Buffer(this.serializeHex(), 'hex').toString('base64');\n        return {\n            PublicKeyId: keyId,\n            Format: 'pgp',\n            Value: encoded,\n            Algorithm: this.algorithm.label\n        };\n    }\n\n    /**\n     * Serializes signature to base64url format.\n     */\n    serializeJWT(): string {\n        return b64.encode(this.value, 'hex');\n    }\n}\n\n/**\n * PGP representation of the signature with embedded KeyId\n */\nexport interface PgpSignature {\n    PublicKeyId?: string;\n    Format: 'pgp';\n    Algorithm: string;\n    Value: string;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as bip39 from 'bip39';\nimport * as elliptic from 'elliptic';\nimport * as secureRandom from 'secure-random';\nimport { sm2 } from 'sm.js';\nimport * as wif from 'wif';\nimport { DEFAULT_ALGORITHM, DEFAULT_SM2_ID, ONT_BIP44_PATH } from '../consts';\nimport { ERROR_CODE } from '../error';\nimport { decryptWithGcm, encryptWithGcm, ScryptParams } from '../scrypt';\nimport { ab2hexstring, hexstring2ab, isBase64, str2hexstr } from '../utils';\nimport { Address } from './address';\nimport { Key, KeyParameters } from './Key';\nimport { KeyType } from './KeyType';\nimport { PublicKey } from './PublicKey';\nimport { Signable } from './signable';\nimport { Signature } from './Signature';\nimport { SignatureScheme } from './SignatureScheme';\n\n// tslint:disable-next-line:no-var-requires\nconst HDKey = require('@ont-community/hdkey-secp256r1');\n\nexport class PrivateKey extends Key {\n  /**\n   * Generates random Private key using supplied Key type and parameters.\n   *\n   * If no Key type or parameters is supplied, default SDK key type with default parameters will be used.\n   *\n   * @param keyType The key type\n   * @param parameters The parameters for the key type\n   */\n    static random(keyType?: KeyType, parameters?: KeyParameters): PrivateKey {\n        if (keyType === undefined) {\n            keyType = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\n        }\n\n        if (parameters === undefined) {\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\n        }\n\n        return new PrivateKey(ab2hexstring(secureRandom(32)), keyType, parameters);\n    }\n\n    /**\n     * Creates PrivateKey from Wallet Import Format (WIF) representation.\n     *\n     * @param wifkey WIF private key representation\n     *\n     */\n    static deserializeWIF(wifkey: string): PrivateKey {\n        const key = ab2hexstring(wif.decode(wifkey, 128).privateKey);\n        return new PrivateKey(key);\n    }\n\n    /**\n     * Creates PrivateKey from mnemonic according to BIP39 protocol.\n     *\n     * @param mnemonic Space separated list of words\n     *\n     */\n    static generateFromMnemonic(mnemonic: string, derivePath: string = ONT_BIP44_PATH): PrivateKey {\n        if (mnemonic.split(' ').length < 12) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\n\n        // generate privateKey\n        // const pri = seed.substr(0, 64);\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\n        const pri = hdkey.derive(derivePath);\n        const key = Buffer.from(pri.privateKey).toString('hex');\n        const privateKey = new PrivateKey(key);\n        return privateKey;\n    }\n\n    /**\n     * Signs the data with supplied private key using signature schema.\n     *\n     * If the signature schema is not provided, the default schema for this key type is used.\n     *\n     * This method is not suitable, if external keys (Ledger, TPM, ...) support is required.\n     *\n     * @param msg Hex encoded input data or Signable object\n     * @param schema Signing schema to use\n     * @param publicKeyId Id of public key\n     */\n    sign(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Signature {\n        if (schema === undefined) {\n            schema = this.algorithm.defaultSchema;\n        }\n\n        if (!this.isSchemaSupported(schema)) {\n            throw new Error('Signature schema does not match key type.');\n        }\n\n        // retrieves content to sign if not provided directly\n        if (typeof msg !== 'string') {\n            msg = msg.getSignContent();\n        }\n\n        let hash: string;\n        if (schema === SignatureScheme.SM2withSM3) {\n            // library sm.js (SM2withSM3) has implemented hashing as part of signing, therefore it is skipped\n            hash = msg;\n        } else {\n            hash = this.computeHash(msg, schema);\n        }\n\n        const signed = this.computeSignature(hash, schema);\n        return new Signature(schema, signed, publicKeyId);\n    }\n\n    /**\n     * Asynchroniously signs the data with supplied private key using signature schema.\n     *\n     * If the signature schema is not provided, the default schema for this key type is used.\n     *\n     * This method is suitable, if external keys (Ledger, TPM, ...) support is required.\n     *\n     * @param msg Hex encoded input data or Signable object\n     * @param schema Signing schema to use\n     * @param publicKeyId Id of public key\n     */\n    async signAsync(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Promise<Signature> {\n        return this.sign(msg, schema, publicKeyId);\n    }\n\n    /**\n     * Derives Public key out of Private key.\n     */\n    getPublicKey(): PublicKey {\n        switch (this.algorithm) {\n        case KeyType.ECDSA:\n            return this.getEcDSAPublicKey();\n        case KeyType.EDDSA:\n            return this.getEdDSAPublicKey();\n        case KeyType.SM2:\n            return this.getSM2PublicKey();\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Decrypts encrypted private key with supplied password.\n     *\n     * @param keyphrase Password to decrypt with\n     * @param address For aad in decryption\n     * @param 16 secure random bytes\n     * @param params Optional Scrypt params\n     */\n    decrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\n        // const decrypted = decrypt(this.key, keyphrase, checksum, params);\n        if (salt.length === 24 && isBase64(salt)) {\n            salt = Buffer.from(salt, 'base64').toString('hex');\n        }\n        const decrypted = decryptWithGcm(this.key, address, salt, keyphrase, params);\n        const decryptedKey = new PrivateKey(decrypted, this.algorithm, this.parameters);\n        // checkDecrypted(checksum, decryptedKey.getPublicKey().serializeHex());\n        const pk = decryptedKey.getPublicKey();\n        const addrTmp = Address.fromPubKey(pk);\n        if (addrTmp.toBase58() !== address.toBase58()) {\n            throw ERROR_CODE.Decrypto_ERROR;\n        }\n        return decryptedKey;\n    }\n\n    /**\n     * Encrypts private key with supplied password.\n     *\n     * @param keyphrase Password to encrypt with\n     * @param address For aad in encryption\n     * @param salt 16 secure random bytes\n     * @param params Optional Scrypt params\n     */\n    encrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\n        // add address check\n        const publicKey = this.getPublicKey();\n        const addr = Address.fromPubKey(publicKey).toBase58();\n        if (addr !== address.toBase58()) {\n            throw ERROR_CODE.INVALID_ADDR;\n        }\n        const encrypted = encryptWithGcm(this.key, address, salt, keyphrase, params);\n        return new PrivateKey(encrypted, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Derives Public key out of Private key using EcDSA algorithm.\n     */\n    getEcDSAPublicKey(): PublicKey {\n        const ec = new elliptic.ec(this.parameters.curve.preset);\n        const keyPair = ec.keyFromPrivate(this.key, 'hex');\n        const pk = keyPair.getPublic(true, 'hex');\n\n        return new PublicKey(pk, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Derives Public key out of Private key using EdDSA algorithm.\n     */\n    getEdDSAPublicKey(): PublicKey {\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\n        const keyPair = eddsa.keyFromSecret(this.key, 'hex');\n        const pk = keyPair.getPublic(true, 'hex');\n\n        return new PublicKey(pk, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Derives Public key out of Private key using SM2 algorithm.\n     */\n    getSM2PublicKey(): PublicKey {\n        const keyPair = sm2.SM2KeyPair(null, this.key);\n        const pk = keyPair.pubToString('compress');\n\n        return new PublicKey(pk, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Computes signature of message hash using specified signature schema.\n     *\n     * @param hash Message hash\n     * @param schema Signature schema to use\n     */\n    computeSignature(hash: string, schema: SignatureScheme): string {\n        switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return this.computeEcDSASignature(hash);\n        case SignatureScheme.EDDSAwithSHA512:\n            return this.computeEdDSASignature(hash);\n        case SignatureScheme.SM2withSM3:\n            return this.computeSM2Signature(hash);\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Computes EcDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     */\n    computeEcDSASignature(hash: string): string {\n        const ec = new elliptic.ec(this.parameters.curve.preset);\n        const signed = ec.sign(hash, this.key, { canonical: true });\n        return Buffer.concat([\n            signed.r.toArrayLike(Buffer, 'be', 32),\n            signed.s.toArrayLike(Buffer, 'be', 32)\n        ]).toString('hex');\n    }\n\n    /**\n     * Computes EdDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     */\n    computeEdDSASignature(hash: string): string {\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\n        const signed = eddsa.sign(hash, this.key, null);\n        return Buffer.concat([\n            signed.R.toArrayLike(Buffer, 'be', 32),\n            signed.S.toArrayLike(Buffer, 'be', 32)\n        ]).toString('hex');\n    }\n\n    /**\n     * Computes SM2 signature of message hash.\n     *\n     * Only default SM2 ID is supported.\n     *\n     * @param hash Message hash\n     */\n    computeSM2Signature(hash: string): string {\n        const keyPair = sm2.SM2KeyPair(null, this.key);\n        const signed = keyPair.sign(hexstring2ab(hash));\n\n        const id = DEFAULT_SM2_ID;\n\n        return str2hexstr(id + '\\0') + signed.r + signed.s;\n    }\n\n    /**\n     * Gets Wallet Import Format (WIF) representation of the PrivateKey.\n     *\n     */\n    serializeWIF(): string {\n        return wif.encode(128, Buffer.from(this.key, 'hex'), true);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { JsonKey, KeyParameters } from './Key';\nimport { KeyType } from './KeyType';\nimport { PrivateKey } from './PrivateKey';\n\n/**\n * Interface for Key deserializers\n */\nexport interface KeyDeserializer {\n    getType(): string;\n    deserialize(json: JsonKey): PrivateKey;\n}\n\n/**\n * Default private key deserializer.\n */\nexport class DefaultKeyDeserializer implements KeyDeserializer {\n    getType(): string {\n        return '';\n    }\n\n    deserialize(json: JsonKey): PrivateKey {\n        if (json.key != null) {\n            return new PrivateKey(\n                json.key,\n                KeyType.fromLabel(json.algorithm),\n                KeyParameters.deserializeJson(json.parameters)\n            );\n        } else {\n            throw new Error('Unsupported Key type.');\n        }\n    }\n}\n\n/**\n * Registered key deserializers\n */\nconst keyDeserializers: KeyDeserializer[] = [];\nconst defaultKeyDeserializer = new DefaultKeyDeserializer();\n\n/**\n * Registers new external deserializer for private keys.\n *\n * @param deserializer Deserializer instance\n */\nexport function registerKeyDeserializer(deserializer: KeyDeserializer) {\n    keyDeserializers.push(deserializer);\n}\n\n/**\n * Creates PrivateKey from Json representation.\n *\n * @param json Json private key representation\n *\n */\nexport function deserializeFromJson(json: JsonKey): PrivateKey {\n    if (json.external == null) {\n        return defaultKeyDeserializer.deserialize(json);\n    } else {\n        for (const deserializer of keyDeserializers) {\n            if (deserializer.getType() === json.external.type) {\n                return deserializer.deserialize(json);\n            }\n        }\n\n        throw new Error('Unsupported Key type.');\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as CTX from 'milagro-crypto-js';\nimport * as utils from '../utils';\n\n/**\n * Issuer\n *  Issuer in Anonymous Credential\n */\nexport class Issuer {\n\n    sk: SecretKey;\n    pk: IssuerPublicKey;\n    // AttrMap: Map<string, number>;\n    AttributeName: string[];\n\n    param: CryptoSuite;\n\n    constructor(curve: string) {\n        this.param = new CryptoSuite(curve);\n        this.sk = new SecretKey(this.param);\n    }\n\n    /* GenerateSk():SecretKey\n     *  generate a random secret key\n     */\n    GenerateSk(): SecretKey {\n        this.sk.Rand();\n        return this.sk;\n    }\n\n    /* GenerateKeyPair()\n     *  generate a random secret key\n     */\n    GenerateKeyPair() {\n        this.sk = SecretKey.GenerateSk(this.param);\n        this.pk = this.sk.GenerateIssuerPublicKey();\n    }\n\n    /* SetAttributeSet(AttributeName:string[])\n     *  generate a random secret key\n     */\n    SetAttributeSet(AttributeName: string[]) {\n        this.AttributeName = AttributeName;\n        this.pk.GenerateAttr(AttributeName);\n    }\n\n    /* Sign(Nym, attrs):Credential\n     *  sign a credential for a user\n     */\n    Sign(Nym: any, attrs: any[]): Credential {\n        // random e, s\n        const e = this.param.getRandBN();\n        const s = this.param.getRandBN();\n        const B = new this.param.ECP(); // B = g1 · HRand^s · Nym · MulAll(HAttrs[i]^(Attrs[i]))\n        B.copy(this.param.g1);\n        B.add(this.param.PAIR.G1mul(this.pk.h0, s));\n        B.add(Nym);\n        for (let i = 0; i < this.pk.attr.length; i++) {\n            B.add(this.param.PAIR.G1mul(this.pk.h[i], attrs[i]));\n        }\n\n        let A = new this.param.ECP(); // A = B^(1/(e+x))\n        const tmp = new this.param.BIG(); // tmp = (1/(e+x))\n        tmp.copy(e);\n        tmp.add(this.sk.value); // !!!!!!!!!!!\n        tmp.invmodp(this.param.order);\n\n        A = this.param.PAIR.G1mul(B, tmp);\n\n        const cred = new Credential(this.param);\n        cred.Set(A, B, e, s, attrs);\n        return cred;\n    }\n\n    /* GetPk()\n     *  get issuer's public key\n     */\n    GetPk(): IssuerPublicKey {\n        return IssuerPublicKey.COPY(this.pk);\n    }\n\n    /* GenerateSk():SecretKey\n     *  generate a random secret key\n     */\n    GenerateNonce(): any {\n        const nonce = this.param.getRandBN();\n        return nonce;\n    }\n\n    VerifyCredentialRequest(CR: any): boolean {\n        return this.pk.VerifyCredentialRequest(CR);\n    }\n\n}\n\n/**\n * User\n *  An user in Anonymous Credential\n *  Prover and Verifier are all user.\n */\nexport class User {\n\n    attrs: any[];\n\n    private sk: SecretKey;\n    private Nym: any;\n    // private pi: {\n    //     C: any,\n    //     S: any\n    // };\n\n    private Cred: Credential;\n\n    private ipk: IssuerPublicKey;\n\n    private param: CryptoSuite;\n\n    constructor(curve: string) {\n        this.param = new CryptoSuite(curve);\n    }\n\n    /* GenerateSk():SecretKey\n     *  generate a random secret key\n     */\n    GenerateSk(): SecretKey {\n        this.sk = SecretKey.GenerateSk(this.param);\n        return this.sk;\n    }\n\n    /* SetIpk(ipk:IssuerPublicKey)\n     *  save issuer's public key\n     */\n    SetIpk(ipk: IssuerPublicKey) {\n        this.ipk = IssuerPublicKey.COPY(ipk);\n    }\n\n    GenerateCrendentialRequest(nonce: any): any {\n        if (this.ipk === undefined) {\n            // tslint:disable-next-line:no-console\n            console.log('Please set ipk first.');\n            return;\n        }\n\n        const ipk = this.ipk;\n        const Nym = this.param.PAIR.G1mul(ipk.h_sk, this.sk.value); // Nym\n\n        const r = this.param.getRandBN(); // r\n        const t1 = this.param.PAIR.G1mul(ipk.h_sk, r); // t1\n\n        const C = this.param.hashToBN(t1, ipk.h_sk, Nym, nonce);\n\n        const S = this.param.BIG.modmul(C, this.sk.value, this.param.order);\n        S.add(r);\n        S.mod(this.param.order);\n\n        const pi = {\n            C,\n            S\n        };\n\n        const attrs = this.param.genAttrBN(ipk.attr);\n\n        this.Nym = Nym;\n        this.attrs = attrs;\n\n        const CR = {\n            Nym,\n            pi,\n            nonce,\n            attrs\n        };\n\n        return CR;\n    }\n\n    VerifyBBSplus(Cred: Credential): boolean {\n        // pk   <- ipk.w\n        // m    <- attrs\n        // sig  <- (A,E,s)\n\n        // check if\n        // e(A, g2^E * pk) == e(B, g2)\n        // and if\n        // B == g1 * HRand^s * Nym * (h1^m1 * ... * hL^mL)\n\n        const wg2e = new this.param.ECP2();\n        wg2e.copy(this.ipk.w);\n        wg2e.add(this.param.PAIR.G2mul(this.param.g2, Cred.sig.e));\n        wg2e.affine(); // ~!!!!use affine() after ECP's mul operation, for pairing.\n\n        const A = new this.param.ECP();\n        A.copy(Cred.sig.A);\n        A.affine();\n\n        let left = this.param.PAIR.ate(wg2e, A);\n        left = this.param.PAIR.fexp(left);\n\n        const B = new this.param.ECP();\n        B.copy(this.param.g1);\n        B.add(this.param.PAIR.G1mul(this.ipk.h0, Cred.sig.s));\n        B.add(this.Nym);\n\n        for (let i = 0; i < Cred.attrs.length; i++) {\n            B.add(this.param.PAIR.G1mul(this.ipk.h[i], Cred.attrs[i]));\n        }\n\n        B.affine();\n        let right = this.param.PAIR.ate(this.param.g2, B);\n        right = this.param.PAIR.fexp(right);\n\n        return left.equals(right);\n    }\n\n    SetCredential(Cred: Credential) {\n        this.Cred = new Credential(this.param);\n        this.Cred.Copy(Cred);\n        return true;\n    }\n\n    Prove(D: any[]) {\n        const ipk = this.ipk;\n        const Cred = this.Cred;\n\n        const r1 = this.param.getRandBN(); // r1\n\n        const A_ = this.param.PAIR.G1mul(Cred.sig.A, r1); // A'\n\n        const r3 = new this.param.BIG(0); // r3\n        r3.copy(r1);\n        r3.invmodp(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        let _e = new this.param.BIG(0); // -e\n        _e.copy(Cred.sig.e);\n        _e = this.param.BIG.modneg(_e, this.param.order);\n\n        const _A = this.param.PAIR.G1mul(A_, _e); // _A\n        _A.add(this.param.PAIR.G1mul(Cred.sig.B, r1));\n\n        const r2 = this.param.getRandBN(); // r2\n        // tslint:disable-next-line:variable-name\n        let _r2 = new this.param.BIG(0); // -r2\n        _r2.copy(r2);\n        _r2 = this.param.BIG.modneg(_r2, this.param.order);\n\n        const B_ = this.param.PAIR.G1mul(Cred.sig.B, r1); // B'\n        B_.add(this.param.PAIR.G1mul(ipk.h0, _r2));\n\n        // tslint:disable-next-line:variable-name\n        let s_ = this.param.BIG.modmul(r2, r3, this.param.order); // s'\n        s_ = this.param.BIG.modneg(s_, this.param.order);\n        s_.add(Cred.sig.s);\n        s_.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const r_a = []; // r_a[]\n        for (let i = 0; i < D.length; i++) {\n            if (D[i] === 0) {\n                r_a[i] = this.param.getRandBN();\n            } else {\n                r_a[i] = false;\n            }\n        }\n\n        // tslint:disable-next-line:variable-name\n        const r_e = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_r2 = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_r3 = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_s_ = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_sk = this.param.getRandBN();\n\n        const E = this.param.PAIR.G1mul(ipk.h_sk, r_sk); // E\n\n        const t1 = this.param.PAIR.G1mul(A_, r_e); // t1\n        t1.add(this.param.PAIR.G1mul(ipk.h0, r_r2));\n\n        const t2 = this.param.PAIR.G1mul(B_, r_r3); // t2\n        t2.add(this.param.PAIR.G1mul(ipk.h0, r_s_));\n        t2.add(this.param.PAIR.G1mul(E, new this.param.BIG(-1)));\n        for (let i = 0; i < r_a.length; i++) {\n            if (r_a[i] !== false) {\n                t2.add(this.param.PAIR.G1mul(ipk.h[i], r_a[i]));\n            }\n        }\n\n        // c' = H(A', _A, B', Nym, t1, t2, g1, HRand, h1, ... , hL, w)\n        // tslint:disable-next-line:variable-name\n        const c_ = this.param.hashToBN(\n            A_,\n            _A,\n            B_,\n            this.Nym,\n            t1,\n            t2,\n            this.param.g1,\n            ipk.h0,\n            ipk.h,\n            ipk.w\n        );\n\n        const nonce = this.param.getRandBN();\n        // c = H(nonce, c', (D, I))\n        const c = this.param.hashToBN(nonce, c_, D, this.attrs);\n\n        // tslint:disable-next-line:variable-name\n        const s_sk = new this.param.BIG(0);\n        s_sk.copy(r_sk);\n        s_sk.add(this.param.BIG.modmul(c, this.sk.value, this.param.order));\n        s_sk.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_a = [];\n        for (let i = 0; i < D.length; i++) {\n            if (D[i] === 0) {\n                s_a[i] = new this.param.BIG(0);\n                s_a[i].copy(r_a[i]);\n                s_a[i].sub(this.param.BIG.modmul(c, this.attrs[i], this.param.order));\n                s_a[i].mod(this.param.order);\n            } else {\n                s_a[i] = false;\n            }\n        }\n\n        // tslint:disable-next-line:variable-name\n        const s_e = new this.param.BIG(0);\n        s_e.copy(r_e);\n        s_e.sub(this.param.BIG.modmul(c, Cred.sig.e, this.param.order));\n        s_e.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_r2 = new this.param.BIG(0);\n        s_r2.copy(r_r2);\n        s_r2.add(this.param.BIG.modmul(c, r2, this.param.order));\n        s_r2.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_r3 = new this.param.BIG(0);\n        s_r3.copy(r_r3);\n        s_r3.add(this.param.BIG.modmul(c, r3, this.param.order));\n        s_r3.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_s_ = new this.param.BIG(0);\n        s_s_.copy(r_s_);\n        s_s_.sub(this.param.BIG.modmul(c, s_, this.param.order));\n        s_s_.mod(this.param.order);\n\n        const pi = {\n            c,\n            s_sk,\n            s_a,\n            s_e,\n            s_r2,\n            s_r3,\n            s_s_,\n            nonce\n        };\n\n        const proof = {\n            A_,\n            _A,\n            B_,\n            Nym: this.Nym,\n            pi\n        };\n\n        return proof;\n    }\n\n    Verify(proof: any, D: any[], attrs: any[]): boolean {\n        const ipk = this.ipk;\n\n        // make sure A is not infinity\n        const O = new this.param.ECP(0); // Add\n        // let O = new this.param.ECP(1); // Muliply\n        if (proof.A_.equals(O)) {\n            // tslint:disable-next-line:no-console\n            console.log('A\\' == O return true, verify failed.');\n            return false;\n        }\n\n        const A_ = new this.param.ECP();\n        A_.copy(proof.A_);\n        const w = new this.param.ECP2();\n        w.copy(ipk.w);\n        const _A = new this.param.ECP();\n        _A.copy(proof._A);\n        const g2Dup = new this.param.ECP2();\n        g2Dup.copy(this.param.g2);\n\n        A_.affine();\n        w.affine();\n        _A.affine();\n        g2Dup.affine();\n\n        let left = this.param.PAIR.ate(w, A_);\n        let right = this.param.PAIR.ate(g2Dup, _A);\n\n        left = this.param.PAIR.fexp(left);\n        right = this.param.PAIR.fexp(right);\n\n        if (!left.equals(right)) {\n            // tslint:disable-next-line:no-console\n            console.log('e(A\\', w) == e(_A, g2) return false, verify failed.');\n            return false;\n        }\n\n        _A.copy(proof._A);\n        // tslint:disable-next-line:variable-name\n        const _t1 = this.param.PAIR.G1mul(A_, proof.pi.s_e);\n        _t1.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_r2));\n        _A.sub(proof.B_);\n        _t1.add(this.param.PAIR.G1mul(_A, this.param.BIG.modneg(proof.pi.c, this.param.order)));\n\n        // ~t2 : (B')^s_r3 · HRand^s_s' · HSk^(-s_sk) · MulAll(hi^(-s_ai)) · (g1·MulAll(hi^ai))^(-c)\n        // tslint:disable-next-line:variable-name\n        const _t2 = this.param.PAIR.G1mul(proof.B_, proof.pi.s_r3);\n        _t2.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_s_));\n        _t2.add(\n            this.param.PAIR.G1mul(ipk.h_sk, this.param.BIG.modneg(proof.pi.s_sk, this.param.order))\n        );\n\n        const sum = new this.param.ECP();\n        sum.copy(this.param.g1);\n        for (let i = 0; i < D.length; i++) {\n            if (D[i] === 0) {\n                _t2.add(this.param.PAIR.G1mul(ipk.h[i], proof.pi.s_a[i]));\n            } else {\n                sum.add(this.param.PAIR.G1mul(ipk.h[i], attrs[i]));\n            }\n        }\n\n        _t2.add(this.param.PAIR.G1mul(sum, this.param.BIG.modneg(proof.pi.c, this.param.order)));\n\n        const c1 = this.param.hashToBN(\n            proof.A_,\n            proof._A,\n            proof.B_,\n            proof.Nym,\n            _t1,\n            _t2,\n            this.param.g1,\n            ipk.h0,\n            ipk.h,\n            ipk.w\n        );\n        const c2 = this.param.hashToBN(proof.pi.nonce, c1, D, attrs);\n\n        if (this.param.BIG.comp(c2, proof.pi.c) !== 0) {\n            // tslint:disable-next-line:no-console\n            console.log(\n                // tslint:disable-next-line:max-line-length\n                'c == H(nonce, H(A\\', _A, B\\', Nym, ~t1, ~t2, g1, HRand, h1, ... , hL, w), (D, I)) return false, verify failed.'\n            );\n            return false;\n        }\n\n        return true;\n    }\n}\n\n/**\n * CryptoSuite\n *  contains everything in Paring Based Cryptography\n */\nexport class CryptoSuite {\n    curve: string;\n    ctx: any;\n    order: any;\n    PAIR: any;\n    ECP: any;\n    ECP2: any;\n    BIG: any;\n    rng: any;\n    g1: any;\n    g2: any;\n\n    constructor(curve: string) {\n        this.curve = curve;\n        this.ctx = new CTX(curve);\n\n        this.PAIR = this.ctx.PAIR;          // Set pairing interface\n        this.ECP = this.ctx.ECP;            // Set G1 interface\n        this.ECP2 = this.ctx.ECP2;          // Set G2 interface\n        this.BIG = this.ctx.BIG;            // Set BN interface\n        this.rng = new this.ctx.RAND();     // new random number generator\n\n        this.g1 = this.getG1Generator();       // g1\n        this.g2 = this.getG2Generator();       // g2\n        this.order = this.getOrder(); // n\n    }\n\n    getG1Generator() {\n        const g1 = new this.ctx.ECP(0);    // new G1\n        const x = new this.ctx.BIG(0);\n        const y = new this.ctx.BIG(0);\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Gx);\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Gy);\n        g1.setxy(x, y);\n        return g1;\n    }\n\n    getG2Generator() {\n        const g2 = new this.ctx.ECP2(0);\n        const x = new this.ctx.BIG(0);\n        const y = new this.ctx.BIG(0);\n        const qx = new this.ctx.FP2(0);\n        const qy = new this.ctx.FP2(0);\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pxa);\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pxb);\n        qx.bset(x, y);\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pya);\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pyb);\n        qy.bset(x, y);\n        g2.setxy(qx, qy);\n        return g2;\n    }\n\n    getOrder() {\n        const r = new this.ctx.BIG(0);     // new BN\n        r.rcopy(this.ctx.ROM_CURVE.CURVE_Order);\n        return r;\n    }\n\n    getRandBN(): any {\n        const buf = utils.generateRandomArray(256);\n        this.rng.clean();\n        this.rng.seed(256, buf);\n        const r = this.BIG.randomnum(this.order, this.rng);\n        return r;\n    }\n\n    getRandG1(): any {\n        const r = this.getRandBN();\n        const g = this.PAIR.G1mul(this.g1, r);\n        return g;\n    }\n\n    getRandG2(): any {\n        const r = this.getRandBN();\n        const g = this.PAIR.G2mul(this.g2, r);\n        return g;\n    }\n\n    hashToBN(...points: any[]): any {\n        let all: any[] = [];\n        let tmp: ConcatArray<any> = [];\n        points.forEach((p) => {\n            if (Array.isArray(p)) {\n                if (typeof p[0] === 'number') {\n                    all = all.concat(p);\n                    tmp = [];\n                } else {\n                    p.forEach((pp) => {\n                        pp.toBytes(tmp);\n                        all = all.concat(tmp);\n                        tmp = [];\n                    });\n                }\n            } else {\n                p.toBytes(tmp);\n                all = all.concat(tmp);\n                tmp = [];\n            }\n        });\n        const H = new this.ctx.HASH256();\n        H.process_array(all);\n        const R = H.hash();\n        const C = this.BIG.fromBytes(R);\n        C.mod(this.order);\n        return C;\n    }\n\n    genAttrBN(attrs: any): any {\n        const HAttr = [];\n\n        for (let i = 0; i < attrs.length; i++) {\n            const t = this.getRandBN();\n            HAttr[i] = t;\n        }\n\n        return HAttr;\n    }\n\n    genAttrElement(attrs: any): any {\n        const HAttr = [];\n\n        for (let i = 0; i < attrs.length; i++) {\n            const t = this.getRandG1();\n            HAttr[i] = t;\n        }\n\n        return HAttr;\n    }\n}\n\n/**\n * CryptoBase\n *  contains a refrence to a CryptoSuite instance.\n */\nexport class CryptoBase {\n    param: CryptoSuite;\n    constructor(param: CryptoSuite) {\n        this.param = param;\n    }\n}\n\nexport class SecretKey extends CryptoBase {\n    /*\n     * GenerateSk():SecretKey\n     * Generate a random secret key.\n     */\n    static GenerateSk(param: CryptoSuite): SecretKey {\n        const x = param.getRandBN(); // isk\n        const sk = new SecretKey(param);\n        sk.setValue(x);\n        return sk;\n    }\n\n    value: any;\n\n    constructor(param: CryptoSuite) {\n        super(param);\n        this.value = new this.param.BIG(0);\n    }\n\n    setValue(v: any) {\n        this.value.copy(v);\n    }\n\n    GenerateIssuerPublicKey(): IssuerPublicKey {\n        const x = this.value;\n        const w = this.param.PAIR.G2mul(this.param.g2, x); // w\n        let r = this.param.getRandBN(); // random number\n        // tslint:disable-next-line:variable-name\n        const _g1 = this.param.PAIR.G1mul(this.param.g1, r);\n        // tslint:disable-next-line:variable-name\n        const _g2 = this.param.PAIR.G1mul(_g1, x);\n\n        // zkp - pi\n        r = this.param.getRandBN();\n        const t1 = this.param.PAIR.G2mul(this.param.g2, r);\n        const t2 = this.param.PAIR.G1mul(_g1, r);\n\n        const C = this.param.hashToBN(t1, t2, this.param.g2, _g1, w, _g2);\n\n        const S = this.param.BIG.modmul(C, x, this.param.order);\n        S.add(r);\n        S.mod(this.param.order);\n\n        const pi = {\n            C,\n            S\n        };\n\n        const pk = new IssuerPublicKey(this.param);\n        pk.SetBasicValue(w, _g1, _g2, pi);\n        return pk;\n    }\n\n    /*\n     * ToBytes()\n     *  convert secret key to string format.\n     *  TODO:: add serialize function.\n     */\n    ToBytes() {\n        if (this.value === undefined) {\n            return '';\n        }\n        return this.value.toBytes();\n    }\n\n    /*\n     * FromString(s: any)\n     *  convert string to a SecretKey.\n     *  TODO:: add unserialize function.\n     */\n    FromBytes(s: any) {\n        this.value = this.param.BIG.fromBytes(s);\n        return this.value.toString();\n    }\n\n    /*\n     * GenerateSk():SecretKey\n     * Generate a random secret key.\n     */\n    Rand() {\n        const x = this.param.getRandBN(); // isk\n        this.setValue(x);\n    }\n\n}\n\nexport class IssuerPublicKey extends CryptoBase {\n    /*\n     * COPY(target: IssuerPublicKey):IssuerPublicKey\n     *  copy and return a new public key\n     */\n    static COPY(target: IssuerPublicKey): IssuerPublicKey {\n        const pk = new IssuerPublicKey(target.param);\n        pk.SetBasicValue(target.w, target._g1, target._g2, target.pi);\n        pk.SetAttrValue(target.h0, target.h_sk, target.h, target.attr);\n        return pk;\n    }\n\n    w: any;\n    // tslint:disable-next-line:variable-name\n    _g1: any;\n    // tslint:disable-next-line:variable-name\n    _g2: any;\n    pi: {\n        C: any,\n        S: any\n    };\n    h0: any;\n    // tslint:disable-next-line:variable-name\n    h_sk: any;\n    h: any;\n    attr: any[];\n\n    constructor(param: CryptoSuite) {\n        super(param);\n\n        this.w = new this.param.ECP2();\n        this._g1 = new this.param.ECP();\n        this._g2 = new this.param.ECP();\n\n        const C = new this.param.BIG();\n        const S = new this.param.BIG();\n        this.pi = {C, S};\n\n        this.h0 = new this.param.ECP();\n        this.h_sk = new this.param.ECP();\n        this.attr = [];\n    }\n\n    /*\n     * SetBasicValue(w, _g1, _g2, pi)\n     *  set basic values of the public key\n     */\n    // tslint:disable-next-line:variable-name\n    SetBasicValue(w: any, _g1: any, _g2: any, pi: any) {\n        this.w.copy(w);\n        this._g1.copy(_g1);\n        this._g2.copy(_g2);\n        this.pi.C.copy(pi.C);\n        this.pi.S.copy(pi.S);\n    }\n\n    /*\n     * SetAttrValue(h0, h_sk, h, attr)\n     *  set basic values of the public key\n     */\n    // tslint:disable-next-line:variable-name\n    SetAttrValue(h0: any, h_sk: any, h: any[], attr: any[]) {\n        this.h0.copy(h0);\n        this.h_sk.copy(h_sk);\n        this.h = [];\n        this.attr = [];\n\n        for (let i = 0; i < h.length; i++) {\n            this.h[i] = new this.param.ECP();\n            this.h[i].copy(h[i]);\n        }\n        for (let i = 0; i < attr.length; i++) {\n            this.attr[i] = attr[i];\n        }\n    }\n\n    /*\n     * GenerateAttr(AttributeName)\n     *  generates\n     *    ipk.h0: rand G1\n     *    ipk.h_sk: rand G1\n     *    ipk.h[]: Rand G1 array, match to AttributeName\n     */\n    GenerateAttr(AttributeName: any) {\n        const HAttr = this.param.genAttrElement(AttributeName);\n        const h0 = this.param.getRandG1();\n        // tslint:disable-next-line:variable-name\n        const h_sk = this.param.getRandG1();\n        const h: any[] = [];\n\n        HAttr.forEach((a: any) => {\n            h.push(a);\n        });\n\n        this.h0 = h0;\n        this.h_sk = h_sk;\n        this.h = h;\n        this.attr = AttributeName;\n    }\n\n    /*\n     * VerifyCredentialRequest(Nym, pi, n)\n     *  verifies user's credential request\n     */\n    VerifyCredentialRequest(CR: any): boolean {\n        const C = new this.param.BIG(0);\n        C.copy(CR.pi.C);\n\n        // tslint:disable-next-line:variable-name\n        const _t1 = this.param.PAIR.G1mul(this.h_sk, CR.pi.S);\n        _t1.add(this.param.PAIR.G1mul(CR.Nym, this.param.BIG.modneg(C, this.param.order)));\n\n        const _C = this.param.hashToBN(_t1, this.h_sk, CR.Nym, CR.nonce);\n\n        return this.param.BIG.comp(CR.pi.C, _C) === 0;\n    }\n\n}\n\n/**\n * Credential\n *  The credential generated from issuer\n */\nexport class Credential extends CryptoBase {\n    sig: {\n        A: any,\n        B: any,\n        e: any,\n        s: any\n    };\n    attrs: any[];\n\n    constructor(param: CryptoSuite) {\n        super(param);\n        const A = new this.param.ECP();\n        const B = new this.param.ECP();\n        const e = new this.param.BIG();\n        const s = new this.param.BIG();\n        this.sig = {A, B, e, s};\n        this.attrs = [];\n    }\n\n    Set(A: any, B: any, e: any, s: any, attrs: any) {\n        this.sig.A.copy(A);\n        this.sig.B.copy(B);\n        this.sig.e.copy(e);\n        this.sig.s.copy(s);\n\n        for (let i = 0; i < attrs.length; i++) {\n            this.attrs[i] = new this.param.BIG();\n            this.attrs[i].copy(attrs[i]);\n        }\n    }\n\n    Copy(target: Credential) {\n        this.Set(target.sig.A, target.sig.B, target.sig.e, target.sig.s, target.attrs);\n    }\n\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport { reverseHex, StringReader } from '../utils';\n\nconst Fixed64Size = 8;\nexport default class Fixed64 {\n    static deserialize(sr: StringReader) {\n        const f = new Fixed64();\n        let v = sr.read(8);\n        // f.value = hexstr2str(v)\n        v = reverseHex(v);\n        while (v.substr(0, 2) === '00' ) {\n            v = v.substring(2);\n        }\n        f.value = new BigNumber(v, 16).toString();\n        return f;\n    }\n\n    // 8 bytes\n    value: string;\n    constructor(value?: string) {\n        if (value && value.length > 16 || value && !/^[0-9]\\d*$/.test(value)) {\n            throw new Error('Invalid value.' + value);\n        }\n        this.value = value || '0000000000000000';\n    }\n\n    serialize() {\n        // return str2hexstr(this.value)\n        let hexstring = new BigNumber(this.value).toString(16);\n        const size = Fixed64Size * 2;\n\n        hexstring = hexstring.length % size === 0\n            ? hexstring\n            : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n\n        hexstring = reverseHex(hexstring);\n        return hexstring;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Parameter } from './parameter';\n\n/**\n * Describes the Abi function\n */\nexport default class AbiFunction {\n    name: string;\n    returntype: string;\n    parameters: Parameter[];\n\n    constructor(name: string, returntype: string, parameters: Parameter[]) {\n        this.name = name;\n        this.returntype = returntype;\n        this.parameters = parameters;\n    }\n\n    getParameter(name: string): any {\n        // const p = {} as Parameter;\n\n        for (const v of this.parameters) {\n            if (v.getName() === name) {\n                return v;\n            }\n        }\n        return null;\n    }\n\n    setParamsValue(...args: Parameter[]): void {\n        for (let i = 0, len = args.length; i < len; i++) {\n            // tslint:disable-next-line:prefer-for-of\n            for (let j = 0 ; j < this.parameters.length; j++) {\n                if (args[i].name === this.parameters[j].getName()) {\n                    this.parameters[j].setValue(args[i]);\n                }\n            }\n        }\n        // const parameters = [];\n        // for (let i = 0, len = args.length; i < len; i++) {\n        //     parameters.push(args[i]);\n        // }\n        // this.parameters = parameters;\n    }\n\n    toString(): string {\n        const json = {\n            name : this.name,\n            returntype : this.returntype,\n            parameters : this.parameters\n        };\n\n        return JSON.stringify(json);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport {\n    bool2VarByte,\n    hex2VarBytes,\n    hexstr2str,\n    str2VarBytes,\n    StringReader\n} from '../../utils';\nimport Payload from './payload';\n\n/**\n * Describes the payload of deploy code\n */\nexport default class DeployCode extends Payload {\n    /**\n     * Hex encoded contract content\n     */\n    code: string;\n\n    /**\n     * Decides if the contract need storage\n     */\n    needStorage: boolean;\n    /**\n     * Name of the smart contract\n     */\n    name: string;\n    /**\n     * Version of the contract\n     */\n    version: string;\n    /**\n     * Author of the contract\n     */\n    author: string;\n    /**\n     * Email of the author\n     */\n    email: string;\n    /**\n     * Description of the contract\n     */\n    description: string;\n\n    /**\n     * Serialize deploy code to hex string\n     */\n    serialize(): string {\n        let result = '';\n\n        // result += this.code.serialize();\n        result += hex2VarBytes(this.code);\n\n        result += bool2VarByte(this.needStorage);\n\n        result += str2VarBytes(this.name);\n\n        result += str2VarBytes(this.version);\n\n        result += str2VarBytes(this.author);\n\n        result += str2VarBytes(this.email);\n\n        result += str2VarBytes(this.description);\n\n        return result;\n    }\n\n    /**\n     * Deserialize deploy code\n     * @param sr\n     */\n    deserialize(sr: StringReader): void {\n\n        // const code = VmCode.deserialize(sr);\n        const code = sr.readNextBytes();\n        this.code = code;\n\n        const boolValue = sr.read(1);\n        this.needStorage = boolValue === '00' ? false : true;\n\n        const name = sr.readNextBytes();\n        this.name = hexstr2str(name);\n\n        const codeVersion = sr.readNextBytes();\n        this.version = hexstr2str(codeVersion);\n\n        const author = sr.readNextBytes();\n        this.author = hexstr2str(author);\n\n        const email = sr.readNextBytes();\n        this.email = hexstr2str(email);\n\n        const description = sr.readNextBytes();\n        this.description = hexstr2str(description);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { ERROR_CODE } from '../error';\nimport { hex2VarBytes, num2hexstring, StringReader } from '../utils';\n\nexport enum TransactionAttributeUsage {\n    Nonce           = 0x00,\n    Script          = 0x20,\n    DescriptionUrl  = 0x81,\n    Description     = 0x90\n}\n\n/**\n * @deprecated\n * TransactionAttribute\n * @property {number} usage - Identifying byte\n * @property {string} data - Data\n */\nexport class TransactionAttribute {\n    usage: TransactionAttributeUsage;\n    // hexstring\n    data: string;\n\n    serialize(): string {\n        let result = '';\n        result += num2hexstring(this.usage);\n        if (this.usage === TransactionAttributeUsage.Script) {\n            result += this.data;\n        } else if (this.usage === TransactionAttributeUsage.DescriptionUrl\n                || this.usage === TransactionAttributeUsage.Description\n                || this.usage === TransactionAttributeUsage.Nonce) {\n            result += hex2VarBytes(this.data);\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n\n        return result;\n    }\n\n    deserialize(ss: StringReader): void {\n        // usage\n        const usage = parseInt(ss.read(1), 16);\n        // nonce\n        // const nonce = ss.read(8);\n        // get hash with publicKey;\n        const dataLen = ss.readNextLen();\n        const data = ss.read(dataLen);\n        this.usage = usage;\n        // this.nonce = nonce;\n        this.data = data;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { hex2VarBytes, StringReader } from '../../utils';\nimport Payload from './payload';\n\nexport default class InvokeCode extends Payload {\n    // the length is of bytes 20\n    /*\n    scriptHash : string\n    parameters : Array<Parameter> = []\n    functionName : string\n     */\n\n    /**\n     * Hex encoed string\n     */\n    code: string;\n\n    constructor() {\n        super();\n        // this.gasLimit = new Fixed64()\n    }\n\n/*     serialize() : string {\n        let payloadLength\n        let paramsLength = num2hexstring( 0x50 + this.parameters.length) //start from '0x50'\n        const paramsEnd = 'c1'\n        let funcNameHex = str2hexstr(this.functionName)\n        const funcNameLength = num2hexstring(funcNameHex.length/2)\n\n        let params = []\n        for(let i = this.parameters.length-1; i > -1; i--) {\n            let p = this.parameters[i]\n            let hexP = p.getValue()\n            let hexPLength = num2VarInt( hexP.length / 2)\n            let opcode = ''\n            if( hexP.length/2 < OPCODE.PUSHBYTES75) {\n\n            } else if (hexP.length / 2 < 0x100) {\n                opcode = num2VarInt( OPCODE.PUSHDATA1 )\n            } else if( hexP.length/2 < 0x1000 ) {\n                opcode = num2hexstring( OPCODE.PUSHDATA2, 2, true)\n            } else {\n                opcode = num2hexstring( OPCODE.PUSHDATA4, 4, true)\n            }\n            params.push ({\n                hexPLength,\n                hexP,\n                opcode\n            })\n        }\n\n        let result = ''\n        //scripthash\n        // result += this.scriptHash\n        //params\n        for(let v of params) {\n            if(v.opcode) {\n                result += v.opcode\n            }\n            result += v.hexPLength\n            result += v.hexP\n        }\n        result += paramsLength\n        //end\n        result += paramsEnd\n        //function\n        result += funcNameLength\n        result += funcNameHex\n        let totalParamsLength = num2VarInt(result.length / 2)\n        //result = this.scriptHash + totalParamsLength + result\n\n        console.log('invode serialze: '+ result)\n\n        return result\n    }  */\n\n    serialize() {\n        let result = '';\n        // if(this.gasLimit) {\n        //     result += this.gasLimit.serialize()\n        // }\n        // result += this.code.serialize();\n        result += hex2VarBytes(this.code);\n        return result;\n    }\n\n    /* deserialize(ss : StringReader) : void {\n        //scriptHash, fixed langth\n        this.scriptHash = ss.read(20)\n        //payload total lenght\n        const payloadLen = ss.readNextLen()\n\n        //read params start\n        let params = []\n        let nextByte = ss.readNextLen()\n        //params's length start from 0x50\n        while(nextByte < 0x50) {\n            let p = ss.read(nextByte)\n            params.push(p)\n            nextByte = ss.readNextLen()\n        }\n        //params end\n        let end = ss.read(1)\n        console.log('end :' + end)\n        if(end === 'c1') {\n            for(let i=0; i< params.length; i++) {\n                //TODO can only get value\n                this.parameters.push(new Parameter('','',params[i]))\n            }\n        }\n        //function name\n        let funNameLen = ss.readNextLen()\n        let func = ss.read(funNameLen)\n        func = hexstr2str(func)\n        //payload end\n        this.functionName = func\n\n    }  */\n\n    deserialize(sr: StringReader) {\n        // let gasLimit = Fixed64.deserialize(sr);\n        // const code = VmCode.deserialize(sr);\n        const code = sr.readNextBytes();\n        // this.gasLimit = gasLimit;\n        this.code = code;\n        return this;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { PrivateKey, PublicKey, Signable, SignatureScheme } from '../crypto';\nimport { hex2VarBytes, StringReader } from '../utils';\nimport { getParamsFromProgram, getProgramInfo,\n    programFromMultiPubKey, programFromParams, programFromPubKey } from './program';\n\n/**\n * Signature generated by signing transaction hash with Private Keys.\n */\nexport class TxSignature {\n\n    /**\n     * Deserializes hex representation to Transaction Signature\n     *\n     * @param sr Hex string reader\n     */\n    static deserialize(sr: StringReader) {\n        const sig = new TxSignature();\n        // sig.pubKeys = [];\n        // const pubKeyLength = sr.readNextLen();\n\n        // for (let i = 0; i < pubKeyLength; i++) {\n        //     const serializedLength = sr.readNextLen();\n        //     const pk = PublicKey.deserializeHex(sr, serializedLength);\n        //     sig.pubKeys.push(pk);\n        // }\n\n        // sig.M = sr.readNextLen();\n        // sig.sigData = [];\n\n        // const dataLength = sr.readNextLen();\n        // for (let i = 0; i < dataLength; i++) {\n        //     const data = sr.readNextBytes();\n        //     sig.sigData.push(data);\n        // }\n        const invocationScript = sr.readNextBytes();\n        const verificationScript = sr.readNextBytes();\n        const sigData = getParamsFromProgram(invocationScript);\n        const info = getProgramInfo(verificationScript);\n        sig.M = info.M;\n        sig.pubKeys = info.pubKeys;\n        sig.sigData = sigData;\n        return sig;\n    }\n\n    /**\n     * Creates Transaction signature of hash with supplied private key and scheme.\n     *\n     * If the signature schemas is not provided, the default schemes for the key types are used.\n     *\n     * @param hash hash of the transaction or signable transaction\n     * @param privateKey Private key to use\n     * @param scheme Signature scheme to use\n     */\n    static create(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\n        const signature = new TxSignature();\n\n        signature.M = 1;\n        signature.pubKeys = [privateKey.getPublicKey()];\n        signature.sigData = [privateKey.sign(hash, scheme).serializeHex()];\n\n        return signature;\n    }\n\n    /**\n     * Creates Transaction signature of hash with supplied private key and scheme asynchroniously.\n     *\n     * If the signature schemas is not provided, the default schemes for the key types are used.\n     *\n     * @param hash hash of the transaction or signable transaction\n     * @param privateKey Private key to use\n     * @param scheme Signature scheme to use\n     */\n    static async createAsync(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\n        const signature = new TxSignature();\n\n        signature.M = 1;\n        signature.pubKeys = [privateKey.getPublicKey()];\n        signature.sigData = [(await privateKey.signAsync(hash, scheme)).serializeHex()];\n\n        return signature;\n    }\n\n    /**\n     * Public keys used to create this signature.\n     */\n    pubKeys: PublicKey[];\n\n    // Cardinality of the signature\n    M: number;\n\n    // Signature values\n    sigData: string[];\n\n    /**\n     * Serializes signature to Hex representation.\n     *\n     */\n    serialize(): string {\n        let result = '';\n        // result += num2hexstring(this.pubKeys.length);\n\n        // // tslint:disable-next-line:prefer-for-of\n        // for (let i = 0; i < this.pubKeys.length; i++) {\n        //     const serialized = this.pubKeys[i].serializeHex();\n        //     result += num2hexstring(serialized.length / 2);\n        //     result += serialized;\n        // }\n\n        // result += num2hexstring(this.M);\n\n        // result += num2hexstring(this.sigData.length);\n\n        // // tslint:disable-next-line:prefer-for-of\n        // for (let i = 0; i < this.sigData.length; i++) {\n        //     result += hex2VarBytes(this.sigData[i]);\n        // }\n        const invocationScript = programFromParams(this.sigData);\n        let verificationScript = '';\n        if (this.pubKeys.length === 0) {\n            throw new Error('No pubkeys in sig');\n        } else if (this.pubKeys.length === 1) {\n            verificationScript = programFromPubKey(this.pubKeys[0]);\n        } else {\n            verificationScript = programFromMultiPubKey(this.pubKeys, this.M);\n        }\n        result += hex2VarBytes(invocationScript);\n        result += hex2VarBytes(verificationScript);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as cryptoJS from 'crypto-js';\nimport Fixed64 from '../common/fixed64';\nimport { Address } from '../crypto/address';\nimport { Signable } from '../crypto/signable';\nimport { ab2hexstring, generateRandomArray, num2hexstring, StringReader } from '../utils';\nimport DeployCode from './payload/deployCode';\nimport InvokeCode from './payload/invokeCode';\nimport Payload from './payload/payload';\nimport { TransactionAttribute } from './txAttribute';\nimport { TxSignature } from './txSignature';\n\nexport enum TxType  {\n    BookKeeper      = 0x02,\n    Claim           = 0x03,\n    Deploy          = 0xd0,\n    Invoke          = 0xd1,\n    Enrollment      = 0x04,\n    Vote            = 0x05\n}\n\nexport const TxName = {\n    BookKeeper: 'BookKeeper',\n    Claim: 'Claim',\n    Deploy: 'Deploy',\n    Invoke: 'Invoke',\n    Enrollment: 'Enrollment',\n    Vote: 'Vote'\n};\n\n/**\n * @deprecated. Transaction fee.\n */\nexport class Fee {\n    static deserialize(sr: StringReader): Fee {\n        const fee = new Fee();\n        const amount = Fixed64.deserialize(sr);\n        const payer = sr.read(20);\n        fee.amount = amount;\n        fee.payer = new Address(payer);\n        return fee;\n    }\n\n    amount: Fixed64;\n\n    // 20 bytes address\n    payer: Address;\n\n    serialize(): string {\n        let result = '';\n        result += this.amount.serialize();\n        result += this.payer.serialize();\n        return result;\n    }\n}\n\nexport class Transaction implements Signable {\n    static deserialize(hexstring: string): Transaction {\n        const tx = new Transaction();\n\n        // console.log(' hexstring' + hexstring)\n        const ss = new StringReader(hexstring);\n\n        tx.version = parseInt(ss.read(1), 16);\n        tx.type = parseInt(ss.read(1), 16);\n        tx.nonce = ss.read(4);\n        tx.gasPrice = Fixed64.deserialize(ss);\n        tx.gasLimit = Fixed64.deserialize(ss);\n        tx.payer = new Address(ss.read(20));\n        let payload;\n\n        switch (tx.type) {\n        case TxType.Invoke :\n            payload = new InvokeCode();\n            break;\n        case TxType.Deploy:\n            payload = new DeployCode();\n            break;\n        default :\n            payload = new InvokeCode();\n        }\n        payload.deserialize(ss);\n        tx.payload = payload;\n        tx.txAttributes = [];\n        tx.sigs = [];\n\n        const attributeLength = ss.readNextLen();\n        for (let i = 0; i < attributeLength; i++) {\n            const txAttribute = new TransactionAttribute();\n            txAttribute.deserialize(ss);\n            tx.txAttributes.push(txAttribute);\n        }\n\n        const sigLength = ss.readNextLen();\n        for (let i = 0; i < sigLength; i++) {\n            tx.sigs.push(TxSignature.deserialize(ss));\n        }\n\n        return tx;\n    }\n\n    /**\n     * Transaction type\n     */\n    type: TxType = 0xd1;\n\n    /**\n     * Version of transaction\n     */\n    version: number = 0x00;\n\n    /**\n     * Payload of transaction\n     */\n    payload: Payload;\n\n    /**\n     * Random hex string. 4 bytes.\n     */\n    nonce: string;\n\n    /**\n     * @deprecated\n     */\n    txAttributes: TransactionAttribute[] = [];\n\n    /**\n     * Gas price\n     */\n    gasPrice: Fixed64;\n\n    /**\n     * Gas limit\n     */\n    gasLimit: Fixed64;\n\n    /**\n     * Address to pay for gas\n     */\n    payer: Address;\n\n    /**\n     * Array of signatures\n     */\n    sigs: TxSignature[] = [];\n\n    constructor() {\n        this.nonce = ab2hexstring(generateRandomArray(4));\n        this.gasPrice = new Fixed64();\n\n        // const limit = num2hexstring(DEFAULT_GAS_LIMIT, 8, true);\n\n        this.gasLimit = new Fixed64();\n        this.payer = new Address('0000000000000000000000000000000000000000');\n    }\n\n    /**\n     * Serialize transaction to hex string\n     * The result is used to send to blockchain.\n     */\n    serialize(): string {\n        const unsigned = this.serializeUnsignedData();\n        const signed = this.serializeSignedData();\n\n        return unsigned + signed;\n    }\n\n    /**\n     * Serialize transaction data exclueds signatures\n     */\n    serializeUnsignedData() {\n        let result = '';\n        result += num2hexstring(this.version);\n        result += num2hexstring(this.type);\n\n        // nonce 4bytes\n        result += this.nonce;\n        result += this.gasPrice.serialize();\n        result += this.gasLimit.serialize();\n        result += this.payer.serialize();\n        result += this.payload.serialize();\n\n        // serialize transaction attributes\n        result += num2hexstring(this.txAttributes.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.txAttributes.length; i++) {\n            result += this.txAttributes[i].serialize();\n        }\n        // result += num2hexstring(this.fee.length)\n        // for (let i=0 ; i< this.fee.length; i++) {\n        //     result += this.fee[i].amount.serialize()\n        //     result += this.fee[i].payer.serialize()\n        // }\n\n        // if(this.networkFee) {\n        //     result += this.networkFee.serialize()\n        // }\n\n        return result;\n    }\n\n    /**\n     * Serialize signatures\n     */\n    serializeSignedData() {\n        let result = '';\n        // programs\n        result += num2hexstring(this.sigs.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.sigs.length; i++) {\n            result += this.sigs[i].serialize();\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the signable content\n     */\n    getSignContent() {\n        const data = this.serializeUnsignedData();\n\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\n\n        return ProgramSha2562;\n    }\n\n    /**\n     * Get the hash of transaction\n     * @deprecated Use getSignContent instead\n     */\n    getHash() {\n        return this.getSignContent();\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { Address } from '../crypto/address';\nimport { Transaction } from './transaction';\n\nexport class Transfer extends Transaction {\n    amount: number | string;\n    tokenType: string;\n    from: Address;\n    to: Address;\n    method: string;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport Fixed64 from '../common/fixed64';\nimport { NATIVE_INVOKE_NAME, REST_API, TX_MAX_SIG_SIZE } from '../consts';\nimport { Address, PrivateKey, SignatureScheme } from '../crypto';\nimport { PublicKey } from '../crypto/PublicKey';\nimport { ERROR_CODE } from '../error';\nimport AbiFunction from '../smartcontract/abi/abiFunction';\nimport { Parameter } from '../smartcontract/abi/parameter';\nimport {\n    num2hexstring,\n    str2hexstr\n} from '../utils';\nimport opcode from './opcode';\nimport DeployCode from './payload/deployCode';\nimport InvokeCode from './payload/invokeCode';\nimport { comparePublicKeys } from './program';\nimport { pushHexString, pushInt, serializeAbiFunction } from './scriptBuilder';\nimport { Transaction, TxType } from './transaction';\nimport { Transfer } from './transfer';\nimport { TxSignature } from './txSignature';\n// const abiInfo = AbiInfo.parseJson(JSON.stringify(json));\n\n// tslint:disable-next-line:variable-name\nexport const Default_params = {\n    Action: 'sendrawtransaction',\n    Version: '1.0.0',\n    Type: '',\n    Op: 'test'\n};\n\n/**\n * Signs the transaction object.\n *\n * If there is already a signature, the new one will replace existing.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param privateKey Private key to sign with\n * @param schema Signature Schema to use\n */\nexport const signTransaction = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\n    const signature = TxSignature.create(tx, privateKey, schema);\n\n    tx.sigs = [signature];\n};\n\n/**\n * Signs the transaction object asynchroniously.\n *\n * If there is already a signature, the new one will replace existing.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param privateKey Private key to sign with\n * @param schema Signature Schema to use\n */\nexport const signTransactionAsync = async (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\n    const signature = await TxSignature.createAsync(tx, privateKey, schema);\n\n    tx.sigs = [signature];\n};\n\n/**\n * Signs the transaction object.\n *\n * If there is already a signature, the new one will be added to the end.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param privateKey Private key to sign with\n * @param schema Signature Schema to use\n */\nexport const addSign = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\n    const signature = TxSignature.create(tx, privateKey, schema);\n\n    tx.sigs.push(signature);\n};\n\nconst equalPks = (pks1: PublicKey[], pks2: PublicKey[]): boolean => {\n    if (pks1 === pks2) {\n        return true;\n    }\n    pks1.sort(comparePublicKeys);\n    pks2.sort(comparePublicKeys);\n    if (pks1.length !== pks2.length) {\n        return false;\n    }\n    for (let i = 0; i < pks1.length ; i++) {\n        if (pks1[i].key !== pks2[i].key) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Signs the transaction with multiple signatures with multi-sign keys.\n *\n * If there is already a signature, the new ones will be added to the end.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param M m of the (m ,n) multi sign address threshold\n * @param pubKeys Array of Public keys of (m,n) multi sign address, the number is n\n * @param privateKey Private key to sign the tx.\n * @param scheme Signature scheme to use\n */\nexport const signTx = (tx: Transaction, M: number, pubKeys: PublicKey[],\n                       privateKey: PrivateKey, scheme?: SignatureScheme) => {\n\n    if (tx.sigs.length === 0) {\n        tx.sigs = [];\n    } else {\n        if (tx.sigs.length > TX_MAX_SIG_SIZE || M > pubKeys.length || M <= 0 || pubKeys.length === 0) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < tx.sigs.length; i++) {\n            if (equalPks(tx.sigs[i].pubKeys, pubKeys)) {\n                if (tx.sigs[i].sigData.length + 1 > pubKeys.length) {\n                    throw new Error('Too many sigData');\n                }\n                const signData = privateKey.sign(tx, scheme).serializeHex();\n                tx.sigs[i].sigData.push(signData);\n                return;\n            }\n        }\n    }\n    const sig = new TxSignature();\n    sig.M = M;\n    sig.pubKeys = pubKeys;\n    sig.sigData = [privateKey.sign(tx, scheme).serializeHex()];\n    tx.sigs.push(sig);\n};\n\n/**\n * Creates transaction to invoke native contract\n * @param funcName Function name of contract to call\n * @param params Parameters serialized in hex string\n * @param contractAddr Adderss of contract\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for transaction gas\n */\nexport function makeNativeContractTx(\n    funcName: string,\n    params: string,\n    contractAddr: Address,\n    gasPrice?: string,\n    gasLimit?: string,\n    payer?: Address\n) {\n    let code = '';\n    code += params;\n    code += pushHexString(str2hexstr(funcName));\n    code += pushHexString(contractAddr.serialize());\n    code += pushInt(0);\n    code += num2hexstring(opcode.SYSCALL);\n    code += pushHexString(str2hexstr(NATIVE_INVOKE_NAME));\n    const payload = new InvokeCode();\n    payload.code = code;\n\n    let tx: Transaction;\n    if (funcName === 'transfer' || funcName === 'transferFrom') {\n        tx = new Transfer();\n    } else {\n        tx = new Transaction();\n    }\n\n    tx.type = TxType.Invoke;\n    tx.payload = payload;\n    if (gasLimit) {\n        tx.gasLimit = new Fixed64(gasLimit);\n    }\n    if (gasPrice) {\n        tx.gasPrice = new Fixed64(gasPrice);\n    }\n    if (payer) {\n        tx.payer = payer;\n    }\n    return tx;\n}\n\n/**\n * Creates transaction to inovke smart contract\n * @param funcName Function name of smart contract\n * @param params Array of Parameters or serialized parameters\n * @param contractAddr Address of contract\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for gas\n */\nexport const makeInvokeTransaction = (\n    funcName: string,\n    params: Parameter[] | string,\n    contractAddr: Address,\n    gasPrice?: string,\n    gasLimit?: string,\n    payer?: Address\n) => {\n    const tx = new Transaction();\n    tx.type = TxType.Invoke;\n\n    let args = '';\n    if (typeof params === 'string') {\n        args = params;\n    } else {\n        const abiFunc = new AbiFunction(funcName, '', params);\n        args = serializeAbiFunction(abiFunc);\n    }\n\n    let code = args + num2hexstring(opcode.APPCALL);\n    code += contractAddr.serialize();\n\n    const payload = new InvokeCode();\n    payload.code = code;\n    tx.payload = payload;\n\n    if (gasLimit) {\n        tx.gasLimit = new Fixed64(gasLimit);\n    }\n    if (gasPrice) {\n        tx.gasPrice = new Fixed64(gasPrice);\n    }\n    if (payer) {\n        tx.payer = payer;\n    }\n    return tx;\n};\n\n/**\n * Creates transaction to deploy smart contract\n * @param code Avm code of contract to deploy\n * @param name Name of contract\n * @param codeVersion version of contract\n * @param author Author of contract\n * @param email Email of author\n * @param desp Description of contract\n * @param needStorage Decides if the contract needs storage\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for gas\n */\nexport function makeDeployCodeTransaction(\n    code: string,\n    name: string= '',\n    codeVersion: string= '1.0',\n    author: string= '',\n    email: string= '',\n    desp: string= '', needStorage: boolean= true, gasPrice: string, gasLimit: string, payer?: Address) {\n    const dc = new DeployCode();\n    dc.author = author;\n    // const vmCode = new VmCode();\n    // vmCode.code = code;\n    // vmCode.vmType = vmType;\n    // dc.code = vmCode;\n    dc.code = code;\n    dc.version = codeVersion;\n    dc.description = desp;\n    dc.email = email;\n    dc.name = name;\n    dc.needStorage = needStorage;\n\n    const tx = new Transaction();\n    tx.version = 0x00;\n\n    tx.payload = dc;\n\n    tx.type = TxType.Deploy;\n    // gas\n    // if (DEFAULT_GAS_LIMIT === Number(0)) {\n    //     tx.gasPrice = new Fixed64();\n    // } else {\n    //     const price = new BigNumber(gas).multipliedBy(1e9).dividedBy(new BigNumber(DEFAULT_GAS_LIMIT)).toString();\n    //     tx.gasPrice = new Fixed64(price);\n    // }\n    tx.gasLimit = new Fixed64(gasLimit);\n    tx.gasPrice = new Fixed64(gasPrice);\n    if (payer) {\n        tx.payer = payer;\n    }\n\n    return tx;\n\n}\n\n/**\n * @deprecated\n * Creates params from transaction to send with websocket\n * @param tx Transactio to send\n * @param isPreExec Decides if it is pre-execute transaction\n */\nexport function buildTxParam(tx: Transaction, isPreExec: boolean = false) {\n    const op = isPreExec ? { PreExec: '1'} : {};\n    const serialized = tx.serialize();\n\n    return JSON.stringify(Object.assign({}, Default_params, { Data: serialized }, op));\n}\n\n/**\n * @deprecated\n * Creates params from transaction to send with rpc\n * @param tx Transaction\n * @param method Method name\n */\nexport function buildRpcParam(tx: Transaction, method?: string) {\n    const param = tx.serialize();\n    const result = {\n        jsonrpc: '2.0',\n        method: method || 'sendrawtransaction',\n        params: [param],\n        id: 10\n    };\n    return result;\n}\n\n/**\n * @deprecated\n * Creates params from transaction to send with restful\n * @param tx Transaction\n */\nexport function buildRestfulParam(tx: Transaction) {\n    const param = tx.serialize();\n    return {\n        Action : 'sendrawtransaction',\n        Version : '1.0.0',\n        Data : param\n    };\n}\n\n/**\n * @deprecated\n * @param url Url of blochchain node\n * @param preExec Decides if is a pre-execute request\n */\nexport function sendRawTxRestfulUrl(url: string, preExec: boolean = false) {\n    if (url.charAt(url.length - 1) === '/') {\n        url = url.substring(0, url.length - 1);\n    }\n\n    let restUrl = url + REST_API.sendRawTx;\n    if (preExec) {\n        restUrl += '?preExec=1';\n    }\n\n    return restUrl;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as bip39 from 'bip39';\nimport { ONT_BIP44_PATH } from './consts';\nimport { Address, PrivateKey } from './crypto';\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\nimport { ERROR_CODE } from './error';\nimport { ScryptParams } from './scrypt';\nimport { Transaction } from './transaction/transaction';\nimport { signTransaction } from './transaction/transactionBuilder';\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\n\n// tslint:disable-next-line:no-var-requires\nconst HDKey = require('@ont-community/hdkey-secp256r1');\n\nexport class Account {\n    /**\n     * Import account\n     * @param label Account's label\n     * @param encryptedPrivateKey Encrypted private key\n     * @param password User's password to decrypt private key\n     * @param address Account's address\n     * @param saltBase64 Salt to decrypt\n     * @param params Params used to decrypt\n     */\n    static importAccount(\n        label: string ,\n        encryptedPrivateKey: PrivateKey,\n        password: string,\n        address: Address,\n        saltBase64: string,\n        params?: ScryptParams\n    ): Account {\n        const account = new Account();\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\n\n        if (!label) {\n            label = ab2hexstring(generateRandomArray(4));\n        }\n        account.label = label;\n        account.lock = false;\n        account.isDefault = false;\n        account.salt = saltBase64;\n\n        account.encryptedKey = encryptedPrivateKey;\n\n        const publicKey = privateKey.getPublicKey();\n        account.publicKey = publicKey.key;\n\n        account.address = Address.fromPubKey(publicKey);\n\n        return account;\n    }\n\n    /**\n     * Import account with mnemonic\n     * @param label Account's label\n     * @param mnemonic User's mnemonic\n     * @param password user's password to encrypt the private key\n     * @param params Params used to encrypt the private key.\n     */\n    static importWithMnemonic(\n        label: string,\n        mnemonic: string,\n        password: string,\n        params?: ScryptParams\n    ): Account {\n        mnemonic = mnemonic.trim();\n        if (!bip39.validateMnemonic(mnemonic)) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\n        const pri = hdkey.derive(ONT_BIP44_PATH);\n        const key = Buffer.from(pri.privateKey).toString('hex');\n        const privateKey = new PrivateKey(key);\n        const account = Account.create(privateKey, password, label, params);\n        return account;\n    }\n\n    /**\n     * Creates Account object encrypting specified private key.\n     *\n     * The account does not need to be registered on blockchain.\n     *\n     * @param privateKey Private key associated with the account\n     * @param password Password use to encrypt the private key\n     * @param label Custom label\n     * @param params Optional scrypt params\n     */\n    static create(\n        privateKey: PrivateKey,\n        password: string,\n        label?: string,\n        params?: ScryptParams\n    ): Account {\n        const account = new Account();\n        if (!label) {\n            label = ab2hexstring(generateRandomArray(4));\n        }\n        account.label = label;\n        account.lock = false;\n        account.isDefault = false;\n\n        const salt = randomBytes(16);\n        const publicKey = privateKey.getPublicKey();\n        const address = Address.fromPubKey(publicKey);\n        account.publicKey = publicKey.serializeHex();\n        account.address = address;\n        account.encryptedKey = privateKey.encrypt(password, address, salt, params);\n        account.salt = Buffer.from(salt, 'hex').toString('base64');\n        return account;\n    }\n\n    static parseJson(json: string): Account {\n        return Account.parseJsonObj(JSON.parse(json));\n    }\n\n    /**\n     * Deserializes JSON object.\n     *\n     * Object should be real object, not stringified.\n     *\n     * @param obj JSON object\n     */\n    static parseJsonObj(obj: any): Account {\n        const account = new Account();\n        account.address = new Address(obj.address);\n        account.label = obj.label;\n        account.lock = obj.lock;\n        account.isDefault = obj.isDefault;\n        account.publicKey = obj.publicKey;\n        account.hash = obj.hash;\n        account.salt = obj.salt;\n        account.encryptedKey = deserializeFromJson({\n            algorithm: obj.algorithm,\n            parameters: obj.parameters,\n            key: obj.key,\n            external: obj.external\n        });\n        // account.contract = obj.contract\n        account.extra = obj.extra;\n        return account;\n    }\n\n    address: Address;\n    label: string;\n    lock: boolean;\n    encryptedKey: PrivateKey;\n    extra: null;\n\n    // to compatible with cli wallet\n    'enc-alg': string = 'aes-256-gcm';\n    hash: string = 'sha256';\n    salt: string;\n\n    publicKey: string;\n    isDefault: boolean;\n\n    toJson(): string {\n        return JSON.stringify(this.toJsonObj());\n    }\n\n    /**\n     * Serializes to JSON object.\n     *\n     * Returned object will not be stringified.\n     *\n     */\n    toJsonObj(): any {\n        const obj = {\n            'address': this.address.toBase58(),\n            'label': this.label,\n            'lock': this.lock,\n            ...this.encryptedKey.serializeJson(),\n            'enc-alg': this['enc-alg'],\n            'hash': this.hash,\n            'salt': this.salt,\n            'isDefault': this.isDefault,\n            'publicKey': this.publicKey,\n            'signatureScheme': this.encryptedKey.algorithm.defaultSchema.label\n        };\n        return obj;\n    }\n\n    exportPrivateKey(password: string, params?: ScryptParams) {\n        return this.encryptedKey.decrypt(password, this.address, this.salt, params);\n    }\n\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\n        const pri = this.exportPrivateKey(password, params);\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\n        return tx;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Restful api\n */\nexport default {\n    Url_send_transaction : '/api/v1/transaction',\n    Url_get_transaction : '/api/v1/transaction/',\n    Url_get_generate_block_time : '/api/v1/node/generateblocktime',\n    Url_get_node_count : '/api/v1/node/connectioncount',\n    Url_get_block_height : '/api/v1/block/height',\n    Url_get_block_by_height : '/api/v1/block/details/height/',\n    Url_get_block_by_hash : '/api/v1/block/details/hash/',\n    Url_get_account_balance : '/api/v1/balance/',\n    Url_get_contract_state : '/api/v1/contract/',\n    Url_get_smartcodeevent_txs_by_height : '/api/v1/smartcode/event/transactions/',\n    Url_get_smartcodeevent_by_txhash : '/api/v1/smartcode/event/txhash/',\n    Url_get_block_height_by_txhash : '/api/v1/block/height/txhash/',\n    Url_get_storage : '/api/v1/storage/',\n    Url_get_merkleproof : '/api/v1/merkleproof/',\n    Url_get_allowance: '/api/v1/allowance/'\n};\n","import { ERROR_CODE } from './../../error';\n/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport axios from 'axios';\nimport { TEST_ONT_URL } from '../../consts';\nimport { Address } from '../../crypto/address';\nimport UrlConsts from './urlConsts';\n\n/**\n * Wrapper class for restful api.\n */\nexport default class RestClient {\n    /**\n     * Url of the blockchain node\n     */\n    url: string;\n\n    /**\n     * Version of restful api\n     */\n    version: string = 'v1.0.0';\n\n    /**\n     * Action name of the request\n     */\n    action: string = 'sendrawtransaction';\n\n    constructor(url ?: string) {\n        this.url = url || TEST_ONT_URL.REST_URL;\n        if (this.url[this.url.length - 1] === '/') {\n            this.url = this.url.substring(0, this.url.length - 1);\n        }\n    }\n\n    /**\n     * Concat params as the query part\n     * @param params\n     */\n    concatParams(params: Map<string, string>) {\n        let result = '';\n        if (params.size === 0) {\n            return '';\n        }\n\n        for (const key of params.keys()) {\n            let value = params.get(key);\n            if (value) {\n                value = encodeURIComponent(value);\n            }\n            result += `&${key}=${value}`;\n        }\n\n        return '?' + result.substr(1);\n    }\n\n    /**\n     * Get the current blockchain node url\n     */\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * To send raw transaction to blockchian\n     * @param hexData Hex encoded data\n     * @param preExec Decides if it is a pre-execute transaction\n     * @param userId User's id\n     */\n    sendRawTransaction(hexData: string, preExec: boolean = false, userId ?: string): Promise<any> {\n        const param = new Map<string, string>();\n\n        if (userId) {\n            param.set('userid', userId);\n        }\n\n        if (preExec) {\n            param.set('preExec', '1');\n        }\n\n        let url = this.url + UrlConsts.Url_send_transaction;\n        url += this.concatParams(param);\n\n        const body = {\n            Action  : this.action,\n            Version : this.version,\n            Data    : hexData\n        };\n\n        return axios.post(url, body).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get raw transaction by transaction hash.\n     * The result is hex encoded transaction.\n     * @param txHash Transactin hash.Always use the reversed value of transaction hash to query.\n     *\n     * @example\n     *\n     * ```typescript\n     * import { utils, Transaction } from 'ontology-ts-sdk';\n     * const txHash = tx.getHash(); // tx is an instance of Transaction\n     * restClient.getRawTransaction(utils.reverseHex(txHash)).then(res => {\n     *   const tx = Transaction.deserialize(res.Result)\n     * })\n     *\n     * ````\n     */\n    getRawTransaction(txHash: string): Promise<any> {\n        const param = new Map<string, string>();\n\n        param.set('raw', '1');\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\n        url += this.concatParams(param);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get transaction by transaction hash.\n     * The result is transaction in json.\n     * @param txHash Reversed transaction hash\n     */\n    getRawTransactionJson(txHash: string): Promise<any> {\n        const param = new Map<string, string>();\n        param.set('raw', '0');\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\n        url += this.concatParams(param);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /** Deprecated\n     * Get the generation time for each block.\n     * If the blockchain node runs in vbft, the result is null.\n     */\n    // getGenerateBlockTime(): Promise<any> {\n    //     const url = this.url + UrlConsts.Url_get_generate_block_time;\n    //     return axios.get(url).then((res) => {\n    //         return res.data;\n    //     });\n    // }\n\n    /**\n     * Get the nodes count of the blockchain.\n     */\n    getNodeCount(): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_node_count;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the current height of the blockchain.\n     */\n    getBlockHeight(): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_block_height;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block by block's height or hash\n     * @param value Block height or block hash\n     */\n    getBlock(value: number | string): Promise<any> {\n        const params = new Map<string, string>();\n        params.set('raw', '1');\n\n        let url = '';\n        if (typeof value === 'number') {\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\n        } else if (typeof value === 'string') {\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\n        }\n        url += this.concatParams(params);\n\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by code hash.The result is hex encoded string.\n     * @param codeHash Code hash of contract.The value is reversed contract address.\n     */\n    getContract(codeHash: string): Promise<any> {\n        const params = new Map<string, string>();\n        params.set('raw', '1');\n\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n        url += this.concatParams(params);\n\n            // console.log('url: '+url);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by code hash. The result is json.\n     * @param codeHash Code hash of contract.\n     */\n    getContractJson(codeHash: string): Promise<any> {\n        const params = new Map<string, string>();\n        params.set('raw', '0');\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n        url += this.concatParams(params);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get smart contract event by Block height or reversed transaction hash.\n     * If the parameter is block height, the result includes all the transaction event of that block;\n     * If the parameter is transaction hash, the result is the event of that transaction.\n     * @param value Block height or reversed transaction hash\n     */\n    getSmartCodeEvent(value: string | number): Promise<any> {\n        let url = '';\n        if (typeof value === 'string') {\n            url = this.url + UrlConsts.Url_get_smartcodeevent_by_txhash + value;\n        } else if (typeof value === 'number') {\n            url = this.url + UrlConsts.Url_get_smartcodeevent_txs_by_height + value;\n        }\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the block height by reversed transaction hash.\n     * @param hash Reversed transaction hash.\n     */\n    getBlockHeightByTxHash(hash: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_block_height_by_txhash + hash;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the stored value in smart contract by the code hash and key.\n     * @param codeHash Code hash of the smart contract\n     * @param key Key of the stored value\n     */\n    getStorage(codeHash: string, key: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_storage + codeHash + '/' + key;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the merkle proof by transaction hash\n     * @param hash Reversed transaction hash\n     */\n    getMerkleProof(hash: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_merkleproof + hash;\n\n            // tslint:disable-next-line:no-console\n        console.log('url: ' + url);\n\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get balance of some address\n     * The result contains balance of ONT and ONG\n     * @param address Address\n     */\n    getBalance(address: Address): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_account_balance + address.toBase58();\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block info by block's height or hash.\n     * @param value Block's height or hash\n     */\n    getBlockJson(value: number | string): Promise<any> {\n        let url = '';\n        if (typeof value === 'number') {\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\n        } else if (typeof value === 'string') {\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\n        }\n\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get allowance by address\n     * @param asset Asset type. Only ONT or ONG.\n     * @param from Address of allowance sender.\n     * @param to Address of allowance receiver.\n     */\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\n        asset = asset.toLowerCase();\n        if (asset !== 'ont' && asset !== 'ong') {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const url = this.url + UrlConsts.Url_get_allowance +\n                    asset.toLowerCase() + '/' + from.toBase58() + '/' + to.toBase58();\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// tslint:disable:variable-name\nexport class Deferred<T> {\n    private _promise: Promise<T>;\n    private _resolve: (value?: T | PromiseLike<T>) => void;\n    private _reject: (reason?: any) => void;\n\n    constructor() {\n        this._promise = new Promise<T>((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n\n    get promise(): Promise<T> {\n        return this._promise;\n    }\n\n    public resolve = (value?: T | PromiseLike<T>): void => {\n        this._resolve(value);\n    }\n\n    public reject = (reason?: any): void => {\n        this._reject(reason);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Address } from '../../crypto/address';\n\n// const generateReqId = () => {\n//     return Math.floor(Math.random() * 10e8);\n// };\n\nexport function sendHeartBeat() {\n    const param = {\n        Action : 'heartbeat',\n        Version : 'V1.0.0'\n    };\n    return param;\n}\n\nexport function sendSubscribe(\n    subscribeEvent: boolean = false,\n    subscribeJsonBlock: boolean = false,\n    subscribeRawBlock: boolean = false,\n    subscribeBlockTxHashes: boolean = false\n) {\n    const param = {\n        Action: 'subscribe',\n        Version: '1.0.0',\n        SubscribeEvent: subscribeEvent, // optional\n        SubscribeJsonBlock: subscribeJsonBlock, // optional\n        SubscribeRawBlock: subscribeRawBlock, // optional\n        SubscribeBlockTxHashs: subscribeBlockTxHashes // optional\n    };\n    return param;\n}\n\nexport function sendRawTransaction(hexData: string, preExec: boolean = false) {\n    let param = {\n        Action: 'sendrawtransaction',\n        Version: '1.0.0',\n        Data: hexData\n    };\n    if (preExec) {\n        param = Object.assign(param, { PreExec : '1' });\n    }\n    return param;\n}\n\nexport function getRawTransaction(txHash: string) {\n    const param = {\n        Action: 'gettransaction',\n        Version: '1.0.0',\n        Hash: txHash,\n        Raw : '1'\n    };\n    return param;\n}\n\nexport function getRawTransactionJson(txHash: string) {\n    const param = {\n        Action: 'gettransaction',\n        Version: '1.0.0',\n        Hash: txHash,\n        Raw: '0'\n    };\n    return param;\n}\n\n// export function getGenerateBlockTime() {\n//     const param = {\n//         Action: 'getgenerateblocktime',\n//         Version: '1.0.0'\n//     };\n//     return param;\n// }\n\nexport function getNodeCount() {\n    const param = {\n        Action: 'getconnectioncount',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getBlockHeight() {\n    const param = {\n        Action: 'getblockheight',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getBlock(value: number | string) {\n    let param = {};\n    if (typeof value === 'number') {\n        param = {\n            Action: 'getblockbyheight',\n            Version: '1.0.0',\n            Height: value,\n            Raw: '1'\n        };\n    } else if (typeof value === 'string') {\n        param = {\n            Action: 'getblockbyhash',\n            Version: '1.0.0',\n            Hash: value,\n            Raw: '1'\n        };\n    }\n    return param;\n}\n\nexport function getBlockJson(value: number | string) {\n    let param = {};\n    if (typeof value === 'number') {\n        param = {\n            Action: 'getblockbyheight',\n            Version: '1.0.0',\n            Height: value\n        };\n    } else if (typeof value === 'string') {\n        param = {\n            Action: 'getblockbyhash',\n            Version: '1.0.0',\n            Hash: value\n        };\n    }\n    return param;\n}\n\nexport function getBalance(address: Address) {\n    const param = {\n        Action: 'getbalance',\n        Version: '1.0.0',\n        Addr: address.toBase58()\n    };\n    return param;\n}\n\nexport function getUnboundOng(address: Address) {\n    const param = {\n        Action: 'getunboundong',\n        Version: '1.0.0',\n        Addr: address.toBase58()\n    };\n    return param;\n}\n\nexport function getContract(hash: string) {\n    const param = {\n        Action: 'getcontract',\n        Version: '1.0.0',\n        Hash: hash,\n        Raw: '1'\n    };\n    return param;\n}\n\nexport function getContractJson(hash: string) {\n    const param = {\n        Action: 'getcontract',\n        Version: '1.0.0',\n        Hash: hash,\n        Raw: '0'\n    };\n    return param;\n}\n\nexport function getSmartCodeEvent(value: number | string) {\n    let param = {};\n    if (typeof value === 'number') {\n        param = {\n            Action: 'getsmartcodeeventbyheight',\n            Version: '1.0.0',\n            Height: value\n        };\n    } else if (typeof value === 'string') {\n        param = {\n            Action: 'getsmartcodeeventbyhash',\n            Version: '1.0.0',\n            Hash: value\n        };\n    }\n    return param;\n}\n\nexport function getBlockHeightByTxHash(hash: string) {\n    const param = {\n        Action: 'getblockheightbytxhash',\n        Version: '1.0.0',\n        Hash: hash\n    };\n    return param;\n}\n\nexport function getStorage(codeHash: string, key: string) {\n    const param = {\n        Action: 'getstorage',\n        Version: '1.0.0',\n        Hash: codeHash,\n        Key : key\n    };\n    return param;\n}\n\nexport function getMerkleProof(hash: string) {\n    const param = {\n        Action: 'getmerkleproof',\n        Version: '1.0.0',\n        Hash: hash\n    };\n    return param;\n}\n\nexport function getAllowance(asset: string, from: Address, to: Address) {\n    const param = {\n        Action: 'getallowance',\n        Version: '1.0.0',\n        Asset: asset,\n        From: from.toBase58(),\n        To: to.toBase58()\n    };\n    return param;\n}\n\nexport function getBlockHash(value: number) {\n    const param = {\n        Action: 'getblockhash',\n        Version: '1.0.0',\n        Height: value\n    };\n    return param;\n}\n\nexport function getBlockTxsByHeight(value: number) {\n    const param = {\n        Action: 'getblocktxsbyheight',\n        Version: '1.0.0',\n        Height: value\n    };\n    return param;\n}\n\nexport function getGasPrice() {\n    const param = {\n        Action: 'getgasprice',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getGrantOng(address: Address) {\n    const param = {\n        Action: 'getgrantong',\n        Version: '1.0.0',\n        Addr: address.toBase58()\n    };\n    return param;\n}\n\nexport function getMempoolTxCount() {\n    const param = {\n        Action: 'getmempooltxcount',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getMempoolTxState(txHash: string) {\n    const param = {\n        Action: 'getmempooltxstate',\n        Version: '1.0.0',\n        Hash: txHash\n    };\n    return param;\n}\n\nexport function getVersion() {\n    const param = {\n        Action: 'getversion',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getNetworkId() {\n    const param = {\n        Action: 'getnetworkid',\n        Version: '1.0.0'\n    };\n    return param;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as Html5WebSocket from '@ont-community/html5-websocket';\nimport * as WebSocketAsPromised from 'websocket-as-promised';\nimport { TEST_ONT_URL } from '../../consts';\n\n/**\n * We can import html5-websocket directly, because webpack will use html5-websocket/browser.js\n * in browser environment, which does not require 'ws'.\n */\n\n /**\n  * Websocket sender for send messages and handle notify.\n  */\nexport class WebsocketSender {\n    private static generateReqId() {\n        return Math.floor(Math.random() * 10e8);\n    }\n\n    debug: boolean;\n\n    private wsp: any;    // WebSocketAsPromised\n\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false) {\n        this.debug = debug;\n        this.wsp = new WebSocketAsPromised(url, {\n            createWebSocket: (socketUrl: string) => new Html5WebSocket(socketUrl),\n            attachRequestId: (data: any, id: number) => ({ Id: id, ...data }),\n            extractRequestId: (data: any) => data && data.Id,\n            packMessage: (data: any) => JSON.stringify(data),\n            unpackMessage: (message: string) => JSON.parse(message)\n        });\n\n        this.wsp.onOpen.addListener(() => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('connected');\n            }\n        });\n\n        this.wsp.onClose.addListener(() => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('disconnected');\n            }\n        });\n\n        this.wsp.onSend.addListener((message: any) => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('sent: ', message);\n            }\n        });\n\n        this.wsp.onMessage.addListener((message: any) => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('received: ', message);\n            }\n        });\n\n        this.wsp.onError.addListener((event: any) => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('error: ', event);\n            }\n        });\n    }\n\n    async send<T extends object>(param: T, close: boolean = true) {\n        try {\n            if (!param) {\n                return;\n            }\n\n            await this.wsp.open();\n            const response = await this.wsp.sendRequest(param, { requestId: WebsocketSender.generateReqId() });\n\n            return response;\n        } finally {\n            if (close) {\n                await this.wsp.close();\n            }\n        }\n    }\n\n    addListener(listener: (result: any) => void) {\n        this.wsp.onUnpackedMessage.addListener(listener);\n    }\n\n    close() {\n        this.wsp.close();\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { TEST_ONT_URL } from '../../consts';\nimport { Address } from '../../crypto/address';\nimport { Deferred } from './deferred';\nimport * as Builder from './websocketBuilder';\nimport { WebsocketSender } from './websocketSender';\n\n/**\n * Websocket client.\n *\n * TODO: correlate request and response with id, so socket can be reused.\n */\nexport class WebsocketClient {\n    sender: WebsocketSender;\n\n    autoClose: boolean;\n\n    promises: Map<string, Deferred<any>>;\n\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false, autoClose = true) {\n        this.autoClose = autoClose;\n        this.promises = new Map();\n        this.sender = new WebsocketSender(url, debug);\n        this.sender.addListener(this.notifyListener.bind(this));\n    }\n\n    /**\n     * Send heart beat request\n     */\n    async sendHeartBeat(): Promise<any> {\n        const raw = Builder.sendHeartBeat();\n        return this.send(raw);\n    }\n\n    /**\n     * Send subscribe request\n     * @param subscribeEvent\n     * @param subscribeJsonBlock\n     * @param subscribeRawBlock\n     * @param subscribeBlockTxHashes\n     */\n    async sendSubscribe(\n            subscribeEvent = false,\n            subscribeJsonBlock = false,\n            subscribeRawBlock = false,\n            subscribeBlockTxHashes = false\n        ): Promise<any> {\n        const raw = Builder.sendSubscribe(\n                subscribeEvent,\n                subscribeJsonBlock,\n                subscribeRawBlock,\n                subscribeBlockTxHashes\n            );\n\n        return this.send(raw);\n    }\n\n    /**\n     * Send raw transaction\n     * @param hexData Hex encoded data\n     * @param preExec Decides if it is a pre-executed transaction\n     * @param waitNotify Decides if client waits for notify from blockchain before closing\n     */\n    async sendRawTransaction(hexData: string, preExec = false, waitNotify = false) {\n        const raw = Builder.sendRawTransaction(hexData, preExec);\n        const sendResult = await this.send(raw, this.autoClose && !waitNotify);\n\n        if (sendResult.Error !== 0) {\n            // tslint:disable-next-line:no-console\n            console.log(sendResult);\n            throw new Error(JSON.stringify(sendResult));\n        }\n\n        if (waitNotify) {\n            const txHash: string = sendResult.Result;\n\n            const deferred = new Deferred<any>();\n            this.promises.set(txHash, deferred);\n            return deferred.promise;\n        } else {\n            return sendResult;\n        }\n    }\n\n    /**\n     * Get raw transaction by transaction hash.\n     * The result is hex encoded transaction.\n     * @param txHash Reversed transaction hash\n     */\n    async getRawTransaction(txHash: string): Promise<any> {\n        const raw = Builder.getRawTransaction(txHash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get transaction info by transaction hash.\n     * The result is json.\n     * @param txHash Reversed transaction hash\n     */\n    async getRawTransactionJson(txHash: string): Promise<any> {\n        const raw = Builder.getRawTransactionJson(txHash);\n        return this.send(raw);\n    }\n\n    /** Deprecated\n     * Get the generation time for each block.\n     * If the blockchain node runs in vbft, the result is null.\n     */\n    // async getGenerateBlockTime(): Promise<any> {\n    //     const raw = Builder.getGenerateBlockTime();\n    //     return this.send(raw);\n    // }\n\n    /**\n     * Get Nodes count\n     */\n    async getNodeCount(): Promise<any> {\n        const raw = Builder.getNodeCount();\n        return this.send(raw);\n    }\n\n    /**\n     * Get current block height\n     */\n    async getBlockHeight(): Promise<any> {\n        const raw = Builder.getBlockHeight();\n        return this.send(raw);\n    }\n\n    /**\n     * Get block's info by block's height or hash.\n     * The result is hex encoded string.\n     * @param value Block's height or hash\n     */\n    async getBlock(value: number | string): Promise<any> {\n        const raw = Builder.getBlock(value);\n        return this.send(raw);\n    }\n\n    /**\n     * Get block's info by block's height or hash.\n     * The result is json.\n     * @param value Block's height or hash\n     */\n    async getBlockJson(value: number | string): Promise<any> {\n        const raw = Builder.getBlockJson(value);\n        return this.send(raw);\n    }\n\n    /**\n     * Get the balance of some address.\n     * The result contains ONT and ONG.\n     * @param address Address\n     */\n    async getBalance(address: Address): Promise<any> {\n        const raw = Builder.getBalance(address);\n        return this.send(raw);\n    }\n\n    /**\n     * Get unbound ong of this address\n     * The result contains ONG.\n     * @param address Address\n     */\n    async getUnboundong(address: Address): Promise<any> {\n        const raw = Builder.getUnboundOng(address);\n        return this.send(raw);\n    }\n\n    /**\n     * Get contract info by code hash.\n     * The result is hex encoded string.\n     * @param hash Contract's code hash.\n     */\n    async getContract(hash: string): Promise<any> {\n        const raw = Builder.getContract(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get contract's info by code hash\n     * The result is json.\n     * @param hash Contract's code hash\n     */\n    async getContractJson(hash: string): Promise<any> {\n        const raw = Builder.getContractJson(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get smart conde event by transaction hash or block's height.\n     * If parameter is transaction hash, the result is the event of that transaction.\n     * If parameter is block's height, the result is all the events of that block.\n     * @param value Reversed transaction hash or block's height\n     */\n    async getSmartCodeEvent(value: number | string): Promise<any> {\n        const raw = Builder.getSmartCodeEvent(value);\n        return this.send(raw);\n    }\n\n    /**\n     * Get block's height by transaction hash\n     * @param hash Reversed transaction hash\n     */\n    async getBlockHeightByTxHash(hash: string): Promise<any> {\n        const raw = Builder.getBlockHeightByTxHash(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get stored value in smart contract by contract's code hash and the key.\n     * @param codeHash Contract's code hash\n     * @param key Key of stored value\n     */\n    async getStorage(codeHash: string, key: string): Promise<any> {\n        const raw = Builder.getStorage(codeHash, key);\n        return this.send(raw);\n    }\n\n    /**\n     * Get merkle proof by transaction hash.\n     * @param hash Reversed transaction hash\n     */\n    async getMerkleProof(hash: string): Promise<any> {\n        const raw = Builder.getMerkleProof(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get allowanece\n     * @param asset Asset's type.Only ONT and ONG supported.\n     * @param from Address of allowance's sender.\n     * @param to Address of allowance's receiver.\n     */\n    async getAllowance(asset: string, from: Address, to: Address) {\n        const raw = Builder.getAllowance(asset, from, to);\n        return this.send(raw);\n    }\n\n    /**\n     * Get block hash by block height\n     * @param height Height of the block\n     */\n    async getBlockHash(height: number): Promise<any> {\n        const raw = Builder.getBlockHash(height);\n        return this.send(raw);\n    }\n\n    /**\n     * Return all transaction hash contained in the block corresponding to this height\n     * @param height Height of the block\n     */\n    async getBlockTxsByHeight(height: number): Promise<any> {\n        const raw = Builder.getBlockTxsByHeight(height);\n        return this.send(raw);\n    }\n\n    /**\n     * Return the state of transaction locate in memory\n     */\n    async getGasPrice(): Promise<any> {\n        const raw = Builder.getGasPrice();\n        return this.send(raw);\n    }\n\n    /**\n     * Get grant ong\n     * @param address Address\n     */\n    async getGrantOng(address: Address): Promise<any> {\n        const raw = Builder.getGrantOng(address);\n        return this.send(raw);\n    }\n\n    /**\n     * Query the transaction count in the memory pool\n     */\n    async getMempoolTxCount(): Promise<any> {\n        const raw = Builder.getMempoolTxCount();\n        return this.send(raw);\n    }\n\n    /**\n     * Query the transaction state in the memory pool\n     */\n    async getMempoolTxState(txHash: string): Promise<any> {\n        const raw = Builder.getMempoolTxState(txHash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get the version information of the node\n     */\n    async getVersion(): Promise<any> {\n        const raw = Builder.getVersion();\n        return this.send(raw);\n    }\n\n    /**\n     * Get the network id\n     */\n    async getNetworkId(): Promise<any> {\n        const raw = Builder.getNetworkId();\n        return this.send(raw);\n    }\n\n    /**\n     * Adds listener for Notify messages.\n     *\n     * Be careful to not set autoClose = true and close the websocket on your own.\n     * @param listener Listener\n     */\n    addNotifyListener(listener: (result: any) => void) {\n        this.sender.addListener((result: any) => {\n            if (result.Action === 'Notify') {\n                listener(result);\n            }\n        });\n    }\n\n    /**\n     * Close the websocket manually.\n     */\n    close() {\n        this.sender.close();\n    }\n\n    /**\n     * Send msg to blockchain\n     * @param raw Message to send\n     * @param close Automaticly close connection if also autoClose is specified\n     */\n    private async send<T extends object>(raw: T, close: boolean = this.autoClose): Promise<any> {\n        return this.sender.send(raw, close);\n    }\n\n    private notifyListener(result: any) {\n        if (result.Action === 'Notify') {\n            const txHash: string | undefined = result.Result.TxHash;\n\n            if (txHash !== undefined) {\n                const promise = this.promises.get(txHash);\n\n                if (promise !== undefined) {\n                    this.promises.delete(txHash);\n                    promise.resolve(result);\n                } else {\n                    // tslint:disable-next-line:no-console\n                    console.warn('Received Notify event for unknown transaction');\n                }\n\n                if (this.autoClose) {\n                    this.sender.close();\n                }\n            }\n        }\n    }\n}\n","\n/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport AbiFunction from './abiFunction';\nimport { Parameter } from './parameter';\n\n/**\n * Decribes the Abi info.\n */\nexport default class AbiInfo {\n    static parseJson(json: string): AbiInfo {\n        const a = new AbiInfo();\n        const obj = JSON.parse(json);\n        a.hash = obj.hash;\n        a.entrypoint = obj.entrypoint;\n        a.functions = obj.functions;\n\n        return a;\n    }\n\n    hash: string;\n    entrypoint: string;\n    functions: AbiFunction[] = [];\n\n    getHash(): string {\n        return this.hash;\n    }\n\n    getEntryPoint(): string {\n        return this.entrypoint;\n    }\n\n    getFunction(name: string): AbiFunction {\n        for (const v of this.functions) {\n            if (v.name === name) {\n                const parameters = v.parameters.map((p: any) => new Parameter(p.name, p.type, ''));\n                return new AbiFunction(v.name, v.returntype, parameters);\n            }\n        }\n        throw Error('not found');\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Address  } from '../../crypto';\nimport AbiInfo from '../../smartcontract/abi/abiInfo';\nimport { Parameter, ParameterType } from '../../smartcontract/abi/parameter';\n\nimport { makeInvokeTransaction } from '../../transaction/transactionBuilder';\nimport { reverseHex, str2hexstr } from '../../utils';\nimport { Transaction } from './../../transaction/transaction';\n\nimport abiJson from '../data/attestClaim';\nconst abiInfo = AbiInfo.parseJson(JSON.stringify(abiJson));\nconst contractHash = abiInfo.getHash().replace('0x', '');\nconst contractAddress = new Address(reverseHex(contractHash));\n/* TODO : Test */\n\n/**\n * Attests the claim.\n *\n * @param claimId Unique id of the claim\n * @param issuer Issuer's ONT ID\n * @param subject Subject's ONT ID\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer's address\n */\nexport function buildCommitRecordTx(claimId: string, issuer: string, subject: string,\n                                    gasPrice: string, gasLimit: string, payer: Address)  {\n    const f = abiInfo.getFunction('Commit');\n    if (issuer.substr(0, 3) === 'did') {\n        issuer = str2hexstr(issuer);\n    }\n    if (subject.substr(0, 3) === 'did') {\n        subject = str2hexstr(issuer);\n    }\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, issuer);\n    const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, subject);\n\n    let tx = new Transaction();\n    tx = makeInvokeTransaction(f.name, [p1, p2, p3], contractAddress, gasPrice, gasLimit, payer);\n    return tx;\n}\n\n/**\n * Revokes the claim.\n *\n * @param claimId Unique id of the claim\n * @param revokerOntid Revoker's ONT ID\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer's address\n */\nexport function buildRevokeRecordTx(claimId: string, revokerOntid: string,\n                                    gasPrice: string, gasLimit: string, payer: Address) {\n    const f = abiInfo.getFunction('Revoke');\n\n    const name1 = f.parameters[0].getName();\n    const type1 = ParameterType.ByteArray;\n\n    if (revokerOntid.substr(0, 3) === 'did') {\n        revokerOntid = str2hexstr(revokerOntid);\n    }\n\n    const p1 = new Parameter(name1, type1, str2hexstr(claimId));\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, revokerOntid);\n\n    return makeInvokeTransaction(f.name, [p1, p2], contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Queries the state of attest.\n *\n * @param claimId Unique id of the claim\n */\nexport function buildGetRecordStatusTx(claimId: string) {\n    const f = abiInfo.getFunction('GetStatus');\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\n    const tx = makeInvokeTransaction(f.name, [p1], contractAddress);\n    return tx;\n}\n","export default {\n    hash: '36bb5c053b6b839c8f6b923fe852f91239b9fccc',\n    entrypoint: 'Main',\n    functions: [{\n        name: 'Main',\n        parameters: [{\n            name: 'operation',\n            type: 'String'\n        }, {\n            name: 'args',\n            type: 'Array'\n        }],\n        returntype: 'Any'\n    }, {\n        name: 'Commit',\n        parameters: [{\n            name: 'claimId',\n            type: 'ByteArray'\n        }, {\n            name: 'commiterId',\n            type: 'ByteArray'\n        }, {\n            name: 'ownerId',\n            type: 'ByteArray'\n        }],\n        returntype: 'Boolean'\n    }, {\n        name: 'Revoke',\n        parameters: [{\n            name: 'claimId',\n            type: 'ByteArray'\n        }, {\n            name: 'ontId',\n            type: 'ByteArray'\n        }],\n        returntype: 'Boolean'\n    }, {\n        name: 'GetStatus',\n        parameters: [{\n            name: 'claimId',\n            type: 'ByteArray'\n        }],\n        returntype: 'ByteArray'\n    }],\n    events: [{\n        name: 'ErrorMsg',\n        parameters: [{\n            name: 'arg1',\n            type: 'ByteArray'\n        }, {\n            name: 'arg2',\n            type: 'String'\n        }],\n        returntype: 'Void'\n    }, {\n        name: 'Push',\n        parameters: [{\n            name: 'arg1',\n            type: 'ByteArray'\n        }, {\n            name: 'arg2',\n            type: 'String'\n        }, {\n            name: 'arg3',\n            type: 'ByteArray'\n        }],\n        returntype: 'Void'\n    }]\n};\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { hexstr2str } from '../utils';\n\n/**\n * Represents Notify event of attest creation of revocation.\n */\nexport class AttestNotifyEvent {\n    /**\n     * Deserializes Notify event.\n     *\n     * States in events are hex encoded.\n     *\n     * @param e encoded event\n     */\n    static deserialize(e: any): AttestNotifyEvent {\n        const event = new AttestNotifyEvent();\n\n        event.Action = e.Action;\n        event.Error = e.Error;\n        event.Desc = e.Desc;\n        event.Result = Result.deserialize(e.Result);\n\n        return event;\n    }\n\n    Action: string = 'Notify';\n    Desc: string;\n    Error: number;\n    Result: Result;\n}\n\n/**\n * Result of Notify event.\n */\nexport class Result {\n    /**\n     * Deserializes result from event.\n     *\n     * States are hex encoded.\n     *\n     * @param r encoded result\n     */\n    static deserialize(r: any): Result {\n        const result = new Result();\n\n        result.TxHash = r.TxHash;\n        result.State = r.State;\n        result.GasConsumed = r.GasConsumed;\n        result.Notify = r.Notify.map((n: any) => {\n            return {\n                ContractAddress: n.ContractAddress,\n                States: n.States.map( (s: any) => typeof s === 'string' ? hexstr2str(s) : s)\n            };\n        });\n        result.Version = r.Version;\n        return result;\n    }\n\n    TxHash: string;\n    /**\n     * State = 1 : smartcontract executation success\n     * State = 0 : smartcontract executation failure\n     */\n    State: number;\n    GasConsumed: number;\n    Notify: [{\n        ContractAddress: string;\n        /**\n         * The value of States are usually hex string\n         */\n        States: any[];\n    }];\n    Version: string;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport { Address } from '../../crypto/address';\nimport opcode from '../../transaction/opcode';\nimport { hex2VarBytes, num2hexstring, str2VarBytes } from '../../utils';\nimport { pushBigNum, pushBool, pushHexString, pushInt } from './../../transaction/scriptBuilder';\nimport { Parameter, ParameterType } from './parameter';\nimport Struct from './struct';\n\nexport function buildParams(params: Parameter[]): string {\n    let result = '';\n    for (const p of params) {\n        const type = p.getType();\n        switch (type) {\n        case ParameterType.ByteArray:\n            result += hex2VarBytes(p.value);\n            break;\n        case ParameterType.Int:\n            result += num2hexstring(p.value, 4, true);\n            break;\n        case ParameterType.String:\n            result += str2VarBytes(p.value);\n            break;\n        case ParameterType.Address:\n            result += p.value.serialize();\n        default:\n            break;\n        }\n    }\n    return result;\n}\n\nexport function createCodeParamScript(obj: any): string {\n    let result = '';\n    // Consider string as hexstr\n    if (typeof obj === 'string') {\n        result += pushHexString(obj);\n    } else if (typeof obj === 'boolean') {\n        result += pushBool(obj);\n    } else if (typeof obj === 'number') {\n        result += pushInt(obj);\n    } else if (obj instanceof BigNumber) {\n        result += pushBigNum(obj);\n    } else if (obj instanceof Address) {\n        result += pushHexString(obj.serialize());\n    } else if (obj instanceof Struct) {\n        for (const v of obj.list) {\n            result += createCodeParamScript(v);\n            result += num2hexstring(opcode.DUPFROMALTSTACK);\n            result += num2hexstring(opcode.SWAP);\n            result += num2hexstring(opcode.APPEND);\n        }\n    }\n    return result;\n}\n\nexport function buildNativeCodeScript(list: any[]) {\n    let result = '';\n    for (let i = list.length - 1; i >= 0; i--) {\n        const val = list[i];\n        // Consider string as hexstr\n        if (typeof val === 'string') {\n            result += pushHexString(val);\n        } else if (typeof val === 'boolean') {\n            result += pushBool(val);\n        } else if (typeof val === 'number') {\n            result += pushInt(val);\n        } else if (val instanceof BigNumber) {\n            result += pushBigNum(val);\n        } else if (val instanceof Address) {\n            result += pushHexString(val.serialize());\n        } else if (val instanceof Struct) {\n            result += pushInt(0);\n            result += num2hexstring(opcode.NEWSTRUCT);\n            result += num2hexstring(opcode.TOALTSTACK);\n            for (const v of val.list) {\n                result += createCodeParamScript(v);\n                result += num2hexstring(opcode.DUPFROMALTSTACK);\n                result += num2hexstring(opcode.SWAP);\n                result += num2hexstring(opcode.APPEND);\n            }\n            result += num2hexstring(opcode.FROMALTSTACK);\n        } else if (Array.isArray(val) && isTypedArray(val, Struct)) {\n            result += pushInt(0);\n            result += num2hexstring(opcode.NEWSTRUCT);\n            result += num2hexstring(opcode.TOALTSTACK);\n            for (const s of val) {\n                result += createCodeParamScript(s);\n            }\n            result += num2hexstring(opcode.FROMALTSTACK);\n            result += pushInt(val.length);\n            result += num2hexstring(opcode.PACK);\n        } else if (Array.isArray(val)) {\n            result += buildNativeCodeScript(val);\n            result += pushInt(val.length);\n            result += num2hexstring(opcode.PACK);\n        }\n    }\n    return result;\n}\n\nexport function isTypedArray(arr: any[], type: any) {\n    let result = true;\n    for (const a of arr) {\n        if (!(a instanceof type)) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Address, PublicKey } from '../../crypto';\nimport { DDOAttribute } from '../../transaction/ddo';\nimport { Transaction } from '../../transaction/transaction';\nimport { makeNativeContractTx } from '../../transaction/transactionBuilder';\nimport { num2hexstring, str2hexstr } from '../../utils';\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\nimport Struct from '../abi/struct';\n\n/**\n * Address of ONT ID contract\n */\nexport const ONTID_CONTRACT = '0000000000000000000000000000000000000003';\n\n/**\n * Method names in ONT ID contract\n */\nconst ONTID_METHOD  = {\n    regIDWithPublicKey: 'regIDWithPublicKey',\n    regIDWithAttributes: 'regIDWithAttributes',\n    addAttributes: 'addAttributes',\n    removeAttribute: 'removeAttribute',\n    getAttributes: 'getAttributes',\n    getDDO: 'getDDO',\n    addKey: 'addKey',\n    removeKey: 'removeKey',\n    getPublicKeys: 'getPublicKeys',\n    addRecovery: 'addRecovery',\n    changeRecovery: 'changeRecovery',\n    getKeyState: 'getKeyState'\n};\n\n/**\n * Registers Identity.\n *\n * GAS calculation: gasLimit * gasPrice is equal to the amount of gas consumed.\n *\n * @param ontid User's ONT ID\n * @param publicKey Public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildRegisterOntidTx(\n    ontid: string,\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.regIDWithPublicKey;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(ontid, publicKey.serializeHex());\n    const list = [struct];\n    const params = buildNativeCodeScript(list);\n\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n\n    return tx;\n}\n\n/**\n * Registers Identity with initial attributes.\n *\n * @param ontid User's ONT ID\n * @param attributes Array of DDOAttributes\n * @param publicKey User's public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildRegIdWithAttributes(\n    ontid: string,\n    attributes: DDOAttribute[],\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n) {\n    const method = ONTID_METHOD.regIDWithAttributes;\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    // let attrs = '';\n    // for (const a of attributes) {\n    //     attrs += a.serialize();\n    // }\n\n    // const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, ontid);\n    // const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, publicKey.serializeHex());\n    // const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, attrs);\n    // f.setParamsValue(p1, p2, p3);\n    const attrLen = attributes.length;\n    const struct = new Struct();\n    struct.add(ontid, publicKey.serializeHex(), attrLen);\n    for (const a of attributes) {\n        const key = str2hexstr(a.key);\n        const type = str2hexstr(a.type);\n        const value = str2hexstr(a.value);\n        struct.add(key, type, value);\n    }\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n\n    return tx;\n}\n\n/**\n * Adds attributes to ONT ID.\n *\n * @param ontid User's ONT ID\n * @param attributes Array of DDOAttributes\n * @param publicKey User's public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildAddAttributeTx(\n    ontid: string,\n    attributes: DDOAttribute[],\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.addAttributes;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(ontid, attributes.length);\n    for (const a of attributes) {\n        const key = str2hexstr(a.key);\n        const type = str2hexstr(a.type);\n        const value = str2hexstr(a.value);\n        struct.add(key, type, value);\n    }\n    struct.list.push(publicKey.serializeHex());\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n    return tx;\n}\n\n/**\n * Removes attribute from ONT ID.\n *\n * @param ontid User's ONT ID\n * @param key Key of attribute to remove\n * @param publicKey User's public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n *\n */\nexport function buildRemoveAttributeTx(\n    ontid: string,\n    key: string,\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.removeAttribute;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const struct = new Struct();\n    struct.add(ontid, str2hexstr(key), publicKey.serializeHex());\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n    return tx;\n}\n\n/**\n * Queries attributes attached to ONT ID.\n *\n * @param ontid User's ONT ID\n */\nexport function buildGetAttributesTx(ontid: string) {\n    const method = ONTID_METHOD.getAttributes;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const struct = new Struct();\n    struct.add(ontid);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n\n/**\n * Queries Description Object of ONT ID(DDO).\n *\n * @param ontid User's ONT ID\n */\nexport function buildGetDDOTx(ontid: string) {\n    const method = ONTID_METHOD.getDDO;\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const struct = new Struct();\n    struct.add(ontid);\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n/**\n * Adds a new public key to ONT ID.\n *\n * @param ontid User's ONT ID\n * @param newPk New public key to be added\n * @param userKey User's public key or address\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildAddControlKeyTx(\n    ontid: string,\n    newPk: PublicKey,\n    userKey: PublicKey | Address,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.addKey;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = newPk.serializeHex();\n    let p3;\n    if (userKey instanceof PublicKey) {\n        p3 = userKey.serializeHex();\n    } else if (userKey instanceof Address) {\n        p3 = userKey.serialize();\n    }\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n\n    return tx;\n}\n\n/**\n * Revokes a public key from ONT ID.\n *\n * @param ontid User's ONT ID\n * @param pk2Remove Public key to be removed\n * @param sender User's public key or address\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildRemoveControlKeyTx(\n    ontid: string,\n    pk2Remove: PublicKey,\n    sender: PublicKey | Address,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.removeKey;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = pk2Remove.serializeHex();\n    let p3;\n    if (sender instanceof PublicKey) {\n        p3 = sender.serializeHex();\n    } else if (sender instanceof Address) {\n        p3 = sender.serialize();\n    }\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n    return tx;\n}\n\n/**\n * Queries public keys attached to ONT ID.\n *\n * @param ontid User's ONT ID\n */\nexport function buildGetPublicKeysTx(ontid: string) {\n    const method = ONTID_METHOD.getPublicKeys;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(ontid);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n\n/**\n * Adds recovery address to ONT ID.\n *\n * @param ontid User's ONT ID\n * @param recovery Recovery address, must have not be set\n * @param publicKey User's public key, must be user's existing public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildAddRecoveryTx(\n    ontid: string,\n    recovery: Address,\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.addRecovery;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = recovery;\n    const p3 = publicKey.serializeHex();\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT), gasPrice, gasLimit, payer);\n    return tx;\n}\n\n/**\n * Changes recovery address of ONT ID.\n *\n * This contract call must be initiated by the original recovery address.\n *\n * @param ontid user's ONT ID\n * @param newrecovery New recovery address\n * @param oldrecovery Original recoevery address\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildChangeRecoveryTx(\n    ontid: string,\n    newrecovery: Address,\n    oldrecovery: Address,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.changeRecovery;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = newrecovery;\n    const p3 = oldrecovery;\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT),\n    gasPrice, gasLimit);\n    tx.payer = payer || oldrecovery;\n    return tx;\n}\n\n/**\n * Queries the state of the public key associated with ONT ID.\n *\n * @param ontid user's ONT ID\n * @param pkId User's public key Id\n */\nexport function buildGetPublicKeyStateTx(ontid: string, pkId: number) {\n    const method = ONTID_METHOD.getKeyState;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    // tslint:disable-next-line:no-console\n    console.log('did: ' + ontid);\n\n    const index = num2hexstring(pkId, 4, true);\n\n    // tslint:disable-next-line:no-console\n    console.log('index: ' + index);\n\n    const struct = new Struct();\n    struct.add(ontid, pkId);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { PublicKey } from '../crypto';\nimport { hexstr2str, str2VarBytes, StringReader } from '../utils';\n\n/**\n * Public key representation with recorded id from blockchain.\n *\n */\nexport class PublicKeyWithId {\n    /**\n     * Deserialize from hex string to PublicKeyWithId\n     * @param hexstr\n     */\n    static deserialize(hexstr: string): PublicKeyWithId[] {\n        const sr = new StringReader(hexstr);\n\n        const result: PublicKeyWithId[] = [];\n        while (!sr.isEmpty()) {\n            const index = sr.readUint32();\n            const data = sr.readNextBytes();\n            const p = new PublicKeyWithId();\n            p.id = index;\n            p.pk = PublicKey.deserializeHex(new StringReader(data));\n            result.push(p);\n        }\n        return result;\n    }\n\n    /**\n     * Id of the public key.\n     *\n     * Only numeric part is recorded. Full PublicKeyId will be constucted as follows:\n     * <ONTID>#keys-<id>\n     */\n    id: number;\n    pk: PublicKey;\n}\n\n/**\n * Description attribute of ONT ID\n */\nexport class DDOAttribute {\n    static deserialize(hexstr: string) {\n        const sr = new StringReader(hexstr);\n\n        const result: DDOAttribute[] = [];\n        while (!sr.isEmpty()) {\n            const key = hexstr2str(sr.readNextBytes());\n            const type = hexstr2str(sr.readNextBytes());\n            const value = hexstr2str(sr.readNextBytes());\n            const d = new DDOAttribute();\n            d.key = key;\n            d.type = type;\n            d.value = value;\n            result.push(d);\n        }\n\n        return result;\n    }\n\n    /**\n     * Key of the attribute\n     */\n    key: string;\n    /**\n     * Type of the attribute\n     */\n    type: string;\n    /**\n     * Value of the attribute\n     */\n    value: string;\n\n    /**\n     * Serialize DDO to hex string\n     */\n    serialize(): string {\n        let result = '';\n        result += str2VarBytes(this.key);\n        result += str2VarBytes(this.type);\n        result += str2VarBytes(this.value);\n        return result;\n    }\n}\n\n/**\n * Description object of ONT ID\n */\nexport class DDO {\n    /**\n     * Deserialize from hex string to DDO\n     * @param hexstr Hex encoded string\n     */\n    static deserialize(hexstr: string): DDO {\n        const ss = new StringReader(hexstr);\n\n        const ddo = new DDO();\n        const pkLen = ss.readNextLen();\n\n        if (pkLen > 0) {\n            ddo.publicKeys = PublicKeyWithId.deserialize(ss.read(pkLen));\n        }\n\n        const attrLen = ss.readNextLen();\n        if (attrLen > 0) {\n            ddo.attributes = DDOAttribute.deserialize(ss.read(attrLen));\n        }\n\n        const recoveryLen = ss.readNextLen();\n        if (recoveryLen > 0) {\n            ddo.recovery = ss.read(recoveryLen);\n        }\n        return ddo;\n    }\n\n    /**\n     * Array of public keys\n     */\n    publicKeys: PublicKeyWithId[] = [];\n    /**\n     * Array of attributes\n     */\n    attributes: DDOAttribute[] = [];\n    /**\n     * Recovery of DDO\n     */\n    recovery: string = '';\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as b64 from 'base64-url';\nimport * as uuid from 'uuid';\nimport { PrivateKey, PublicKey, PublicKeyStatus, Signature, SignatureScheme } from '../crypto';\nimport RestClient from '../network/rest/restClient';\nimport { buildGetDDOTx, buildGetPublicKeyStateTx } from '../smartcontract/nativevm/ontidContractTxBuilder';\nimport { DDO } from '../transaction/ddo';\nimport { now } from '../utils';\n\n/**\n * Factory method type used for creating concrete instances of Message.\n */\nexport type MessageFactory<T extends Message> = (\n    metadata: Metadata,\n    signature: Signature | undefined\n) => T;\n\n/**\n * Metadata about the message.\n */\nexport interface Metadata {\n    /**\n     * Message id.\n     *\n     * Will be assigned if not provided.\n     */\n    messageId?: string;\n\n    /**\n     * Issuer.\n     */\n    issuer: string;\n\n    /**\n     * Recipient.\n     */\n    subject: string;\n\n    /**\n     * Creation time.\n     */\n    issuedAt: number;\n\n    /**\n     * Expiration time.\n     */\n    expireAt?: number;\n}\n\n/**\n * Common representation of Message in JWT form.\n */\nexport abstract class Message {\n\n    /**\n     * Deserializes the message from JWT format.\n     *\n     * A concrete instance will be creater through the message factory method. This method\n     * is called from concrete class.\n     *\n     * @param jwt Encoded message\n     * @param creator Factory method\n     */\n    protected static deserializeInternal<T extends Message>(jwt: string, creator: MessageFactory<T>): T {\n        const parts = jwt.split('.', 3);\n\n        if (parts.length < 2) {\n            throw new Error('Invalid message.');\n        }\n\n        const header = Message.deserializeHeader(parts[0]);\n        const payload = Message.deserializePayload(parts[1]);\n        let signature: Signature | undefined;\n\n        if (parts.length > 2) {\n            if (header.algorithm !== undefined && header.publicKeyId !== undefined) {\n                signature = Signature.deserializeJWT(parts[2], header.algorithm, header.publicKeyId);\n            } else {\n                throw new Error('Signature scheme was not specified.');\n            }\n        }\n\n        const msg = creator(payload.metadata, signature);\n        msg.payloadFromJSON(payload.rest);\n        return msg;\n    }\n\n    /**\n     * Deserializes payload part of JWT message.\n     *\n     * @param encoded JWT encoded payload\n     */\n    private static deserializePayload(encoded: string) {\n        const stringified = b64.decode(encoded);\n        const { jti, iss, sub, iat, exp, ...rest } = JSON.parse(stringified);\n\n        return {\n            metadata: {\n                messageId: jti,\n                issuer: iss,\n                subject: sub,\n                issuedAt: iat,\n                expireAt: exp\n            } as Metadata,\n            rest\n        };\n    }\n\n    /**\n     * Deserializes the header from JWT encoded header.\n     *\n     * @param encoded JWT encoded header\n     */\n    private static deserializeHeader(encoded: string) {\n        const stringified = b64.decode(encoded);\n        const header = JSON.parse(stringified);\n\n        return {\n            algorithm: header.alg !== undefined ? SignatureScheme.fromLabelJWS(header.alg) : undefined,\n            publicKeyId: header.kid\n        };\n    }\n\n    metadata: Metadata;\n    signature?: Signature;\n\n    constructor(metadata: Metadata, signature: Signature | undefined) {\n        this.metadata = metadata;\n        this.signature = signature;\n\n        if (this.metadata.messageId === undefined) {\n            this.metadata.messageId = uuid();\n        }\n    }\n\n    /**\n     * Signs the message and store the signature inside the request.\n     *\n     * If the algorithm is not specified, then default algorithm for Private key type is used.\n     *\n     * @param url Restful endpoint of Ontology node\n     * @param publicKeyId The ID of a signature public key\n     * @param privateKey Private key to sign the request with\n     * @param algorithm Signature algorithm used\n     */\n    async sign(\n        url: string,\n        publicKeyId: string,\n        privateKey: PrivateKey,\n        algorithm?: SignatureScheme\n    ): Promise<void> {\n        await retrievePublicKey(publicKeyId, url);\n\n        if (algorithm === undefined) {\n            algorithm = privateKey.algorithm.defaultSchema;\n        }\n\n        const msg = this.serializeUnsigned(algorithm, publicKeyId);\n        this.signature = await privateKey.signAsync(msg, algorithm, publicKeyId);\n    }\n\n    /**\n     * Verifies the signature and check ownership of specified ONT ID through smart contract call.\n     *\n     * @param url Restful endpoint of Ontology node\n     * @returns Boolean if the ownership is confirmed\n     */\n    async verify(url: string): Promise<boolean> {\n        const signature = this.signature;\n\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\n            try {\n                if (!this.verifyKeyOwnership()) {\n                    return false;\n                }\n\n                if (!this.verifyExpiration()) {\n                    return false;\n                }\n\n                const state = await retrievePublicKeyState(signature.publicKeyId, url);\n                if (state === PublicKeyStatus.REVOKED) {\n                    return false;\n                }\n\n                const publicKey = await retrievePublicKey(signature.publicKeyId, url);\n\n                const msg = this.serializeUnsigned(signature.algorithm, signature.publicKeyId);\n                return publicKey.verify(msg, signature);\n            } catch (e) {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Serializes the message without signature into JWT format.\n     *\n     * Header might contain algorithm and public key id.\n     *\n     * @param algorithm Signature algorithm used\n     * @param publicKeyId The ID of a signature public key\n     */\n    serializeUnsigned(algorithm?: SignatureScheme, publicKeyId?: string): string {\n        const headerEncoded = this.serializeHeader(algorithm, publicKeyId);\n        const payloadEncoded = this.serializePayload();\n\n        return headerEncoded + '.' + payloadEncoded;\n    }\n\n    /**\n     * Serializes the message into JWT format.\n     *\n     */\n    serialize(): string {\n        const signature = this.signature;\n\n        if (signature !== undefined) {\n            const signatureEncoded = signature.serializeJWT();\n            return this.serializeUnsigned(signature.algorithm, signature.publicKeyId) + '.' + signatureEncoded;\n        } else {\n            return this.serializeUnsigned();\n        }\n    }\n\n    /**\n     * Serializes the header into JWT encoded header.\n     *\n     * @param algorithm Signature algorithm used\n     * @param publicKeyId The ID of a signature public key\n     */\n    protected serializeHeader(\n        algorithm: SignatureScheme | undefined,\n        publicKeyId: string | undefined\n    ): string {\n        let header;\n        if (algorithm !== undefined) {\n            header = {\n                alg: algorithm.labelJWS,\n                typ: 'JWT',\n                kid: publicKeyId\n            };\n        } else {\n            header = {\n                typ: 'JWT'\n            };\n        }\n\n        const stringified = JSON.stringify(header);\n        return b64.encode(stringified, 'utf-8');\n    }\n\n    /**\n     * Converts claim data to JSON for serialization.\n     */\n    protected abstract payloadToJSON(): any;\n\n    /**\n     * Retrieves data from JSON.\n     *\n     * @param json JSON object with data\n     */\n    protected abstract payloadFromJSON(json: any): void;\n\n    /**\n     * Verifies if the expiration date has passed\n     */\n    private verifyExpiration(): boolean {\n        if (this.metadata.expireAt !== undefined) {\n            return now() < this.metadata.expireAt;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Verifies if the declared public key id belongs to issuer.\n     */\n    private verifyKeyOwnership(): boolean {\n        const signature = this.signature;\n\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\n            const ontId = extractOntId(signature.publicKeyId);\n\n            return ontId === this.metadata.issuer;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Serializes payload part of JWT message.\n     */\n    private serializePayload(): string {\n        const metadata = {\n            jti: this.metadata.messageId,\n            iss: this.metadata.issuer,\n            sub: this.metadata.subject,\n            iat: this.metadata.issuedAt,\n            exp: this.metadata.expireAt\n        };\n        const rest = this.payloadToJSON();\n\n        const stringified = JSON.stringify({...metadata, ...rest});\n        return b64.encode(stringified, 'utf-8');\n    }\n}\n\n/**\n * Gets the public key associated with ONT ID from blockchain.\n *\n * @param publicKeyId The ID of a signature public key\n * @param url Restful endpoint of Ontology node\n */\nexport async function retrievePublicKey(publicKeyId: string, url: string): Promise<PublicKey> {\n    const ontId = extractOntId(publicKeyId);\n    const keyId = extractKeyId(publicKeyId);\n\n    const client = new RestClient(url);\n    const tx = buildGetDDOTx(ontId);\n    const response = await client.sendRawTransaction(tx.serialize(), true);\n\n    if (response.Result && response.Result.Result) {\n        const ddo = DDO.deserialize(response.Result.Result);\n\n        const publicKey = ddo.publicKeys.find((pk) => pk.id === keyId);\n\n        if (publicKey === undefined) {\n            throw new Error('Not found');\n        }\n\n        return publicKey.pk;\n    } else {\n        throw new Error('Not found');\n    }\n}\n\n/**\n * Gets the state of public key associated with ONT ID from blockchain.\n *\n * @param publicKeyId The ID of a signature public key\n * @param url Restful endpoint of Ontology node\n */\nexport async function retrievePublicKeyState(publicKeyId: string, url: string): Promise<PublicKeyStatus> {\n    const ontId = extractOntId(publicKeyId);\n    const keyId = extractKeyId(publicKeyId);\n\n    const client = new RestClient(url);\n    const tx = buildGetPublicKeyStateTx(ontId, keyId);\n    const response = await client.sendRawTransaction(tx.serialize(), true);\n\n    if (response.Result && response.Result.Result) {\n        return PublicKeyStatus.fromHexLabel(response.Result.Result);\n    } else {\n        throw new Error('Not found');\n    }\n}\n\n/**\n * Extracts ONT ID from public key Id.\n *\n * @param publicKeyId The ID of a signature public key\n */\nexport function extractOntId(publicKeyId: string): string {\n    const index = publicKeyId.indexOf('#keys-');\n\n    if (index === -1) {\n        throw new Error('Is not a publicKeId.');\n    }\n\n    return publicKeyId.substr(0, index);\n}\n\n/**\n * Extracts key id from public key Id.\n *\n * @param publicKeyId The ID of a signature public key\n */\nexport function extractKeyId(publicKeyId: string): number {\n    const index = publicKeyId.indexOf('#keys-');\n\n    if (index === -1) {\n        throw new Error('Is not a publicKeId.');\n    }\n\n    // return num2hexstring(\n    //     Number(publicKeyId.substr(index + '#keys-'.length))\n    // );\n    return Number(publicKeyId.substr(index + '#keys-'.length));\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as b64 from 'base64-url';\nimport { Address, PrivateKey, Signature, SignatureScheme } from '../crypto';\nimport RestClient from '../network/rest/restClient';\nimport { WebsocketClient } from '../network/websocket/websocketClient';\nimport {\n    buildCommitRecordTx,\n    buildGetRecordStatusTx,\n    buildRevokeRecordTx\n} from '../smartcontract/neovm/attestClaimTxBuilder';\nimport { signTransactionAsync } from '../transaction/transactionBuilder';\nimport { hexstr2str, StringReader } from '../utils';\nimport { AttestNotifyEvent } from './attestNotifyEvent';\nimport { ClaimProof } from './claimProof';\nimport { Message, Metadata } from './message';\n\n/**\n * Type of revocation.\n */\nexport enum RevocationType {\n    AttestContract = 'AttestContract',\n    RevocationList = 'RevocationList'\n}\n\n/**\n * Revocation definition.\n */\nexport interface Revocation {\n    /**\n     * Type of revocation.\n     */\n    type: RevocationType;\n\n    /**\n     * Url of revocation list if type is RevocationList\n     */\n    url?: string;\n\n    /**\n     * Address of attest contract if type is AttestContract\n     */\n    addr?: string;\n}\n\n/**\n * Verifiable claim.\n *\n * TODO: override verify to add claim proof verification.\n */\nexport class Claim extends Message {\n    static deserialize(jwt: string): Claim {\n        return super.deserializeInternal(jwt, (m: any, s: any) => new Claim(m, s));\n    }\n\n    version: string;\n    context: string;\n    content: any;\n    revocation?: Revocation;\n\n    useProof: boolean;\n    proof?: ClaimProof;\n\n    constructor(metadata: Metadata, signature?: Signature | undefined, useProof?: boolean) {\n        super(metadata, signature);\n        this.useProof = useProof === true;\n    }\n\n    /**\n     * Overrides default message verification with added attest verification.\n     *\n     * TODO: return more than boolean\n     *\n     * const VerifyOntidClaimResult = {\n     *   CLAIM_NOT_ONCHAIN : 'CLAIM_NOT_ONCHAIN',\n     *   INVALID_SIGNATURE : 'INVALID_SIGNATURE',\n     *   PK_IN_REVOKED     : 'PK_IN_REVOKED',\n     *   NO_ISSUER_PK      : 'NO_ISSUER_PK',\n     *   EXPIRED_CLAIM     : 'EXPIRED_CLAIM',\n     *   REVOKED_CLAIM     : 'REVOKED_CLAIM',\n     *   VALID_CLAIM       : 'VALID_CLAIM'\n     * };\n     *\n     * @param url Restful endpoint of Ontology node\n     * @param checkAttest Should be the attest tested\n     */\n    async verify(url: string, checkAttest = true): Promise<boolean> {\n        const result = await super.verify(url);\n\n        if (result && checkAttest) {\n            return this.getStatus(url);\n        } else {\n            return result;\n        }\n    }\n\n    /**\n     * Serializes the claim into JWT/JWT-X format.\n     *\n     * Override default implementation by adding proof if available.\n     */\n    serialize(): string {\n        if (this.useProof) {\n            const jwt = super.serialize();\n            const proof = this.serializeProof();\n\n            return jwt + '.' + proof;\n        } else {\n            return super.serialize();\n        }\n    }\n\n    /**\n     * Attests the claim onto blockchain.\n     *\n     * @param url Websocket endpoint of Ontology node\n     * @param privateKey Private key to sign the transaction\n     * @param gasPrice gasPrice\n     * @param gasLimit gasLimit\n     * @param payer payer\n     */\n    async attest(url: string, gasPrice: string, gasLimit: string,\n                 payer: Address, privateKey: PrivateKey): Promise<boolean> {\n        const attesterId = this.metadata.issuer;\n        const subjectId = this.metadata.subject;\n        const claimId = this.metadata.messageId;\n        if (claimId === undefined) {\n            throw new Error('Claim id not specified.');\n        }\n\n        const client = new WebsocketClient(url);\n        const tx = buildCommitRecordTx(claimId, attesterId, subjectId, gasPrice, gasLimit, payer);\n        await signTransactionAsync(tx, privateKey);\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\n\n        const event = AttestNotifyEvent.deserialize(response);\n        // tslint:disable-next-line:no-console\n        console.log(JSON.stringify(event));\n        return event.Result.Notify[0].States[0] === 'Push';\n    }\n\n    /**\n     * Revokes claim attest from blockchain.\n     *\n     * @param gas the cost of the transactoin\n     * @param payer the payer of the cost\n     * @param privateKey Private key to sign the transaction\n     * @param url Websocket endpoint of Ontology node\n     * @param gasPrice gasPrice\n     * @param gasLimit gasLimit\n     * @param payer payer\n     */\n    async revoke(url: string, gasPrice: string,\n                 gasLimit: string, payer: Address, privateKey: PrivateKey): Promise<boolean> {\n        const attesterId = this.metadata.issuer;\n        const claimId = this.metadata.messageId;\n        if (claimId === undefined) {\n            throw new Error('Claim id not specified.');\n        }\n        const client = new WebsocketClient(url);\n        const tx = buildRevokeRecordTx(claimId, attesterId, gasPrice, gasLimit, payer);\n        await signTransactionAsync(tx, privateKey);\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\n\n        const event = AttestNotifyEvent.deserialize(response);\n\n        return event.Result.Notify[0].States[0] === 'Push';\n    }\n\n    /**\n     * Gets status of the claim attest.\n     *\n     * @param url Restful endpoint of Ontology node\n     */\n    async getStatus(url: string): Promise<boolean> {\n        const attesterId = this.metadata.issuer;\n        const claimId = this.metadata.messageId;\n        if (claimId === undefined) {\n            throw new Error('Claim id not specified.');\n        }\n\n        const client = new RestClient(url);\n        const tx = buildGetRecordStatusTx(claimId);\n\n        const response = await client.sendRawTransaction(tx.serialize(), true);\n\n        const result = GetStatusResponse.deserialize(response);\n        // tslint:disable-next-line:no-console\n        console.log(result);\n\n        return result.status === Status.ATTESTED && result.issuerId === attesterId;\n    }\n\n    protected payloadToJSON(): any {\n        return {\n            'ver': this.version,\n            '@context': this.context,\n            'clm': this.content,\n            'clm-rev': this.revocation\n        };\n    }\n\n    protected payloadFromJSON(json: any): void {\n        this.version = json.ver;\n        this.context = json['@context'];\n        this.content = json.clm;\n        this.revocation = json['clm-rev'];\n    }\n\n    /**\n     * Serializes the header into JWT/JWT-X encoded header.\n     *\n     * Override default implementation by adding proof if available.\n     *\n     * @param algorithm Signature algorithm used\n     * @param publicKeyId The ID of a signature public key\n     */\n    protected serializeHeader(algorithm: SignatureScheme | undefined, publicKeyId: string | undefined): string {\n        if (this.useProof) {\n            if (algorithm === undefined || publicKeyId === undefined) {\n                throw new Error('Signature is needed fow JWT-X.');\n            } else {\n                const header = {\n                    alg: algorithm.labelJWS,\n                    typ: 'JWT-X',\n                    kid: publicKeyId\n                };\n\n                const stringified = JSON.stringify(header);\n                return b64.encode(stringified, 'utf-8');\n            }\n        } else {\n            return super.serializeHeader(algorithm, publicKeyId);\n        }\n    }\n\n    /**\n     * Serializes the proof into JWT-X.\n     */\n    protected serializeProof(): string {\n        const stringified = JSON.stringify(this.proof);\n        return b64.encode(stringified, 'utf-8');\n    }\n}\n\n/**\n * Helper class for deserializing GetStatus response.\n * fixme: Ontology node changed the response\n */\nexport class GetStatusResponse {\n    static deserialize(r: any): GetStatusResponse {\n        const response = new GetStatusResponse();\n\n        if (r.Result !== undefined && r.Result.Result === '') {\n            response.status = Status.NOTFOUND;\n            return response;\n        }\n        const sr = new StringReader(r.Result.Result);\n        sr.read(1); // data type\n        sr.readNextLen(); // data length\n        sr.read(1); // data type\n        const claimId = hexstr2str(sr.readNextBytes());\n        sr.read(1); // data type\n        const issuerId = hexstr2str(sr.readNextBytes());\n        sr.read(1); // data type\n        const subjectId = hexstr2str(sr.readNextBytes());\n        sr.read(1); // data type\n        let status = sr.readNextBytes();\n        response.claimId = claimId;\n        response.issuerId = issuerId;\n        response.subjectId = subjectId;\n        if (!status) {// status is revoked\n            status = '00';\n        }\n        response.status =  status as Status;\n        return response;\n    }\n\n    claimId: string;\n    issuerId: string;\n    subjectId: string;\n    status: Status;\n    // status: Status;\n    // attesterId: string;\n    // time: string;\n}\n\nexport enum Status {\n    REVOKED = '00',\n    ATTESTED = '01',\n    NOTFOUND = '-1'\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Address, JsonKey, PrivateKey } from './crypto';\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\nimport { ScryptParams } from './scrypt';\nimport { Transaction } from './transaction/transaction';\nimport { signTransaction } from './transaction/transactionBuilder';\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\n\n/**\n * Control data of identity\n */\nexport class ControlData {\n    static fromJson(json: any): ControlData {\n        const privateKey = deserializeFromJson(json as JsonKey);\n        const cd = new ControlData(json.id, privateKey, new Address(json.address), json.salt);\n        cd.publicKey = json.publicKey;\n        cd.hash = json.hash;\n        return cd;\n    }\n\n    /**\n     * Id of control data\n     */\n    id: string;\n    /**\n     * Encrypted private key\n     */\n    encryptedKey: PrivateKey;\n    /**\n     * Address of control data\n     */\n    address: Address;\n    /**\n     * Salt of control data\n     */\n    salt: string;\n    /**\n     * hash type\n     */\n    hash: string = 'sha256';\n    /**\n     * The public key\n     */\n    publicKey: string;\n\n    constructor(id: string, encryptedKey: PrivateKey, address: Address, salt: string) {\n        this.id = id;\n        this.encryptedKey = encryptedKey;\n        this.address = address;\n        this.salt = salt;\n    }\n\n    toJson(): object {\n        return {\n            id: this.id,\n            ...this.encryptedKey.serializeJson(),\n            address: this.address.toBase58(),\n            salt: this.salt,\n            ['enc-alg']: 'aes-256-gcm',\n            hash: this.hash,\n            publicKey: this.publicKey\n        };\n    }\n}\n\nexport class Identity {\n    /**\n     * Import identity\n     * @param label Name of identity\n     * @param encryptedPrivateKey Encrypted private key\n     * @param password User's password to decrypt\n     * @param address Address to decrypt\n     * @param saltBase64 Salt to decrypt\n     * @param params Optional params to decrypt\n     */\n    static importIdentity(\n        label: string,\n        encryptedPrivateKey: PrivateKey,\n        password: string,\n        address: Address,\n        saltBase64: string,\n        params?: ScryptParams\n    ): Identity {\n        // create identity\n        const identity = new Identity();\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\n        if (!label) {\n            label = ab2hexstring (generateRandomArray(4));\n        }\n\n        // generate ontid from p\n        const publicKey = privateKey.getPublicKey();\n        identity.ontid = Address.generateOntid(publicKey);\n        identity.label = label;\n        identity.lock = false;\n        identity.isDefault = false;\n\n        // control\n        const control = new ControlData('1', encryptedPrivateKey, Address.fromOntid(identity.ontid), saltBase64);\n        control.publicKey = publicKey.serializeHex();\n        identity.controls.push(control);\n\n        return identity;\n    }\n\n    /**\n     * Creates Identity object encrypting specified private key.\n     *\n     * The identity is not registered on the blockchain. Caller needs to register it.\n     *\n     * @param privateKey Private key associated with the identity\n     * @param keyphrase Password use to encrypt the private key\n     * @param label Custom label\n     * @param params Optional scrypt params\n     */\n    static create(privateKey: PrivateKey, keyphrase: string, label: string, params?: ScryptParams) {\n        const identity = new Identity();\n        identity.ontid = '';\n        identity.label = label;\n        identity.lock = false;\n        identity.isDefault = false;\n\n        // ontid\n        const publicKey = privateKey.getPublicKey();\n        identity.ontid = Address.generateOntid(publicKey);\n        const address = Address.fromOntid(identity.ontid);\n        const salt = randomBytes(16);\n        const encryptedPrivateKey = privateKey.encrypt(keyphrase, address, salt, params);\n        // start from 1\n        const saltBase64 = Buffer.from(salt, 'hex').toString('base64');\n        const control = new ControlData('1', encryptedPrivateKey, address, saltBase64);\n        control.publicKey = publicKey.serializeHex();\n        identity.controls.push(control);\n\n        return identity;\n    }\n\n    static parseJson(json: string): Identity {\n        return Identity.parseJsonObj(JSON.parse(json));\n    }\n\n    /**\n     * Deserializes JSON object.\n     *\n     * Object should be real object, not stringified.\n     *\n     * @param obj JSON object\n     */\n    static parseJsonObj(obj: any): Identity {\n        const id = new Identity();\n        id.ontid = obj.ontid;\n        id.label = obj.label;\n        id.lock = obj.lock;\n        id.isDefault = obj.isDefault;\n        id.controls = (obj.controls as any[]).map((c) => ControlData.fromJson(c));\n        id.extra = obj.extra;\n        return id;\n    }\n\n    ontid: string;\n    label: string;\n    lock: boolean;\n    isDefault: boolean;\n    controls: ControlData[] = [];\n    extra: null;\n\n    addControl(control: ControlData) {\n        for (const c of this.controls) {\n            if (c.address.toBase58() === control.address.toBase58()) {\n                return;\n            }\n        }\n        control.id = (this.controls.length + 1).toString();\n        this.controls.push(control);\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.toJsonObj());\n    }\n\n    /**\n     * Serializes to JSON object.\n     *\n     * Returned object will not be stringified.\n     *\n     */\n    toJsonObj(): any {\n        const obj = {\n            ontid: this.ontid,\n            label: this.label,\n            lock: this.lock,\n            isDefault: this.isDefault,\n            controls: this.controls.map((c) => c.toJson()),\n            extra: this.extra\n        };\n        return obj;\n    }\n\n    exportPrivateKey(password: string, params?: ScryptParams) {\n        const encryptedKey = this.controls[0].encryptedKey;\n        const address = this.controls[0].address;\n        const salt = this.controls[0].salt;\n        return encryptedKey.decrypt(password, address, salt, params);\n    }\n\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\n        const pri = this.exportPrivateKey(password, params);\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\n        return tx;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as cryptoJS from 'crypto-js';\nimport { Signable } from '../crypto/index';\nimport { PrivateKey } from '../crypto/PrivateKey';\nimport { TxType } from '../transaction/transaction';\nimport { SignatureScheme } from './../crypto/SignatureScheme';\nimport { TransactionAttribute } from './../transaction/txAttribute';\nimport { num2hexstring, num2VarInt } from './../utils';\nimport { Program } from './Program';\nimport { TransactionInput } from './TransactionInput';\nimport { TransactionOutput } from './TransactionOutput';\n\n/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport class TransactionNeo implements Signable {\n    /**\n     * Transaction type\n     */\n    type: TxType;\n\n    version: number = 0;\n\n    nonce: string;\n\n    attributes: TransactionAttribute[];\n\n    inputs: TransactionInput[];\n\n    outputs: TransactionOutput[];\n\n    scripts: Program[];\n\n    serialize() {\n        let result = this.serializeUnsigned();\n        result += num2VarInt(this.scripts.length);\n        for (const s of this.scripts) {\n            result += s.serialize();\n        }\n\n        return result;\n\n    }\n\n    serializeUnsigned() {\n        let result = '';\n        result += num2hexstring(this.type);\n        result += num2hexstring(this.version);\n\n        result += this.serializeExclusiveData();\n        result += num2VarInt(this.attributes.length);\n        for (const a of this.attributes) {\n            result += a.serialize();\n        }\n\n        result += num2VarInt(this.inputs.length);\n        for (const i of this.inputs) {\n            result += i.serialize();\n        }\n\n        result += num2VarInt(this.outputs.length);\n        for (const o of this.outputs) {\n            result += o.serialize();\n        }\n        return result;\n    }\n\n    getHash() {\n        const data = this.serializeUnsigned();\n\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\n\n        return ProgramSha2562;\n    }\n\n    getSignContent() {\n        return this.getHashData();\n    }\n\n    serializeUnsignedData() {\n        return this.getHashData();\n    }\n\n    getHashData() {\n        return this.serializeUnsigned();\n    }\n\n    sign(privateKey: PrivateKey, scheme: SignatureScheme = SignatureScheme.ECDSAwithSHA256) {\n        const sig = privateKey.sign(this.getHashData(), scheme).serializeHex();\n        const signature = sig.substring(2);\n        return signature;\n    }\n\n    protected serializeExclusiveData() {\n        return '';\n    }\n\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { hex2VarBytes } from '../utils';\nimport { TxType } from './../transaction/transaction';\nimport { num2hexstring } from './../utils';\nimport { TransactionNeo } from './TransactionNeo';\n\nexport class InvocationTransaction extends TransactionNeo {\n    script: string;\n    gas: number;\n    constructor() {\n        super();\n        this.type = TxType.Invoke;\n    }\n\n    serializeExclusiveData() {\n        let result = '';\n        result += hex2VarBytes(this.script);\n        result += num2hexstring(this.gas, 8, true);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport axios from 'axios';\nimport { Address } from './../crypto/address';\n\nexport class NeoRpc {\n\n    static sendRawTransaction(url: string, data: string) {\n        const req = this.makeRequest('sendrawtransaction', data);\n        return axios.post(url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    static makeRequest(method: string, ...params: any[]) {\n        const request = {\n            jsonrpc: '2.0',\n            method,\n            params,\n            id: 1\n        };\n\n        return request;\n    }\n\n    static getBalance(url: string, contractAddr: Address, address: Address) {\n        const req = this.makeRequest('getstorage', contractAddr.toHexString(), address.serialize());\n        return axios.post(url, req).then((res) => {\n            return res.data;\n        });\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { PublicKey } from '../crypto/PublicKey';\nimport { programFromMultiPubKey, programFromParams, programFromPubKey } from '../transaction/program';\nimport { hex2VarBytes, StringReader } from '../utils';\n\nexport class Program {\n    static deserialize(hexstring: string) {\n        const sr = new StringReader();\n        const program = new Program();\n        program.parameter = sr.readNextBytes();\n        program.code = sr.readNextBytes();\n        return program;\n    }\n\n    static programFromParams(sigData: string[]) {\n        return programFromParams(sigData);\n    }\n\n    static programFromPubKey(publicKey: PublicKey) {\n        return programFromPubKey(publicKey);\n    }\n\n    static programFromMultiPubKey(m: number, pks: PublicKey[]) {\n        return programFromMultiPubKey(pks, m);\n    }\n\n    parameter: string;\n\n    code: string;\n\n    serialize() {\n        let result = '';\n        result += hex2VarBytes(this.parameter);\n        result += hex2VarBytes(this.code);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport AbiFunction from '../smartcontract/abi/abiFunction';\nimport { serializeAbiFunction } from '../transaction/scriptBuilder';\nimport { num2hexstring, randomBytes } from '../utils';\nimport { Address } from './../crypto/address';\nimport { TransactionAttribute, TransactionAttributeUsage } from './../transaction/txAttribute';\nimport { InvocationTransaction } from './InvocationTransaction';\nexport class SmartContract {\n    static makeInvokeTransaction(contractAddr: Address, addr: Address, abiFunction: AbiFunction) {\n        let params = serializeAbiFunction(abiFunction);\n        params += num2hexstring(0x67);\n        params += contractAddr.serialize();\n        const tx = this.makeInvocationTransaction(params, addr);\n        return tx;\n    }\n\n    static makeInvocationTransaction(params: string, addr: Address) {\n        const tx = new InvocationTransaction();\n        tx.version = 1;\n        tx.attributes = [];\n        const attr1 = new TransactionAttribute();\n        attr1.usage = TransactionAttributeUsage.Script;\n        attr1.data = addr.serialize();\n        tx.attributes[0] = attr1;\n        const attr2 = new TransactionAttribute();\n        attr2.usage = TransactionAttributeUsage.DescriptionUrl;\n        attr2.data = randomBytes(16);\n        tx.attributes[1] = attr2;\n        tx.inputs = [];\n        tx.outputs = [];\n        tx.script = params;\n        tx.gas = 0;\n        return tx;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { reverseHex } from '../utils';\nimport { num2hexstring, StringReader } from './../utils';\n\nexport class TransactionInput {\n\n    static deserialize(hexstr: string) {\n        const sr = new StringReader(hexstr);\n        const input = new TransactionInput();\n        input.prevHash = sr.read(20);\n        input.prevIndex = parseInt(reverseHex(sr.read(2)), 16);\n        return input;\n    }\n    /**\n     * 32 bytes\n     */\n    prevHash: string;\n\n    prevIndex: number;\n\n    equals(o: any) {\n        if (o === this) {\n            return true;\n        }\n        if (null === o) {\n            return false;\n        }\n        if (!(o instanceof TransactionInput)) {\n            return false;\n        }\n        return this.prevHash === o.prevHash && this.prevIndex === o.prevIndex;\n    }\n\n    hashCode() {\n        return parseInt(reverseHex(this.prevHash) , 16) + this.prevIndex;\n    }\n\n    serialize() {\n        let result = '';\n        result += this.prevHash;\n        result += num2hexstring(this.prevIndex, 2, true);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Address } from './../crypto/address';\nimport { num2hexstring, StringReader } from './../utils';\nexport class TransactionOutput {\n\n    static deserialize(hexstring: string) {\n        const sr = new StringReader(hexstring);\n        const output = new TransactionOutput();\n        output.assetId = sr.read(32);\n        output.value = sr.readLong();\n        output.scriptHash = new Address(sr.read(20));\n        return output;\n    }\n\n    /**\n     * 32 bytes\n     */\n    assetId: string;\n\n    // long\n    value: number;\n\n    scriptHash: Address;\n\n    serialize() {\n        let result = '';\n        result += this.assetId;\n        result += num2hexstring(this.value, 8, true);\n        result += this.scriptHash.serialize();\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport axios from 'axios';\nimport { TEST_ONT_URL } from '../../consts';\nimport { Address } from '../../crypto/address';\nimport { ERROR_CODE } from '../../error';\n\n/**\n * Wrapper class for RPC apis.\n */\nexport default class RpcClient {\n    /**\n     * Url of the blockchain node\n     */\n    url: string;\n\n    constructor( url ?: string ) {\n        this.url = url || TEST_ONT_URL.RPC_URL;\n    }\n\n    /**\n     * Get the current blockchain node url.\n     */\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * Make request base on method and parameters\n     * @param method Method's name\n     * @param params Parameters\n     */\n    makeRequest(method: string, ...params: any[]) {\n        const request = {\n            jsonrpc: '2.0',\n            method,\n            params,\n            id: 1\n        };\n\n        return request;\n    }\n\n    /**\n     * Get the balance of some address.\n     * The result contains ONT and ONG.\n     * @param address Address\n     */\n    getBalance(address: Address): Promise<any> {\n        const req = this.makeRequest('getbalance', address.toBase58());\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Send ran transaction to blockchain.\n     * @param data Hex encoded data.\n     * @param preExec Decides if it is a pre-execute transaction.\n     */\n    sendRawTransaction(data: string, preExec: boolean = false): Promise<any> {\n        let req;\n\n        if (preExec) {\n            req = this.makeRequest('sendrawtransaction', data, 1);\n        } else {\n            req = this.makeRequest('sendrawtransaction', data);\n        }\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get raw transaction by transaction hash.\n     * The result is hex encoded string.\n     * @param txHash Reversed transaction hash\n     */\n    getRawTransaction(txHash: string): Promise<any> {\n        const req = this.makeRequest('getrawtransaction', txHash);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get transaction info by transaction hash.\n     * The result is json.\n     * @param txHash Reversed transaction hash.\n     */\n    getRawTransactionJson(txHash: string): Promise<any> {\n        const req = this.makeRequest('getrawtransaction', txHash, 1);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /** Deprecated\n     * Get the generation time for each block.\n     * If the blockchain node runs in vbft, the result is null cause the time is not fixed.\n     */\n    // getGenerateBlockTime(): Promise<any> {\n    //     const req = this.makeRequest('getgenerateblocktime');\n\n    //     return axios.post(this.url, req).then((res) => {\n    //         return res.data;\n    //     });\n    // }\n\n    /**\n     * Get the nodes count.\n     */\n    getNodeCount(): Promise<any> {\n        const req = this.makeRequest('getconnectioncount');\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the current block height.\n     */\n    getBlockHeight(): Promise<any> {\n        const req = this.makeRequest('getblockcount');\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the all blocks count.\n     */\n    getBlockCount(): Promise<any> {\n        const req = this.makeRequest('getblockcount');\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block info by block's height or hash.\n     * The result is json.\n     * @param value Block's hash or height\n     */\n    getBlockJson(value: string | number): Promise<any> {\n        const req = this.makeRequest('getblock', value, 1);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by contract' code hash.\n     * The result is hex encoded string.\n     * @param hash Contract's code hash.\n     */\n    getContract(hash: string): Promise<any> {\n        const req = this.makeRequest('getcontractstate', hash);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by contract's code hash.\n     * The result is json.\n     * @param codeHash Contract's code hash.\n     */\n    getContractJson(codeHash: string): Promise<any> {\n        const req = this.makeRequest('getcontractstate', codeHash, 1);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block info by block's height or hash.\n     * The result is hex encoded string.\n     *\n     * @param value Block's height or hash\n     */\n    getBlock(value: string | number): Promise<any> {\n        const req = this.makeRequest('getblock', value);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get smart contract event.\n     * If parameter is transaction's hash, the result is the event of that transaction.\n     * If parameter is block's height, the result is all the events of that block.\n     *\n     * @param value Transaction's hash or block's height\n     */\n    getSmartCodeEvent(value: string | number): Promise<any> {\n        const req = this.makeRequest('getsmartcodeevent', value);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block height by transaction hash\n     * @param txHash Reversed transaction hash\n     */\n    getBlockHeightByTxHash(txHash: string): Promise<any> {\n        const req = this.makeRequest('getblockheightbytxhash', txHash);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get stored value in smart contract by contract's code hash and the key.\n     * @param codeHash Contract's code hash\n     * @param key Key of stored value\n     */\n    getStorage(codeHash: string, key: string): Promise<any> {\n        const req = this.makeRequest('getstorage', codeHash, key);\n\n        // tslint:disable-next-line:no-console\n        console.log(req);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get merkle proof by transaction hash.\n     * @param hash Reversed transaction hash\n     */\n    getMerkleProof(hash: string): Promise<any> {\n        const req = this.makeRequest('getmerkleproof', hash);\n\n        // tslint:disable-next-line:no-console\n        console.log(this.url);\n        // tslint:disable-next-line:no-console\n        console.log(req);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get allowanece\n     * @param asset Asset's type.Only ONT and ONG supported.\n     * @param from Address of allowance's sender.\n     * @param to Address of allowance's receiver.\n     */\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\n        if (asset !== 'ont' && asset !== 'ong') {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const req = this.makeRequest('getallowance', asset, from.toBase58(), to.toBase58());\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BigNumber } from 'bignumber.js';\nimport BigInt from '../../common/bigInt';\nimport { TOKEN_TYPE } from '../../consts';\nimport { Address } from '../../crypto';\nimport { ERROR_CODE } from '../../error';\nimport { Transaction } from '../../transaction/transaction';\nimport { Transfer } from '../../transaction/transfer';\nimport { hex2VarBytes, hexstr2str, StringReader } from '../../utils';\nimport { makeNativeContractTx } from './../../transaction/transactionBuilder';\nimport { buildNativeCodeScript } from './../abi/nativeVmParamsBuilder';\nimport Struct from './../abi/struct';\n\nexport const ONT_CONTRACT = '0000000000000000000000000000000000000001';\nexport const ONG_CONTRACT = '0000000000000000000000000000000000000002';\n\n/**\n * Get the address of native asset contract\n * @param tokenType Token type. Can only be ONT or ONG\n */\nexport function getTokenContract(tokenType: string) {\n    if (tokenType === TOKEN_TYPE.ONT) {\n        return new Address(ONT_CONTRACT);\n    } else if (tokenType === TOKEN_TYPE.ONG) {\n        return new Address(ONG_CONTRACT);\n    } else {\n        throw new Error('Error token type.');\n    }\n}\n\n/**\n * Verify amount\n * @param amount Amount\n */\nexport function verifyAmount(amount: number | string) {\n    const value = new BigNumber(amount);\n\n    if (!value.isInteger() || value.lte(new BigNumber(0))) {\n        throw new Error('Amount is invalid.');\n    }\n}\n\n/**\n * Creates transaction to transfer native assets.\n * @param tokenType ONT or ONG\n * @param from sender's address\n * @param to receiver's address\n * @param amount Amount of amount to transfer\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for transaction's gas.\n */\nexport function makeTransferTx(\n    tokenType: string,\n    from: Address,\n    to: Address,\n    amount: number | string,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transfer {\n    verifyAmount(amount);\n    const num = new BigNumber(amount);\n    const struct = new Struct();\n    struct.add(from, to, num);\n    const list = [];\n    list.push([struct]);\n    const contract = getTokenContract(tokenType);\n    const params = buildNativeCodeScript(list);\n    const tx: Transfer = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit) as any;\n    tx.tokenType = tokenType;\n    tx.from = from;\n    tx.to = to;\n    tx.amount = amount;\n    tx.method = 'transfer';\n\n    if (payer) {\n        tx.payer = payer;\n    } else {\n        tx.payer = from;\n    }\n    return tx;\n}\n\n/**\n * transfer from multiple senders to one receiver\n * this tx needs multiple senders' signature.\n * @param tokenType\n * @param from array of senders' address\n * @param to receiver's address\n * @param amounts\n */\n/* export function makeTransferFromManyTx(\n    tokenType: string,\n    from: Address[],\n    to: Address,\n    amounts: string[],\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const states = new Array<State>(from.length);\n\n    if (from.length !== amounts.length) {\n        throw new Error('Params error.');\n    }\n    for (let i = 0; i < from.length; i++) {\n        verifyAmount(amounts[i]);\n        const s = new State(from[i], to, amounts[i]);\n        states[i] = s;\n    }\n\n    const transfers = new Transfers();\n    transfers.states = states;\n\n    const contract = getTokenContract(tokenType);\n    const params = transfers.serialize();\n    const tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\n    tx.payer = from[0];\n    return tx;\n} */\n\n/**\n * transfer from one sender to multiple receivers\n * @param tokenType\n * @param from\n * @param to\n * @param amounts\n */\n/* export function makeTransferToMany(\n    tokenType: string,\n    from: Address,\n    to: Address[],\n    amounts: string[],\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const states = new Array<State>(to.length);\n\n    if (to.length !== amounts.length) {\n        throw new Error('Params error.');\n    }\n\n    for (let i = 0; i < to.length; i++) {\n        verifyAmount(amounts[i]);\n        const s = new State(from, to[i], amounts[i]);\n        states[i] = s;\n    }\n\n    const transfers = new Transfers();\n    transfers.states = states;\n\n    const contract = getTokenContract(tokenType);\n    const params = transfers.serialize();\n    const tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\n    tx.payer = from;\n    return tx;\n} */\n\n/**\n * Withdraw ong from sender's address and send to receiver's address\n * @param from Sender's address\n * @param to Receiver's address\n * @param amount Amount of ONG to withdraw.The value needs to multiply 1e9 to keep precision\n * @param payer Address to pay for transaction's gas\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeWithdrawOngTx(from: Address, to: Address, amount: number | string, payer: Address,\n                                  gasPrice: string, gasLimit: string): Transfer {\n    verifyAmount(amount);\n    const num = new BigNumber(amount);\n\n    // const tf = new TransferFrom(from, new Address(ONT_CONTRACT), to, amount);\n    // const params = tf.serialize();\n    const list = [];\n    const struct = new Struct();\n    struct.add(from, new Address(ONT_CONTRACT), to, num);\n    list.push(struct);\n    const args = buildNativeCodeScript(list);\n    const tx: Transfer = makeNativeContractTx(\n        'transferFrom', args, new Address(ONG_CONTRACT) , gasPrice, gasLimit) as any;\n    tx.payer = payer;\n    tx.tokenType = 'ONG';\n    tx.from = from;\n    tx.to = to;\n    tx.amount = amount;\n    tx.method = 'transferFrom';\n    return tx;\n}\n\n/**\n * Creates transaction to query allowance that can be sent from sender to receiver\n * @param asset Asset type. Only ONT or ONg.\n * @param from Sender's address\n * @param to Receiver's address\n */\nexport function makeQueryAllowanceTx(asset: string, from: Address, to: Address): Transaction {\n    asset = asset.toLowerCase();\n    if (asset !== 'ont' && asset !== 'ong') {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    let contract = '';\n    if (asset === 'ong') {\n        contract = ONG_CONTRACT;\n    } else {\n        contract = ONT_CONTRACT;\n    }\n    const list = [];\n    const struct = new Struct();\n    struct.add(from, to);\n    list.push(struct);\n    const params = buildNativeCodeScript(list);\n    const tx = makeNativeContractTx('allowance', params, new Address(contract), '0', '0');\n    return tx;\n}\n\n/**\n * Creates transaction to query balance.\n * @param asset Token type,ont or ong\n * @param address Address to query balance\n */\nexport function makeQueryBalanceTx(asset: string,  address: Address): Transaction {\n    asset = asset.toLowerCase();\n    if (asset !== 'ont' && asset !== 'ong') {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    let contract = '';\n    if (asset === 'ong') {\n        contract = ONG_CONTRACT;\n    } else {\n        contract = ONT_CONTRACT;\n    }\n    const params = hex2VarBytes(address.serialize());\n    const tx = makeNativeContractTx('balanceOf', params, new Address(contract), '0', '0');\n    return tx;\n}\n\nexport function deserializeTransferTx(str: string): Transfer {\n    const tx: Transfer = Transaction.deserialize(str) as any;\n    const code = tx.payload.serialize();\n    const contractIndex1 = code.lastIndexOf('14' + '000000000000000000000000000000000000000');\n    const contractIndex2 = code.lastIndexOf('14' + '0000000000000000000000000000000000000002');\n    if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '1') {\n        tx.tokenType = 'ONT';\n    } else if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '2') {\n        tx.tokenType = 'ONG';\n    } else {\n        throw new Error('Not a transfer tx');\n    }\n    const contractIndex = Math.max(contractIndex1, contractIndex2);\n    const params = code.substring(0, contractIndex);\n    const paramsEnd = params.indexOf('6a7cc86c') + 8;\n    if (params.substr(paramsEnd, 4) === '51c1') { // transfer\n        const methodStr = params.substring(paramsEnd + 6);\n        tx.method = hexstr2str(methodStr);\n    } else {\n        const methodStr = params.substring(paramsEnd + 2);\n        tx.method = hexstr2str(methodStr);\n    }\n\n    if (tx.method === 'transfer') {\n        const sr = new StringReader(params);\n        // const codeLength = sr.readNextLen();\n        // const bytes = sr.read(4);\n        sr.pos += 10;\n        const from = new Address(sr.read(20));\n        tx.from = from;\n        // const bytes2 = sr.read(4);\n        sr.pos += 8;\n        const to = new Address(sr.read(20));\n        tx.to = to;\n        // const bytes3 = sr.read(3);\n        sr.pos += 6;\n        const numTmp = parseInt(sr.read(1), 16);\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\n            tx.amount = numTmp - 80;\n        } else {\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\n            tx.amount = new BigNumber(amount).toString();\n        }\n    } else if (tx.method === 'transferFrom') {\n        const sr = new StringReader(params);\n        // const codeLength = sr.readNextLen();\n        // const bytes = sr.read(4);\n        sr.pos += 10;\n        const from = new Address(sr.read(20));\n        tx.from = from;\n        // const bytes1 = sr.read(4);\n        // const contract = new Address(sr.read(20));\n        // const bytes2 = sr.read(4);\n        sr.pos += 56;\n        const to = new Address(sr.read(20));\n        tx.to = to;\n        // const bytes3 = sr.read(3);\n        sr.pos += 6;\n        const numTmp = parseInt(sr.read(1), 16);\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\n            tx.amount = numTmp - 80;\n        } else {\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\n            tx.amount = new BigNumber(amount).toString();\n        }\n    } else {\n        throw new Error('Not a transfer tx');\n    }\n\n    return tx;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BigNumber } from 'bignumber.js';\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\nimport { Transaction } from '../../transaction/transaction';\nimport { str2hexstr } from '../../utils';\nimport { Address } from './../../crypto/address';\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\nimport { num2hexstring } from './../../utils';\nimport { Parameter, ParameterType } from './../abi/parameter';\n\nexport class Oep8State {\n    public from: string;\n    public to: string;\n    public tokenId: string;\n    public value: BigNumber;\n\n    public constructor(from: Address, to: Address, tokenId: number, value: string) {\n        this.from = from.serialize();\n        this.to = to.serialize();\n        this.tokenId = num2hexstring(tokenId);\n        this.value = new BigNumber(value);\n    }\n}\n\nexport class TransferFrom {\n    spender: string;\n    from: string;\n    to: string;\n    tokenId: string;\n    value: BigNumber;\n    constructor(spender: Address, from: Address, to: Address, tokenId: number, value: string) {\n        this.spender = spender.serialize();\n        this.from = from.serialize();\n        this.to = to.serialize();\n        this.tokenId = num2hexstring(tokenId);\n        this.value = new BigNumber(value);\n    }\n}\n\nconst FunctionNames = {\n    Name: 'name',\n    Symbol: 'symbol',\n    TotalSupply: 'totalSupply',\n    BalanceOf: 'balanceOf',\n    Transfer: 'transfer',\n    TransferMulti: 'transferMulti',\n    Approve: 'approve',\n    ApproveMulti: 'approveMulti',\n    Allowance: 'allowance',\n    TransferFrom: 'transferFrom',\n    TransferFromMulti: 'transferFromMulti',\n    Compound: 'compound',\n    Concatkey: 'concatkey',\n    Init: 'init',\n    CreateMultiKindsPumpkin: 'createMultiKindsPumpkin',\n    CheckTokenPrefix: 'checkTokenPrefix',\n    BalancesOf: 'balancesOf',\n    TotalBalanceOf: 'totalBalanceOf',\n    CheckTokenId: 'checkTokenId'\n};\n\nexport class Oep8TxBuilder {\n    contractAddr: Address;\n\n    constructor(contractAddr: Address) {\n        this.contractAddr = contractAddr;\n    }\n\n    makeInitTx(\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Init;\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferTx(\n        sendAddr: Address,\n        recvAddr: Address,\n        tokenId: number,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Transfer;\n        const params = [\n            new Parameter('sender', ParameterType.ByteArray, sendAddr.serialize()),\n            new Parameter('recv', ParameterType.ByteArray, recvAddr.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferMultiTx(\n        states: Oep8State[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const list = [];\n        list.push(str2hexstr(FunctionNames.TransferMulti));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.from,\n                state.to,\n                state.tokenId,\n                state.value\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeApproveTx(\n        owner: Address,\n        spender: Address,\n        tokenId: number,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Approve;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeApproveMulti(\n        states: Oep8State[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.ApproveMulti;\n        const list = [];\n        list.push(str2hexstr(func));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.from,\n                state.to,\n                state.tokenId,\n                state.value\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferFromMulti(\n        states: TransferFrom[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.TransferFromMulti;\n        const list = [];\n        list.push(str2hexstr(func));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.spender,\n                state.from,\n                state.to,\n                state.tokenId,\n                state.value\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferFromTx(\n        sender: Address,\n        from: Address,\n        to: Address,\n        tokenId: number,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.TransferFrom;\n        const params = [\n            new Parameter('sender', ParameterType.ByteArray, sender.serialize()),\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Compound tokens\n     * @param account User's address\n     * @param compoundNum 0 - compound all tokens that can be compounded; 1 - compound 1 token of each type.\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer to pay for gas\n     */\n    makeCompoundTx(\n        account: Address,\n        compoundNum: number,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Compound;\n        const params = [\n            new Parameter('account', ParameterType.ByteArray, account.serialize()),\n            new Parameter('compoundNum', ParameterType.Integer, compoundNum)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeQueryAllowanceTx(\n        owner: Address,\n        spender: Address,\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.Allowance;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryBalanceOfTx(\n        addr: Address,\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.BalanceOf;\n        const params = [\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTotalSupplyTx(\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.TotalSupply;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryNameTx(\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.Name;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryDecimalsTx(): Transaction {\n        const func = FunctionNames.Symbol;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n    makeQuerySymbolTx(\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.Symbol;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryBalancesTx(\n        account: Address\n    ): Transaction {\n        const func = FunctionNames.BalancesOf;\n        const params = [\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTotalBalanceTx(\n        account: Address\n    ): Transaction {\n        const func = FunctionNames.TotalBalanceOf;\n        const params = [\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { Account } from './account';\nimport { DEFAULT_SCRYPT } from './consts';\nimport { Identity } from './identity';\n\n/**\n * Class to manage Accounts and Identity\n */\nexport class Wallet {\n\n    static parseJson(json: string): Wallet {\n        return Wallet.parseJsonObj(JSON.parse(json));\n    }\n\n    /**\n     * Deserializes JSON object.\n     *\n     * Object should be real object, not stringified.\n     *\n     * @param obj JSON object\n     */\n    static parseJsonObj(obj: any): Wallet {\n        const wallet = new Wallet();\n        wallet.name = obj.name;\n        wallet.defaultOntid = obj.defaultOntid;\n        wallet.defaultAccountAddress = obj.defaultAccountAddress;\n        wallet.createTime = obj.createTime;\n        wallet.version = obj.version;\n        wallet.scrypt = obj.scrypt;\n        wallet.identities = obj.identities && (obj.identities as any[]).map((i) => Identity.parseJsonObj(i));\n        wallet.accounts = obj.accounts && (obj.accounts as any[]).map((a) => Account.parseJsonObj(a));\n        wallet.extra = obj.extra;\n        return wallet;\n    }\n\n    static fromWalletFile(obj: any): Wallet {\n        const wallet = Wallet.parseJsonObj(obj);\n        return wallet;\n    }\n\n    /**\n     * @example\n     * ```typescript\n     *\n     * import { Wallet } from 'ontology-ts-sdk';\n     * const wallet = Wallet.create('test');\n     * ```\n     *\n     * @param name Wallet's name\n     */\n    static create(name: string): Wallet {\n        const wallet = new Wallet();\n        wallet.name = name;\n\n        // createtime\n        wallet.createTime = (new Date()).toISOString();\n        wallet.version = '1.0';\n        wallet.scrypt = {\n            n: DEFAULT_SCRYPT.cost,\n            r: DEFAULT_SCRYPT.blockSize,\n            p: DEFAULT_SCRYPT.parallel,\n            dkLen: DEFAULT_SCRYPT.size\n        };\n\n        return wallet;\n    }\n\n    name: string;\n    defaultOntid: string = '';\n    defaultAccountAddress: string = '';\n    createTime: string;\n    version: string;\n    scrypt: {\n        n: number;\n        r: number;\n        p: number;\n        dkLen: number;\n    };\n    identities: Identity[] = [];\n    accounts: Account[] = [];\n    extra: null;\n\n    addAccount(account: Account): void {\n        for (const ac of this.accounts) {\n            if (ac.address.toBase58() === account.address.toBase58()) {\n                return;\n            }\n        }\n        this.accounts.push(account);\n    }\n\n    addIdentity(identity: Identity): void {\n        for (const item of this.identities) {\n            if (item.ontid === identity.ontid) {\n                return;\n            }\n        }\n        this.identities.push(identity);\n    }\n\n    setDefaultAccount(address: string): void {\n        this.defaultAccountAddress = address;\n    }\n\n    setDefaultIdentity(ontid: string): void {\n        this.defaultOntid = ontid;\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.toJsonObj());\n    }\n\n    /**\n     * Serializes to JSON object.\n     *\n     * Returned object will not be stringified.\n     *\n     */\n    toJsonObj(): any {\n        const obj = {\n            name: this.name,\n            defaultOntid: this.defaultOntid,\n            defaultAccountAddress: this.defaultAccountAddress,\n            createTime: this.createTime,\n            version: this.version,\n            scrypt: this.scrypt,\n            identities: this.identities.map((i) => i.toJsonObj()),\n            accounts: this.accounts.map((a) => a.toJsonObj()),\n            extra: null\n        };\n\n        return obj;\n    }\n\n    signatureData(): string {\n        return '';\n    }\n\n    /*\n    *generate a wallet file that is compatible with cli wallet.\n    */\n    toWalletFile(): any {\n        const obj = this.toJsonObj();\n        return obj;\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/*\n********************************* Notice ********************************************\n*************************************************************************************\n* All the methods in this file is only for our native app development!!!\n* We do not recommend you to use these methods directly.\n* You can refer to these methods or the test cases to implement the same methods.\n*************************************************************************************\n*************************************************************************************\n*/\nimport axios from 'axios';\nimport * as bip39 from 'bip39';\nimport { Account } from '../account';\nimport { Claim } from '../claim/claim';\nimport { HTTP_REST_PORT, HTTP_WS_PORT, ONT_BIP44_PATH, REST_API, TEST_NODE } from '../consts';\nimport { Address, PgpSignature, PrivateKey, PublicKey } from '../crypto';\nimport { ERROR_CODE } from '../error';\nimport { Identity } from '../identity';\nimport { NeoRpc } from '../neocore/NeoRpc';\nimport { Program } from '../neocore/Program';\nimport { SmartContract } from '../neocore/SmartContract';\nimport RestClient from '../network/rest/restClient';\nimport { ScryptParams } from '../scrypt';\nimport * as scrypt from '../scrypt';\nimport AbiInfo from '../smartcontract/abi/abiInfo';\nimport { Parameter } from '../smartcontract/abi/parameter';\nimport { makeTransferTx, makeWithdrawOngTx, ONT_CONTRACT } from '../smartcontract/nativevm/ontAssetTxBuilder';\nimport { buildAddAttributeTx, buildGetDDOTx, buildRegisterOntidTx\n} from '../smartcontract/nativevm/ontidContractTxBuilder';\nimport { Oep8TxBuilder } from '../smartcontract/neovm/oep8TxBuilder';\nimport { DDOAttribute } from '../transaction/ddo';\nimport { Transaction } from '../transaction/transaction';\nimport {\n    buildRestfulParam,\n    sendRawTxRestfulUrl,\n    signTransaction,\n    signTx\n} from '../transaction/transactionBuilder';\nimport { generateMnemonic, hexstr2str, isBase64, isHexString, now, reverseHex,\n    sendBackResult2Native, str2hexstr, StringReader } from '../utils';\nimport { Wallet } from '../wallet';\nimport { ParameterType } from './../smartcontract/abi/parameter';\n\n// tslint:disable-next-line:no-var-requires\nconst HDKey = require('@ont-community/hdkey-secp256r1');\n\n// tslint:disable:no-unused-expression\n// tslint:disable:no-shadowed-variable\n\n// neo contract\nconst CONTRACT_HASH = 'ceab719b8baa2310f232ee0d277c061704541cfb';\n// neo node\nconst NEO_NODE = 'http://neonode1.ont.network:10332';\n// neo abi\n// tslint:disable-next-line:max-line-length\nconst NEP5_ABI = '{\"hash\":\"0x5bb169f915c916a5e30a3c13a5e0cd228ea26826\",\"entrypoint\":\"Main\",\"functions\":[{\"name\":\"Name\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Symbol\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Decimals\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Main\",\"parameters\":[{\"name\":\"operation\",\"type\":\"String\"},{\"name\":\"args\",\"type\":\"Array\"}],\"returntype\":\"Any\"},{\"name\":\"Init\",\"parameters\":[],\"returntype\":\"Boolean\"},{\"name\":\"TotalSupply\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Transfer\",\"parameters\":[{\"name\":\"from\",\"type\":\"ByteArray\"},{\"name\":\"to\",\"type\":\"ByteArray\"},{\"name\":\"value\",\"type\":\"Integer\"}],\"returntype\":\"Boolean\"},{\"name\":\"BalanceOf\",\"parameters\":[{\"name\":\"address\",\"type\":\"ByteArray\"}],\"returntype\":\"Integer\"}],\"events\":[{\"name\":\"transfer\",\"parameters\":[{\"name\":\"arg1\",\"type\":\"ByteArray\"},{\"name\":\"arg2\",\"type\":\"ByteArray\"},{\"name\":\"arg3\",\"type\":\"Integer\"}],\"returntype\":\"Void\"}]}';\n// neo swap address\n// const RECEIVER_ADDR = 'AFmseVrdL9f9oyCzZefL9tG6UbvhPbdYzM';\n\nconst NEO_TRAN = 100000000;\n\nexport class SDK {\n    static SERVER_NODE: string = TEST_NODE;\n    static REST_PORT: string = HTTP_REST_PORT;\n    static SOCKET_PORT: string = HTTP_WS_PORT;\n    static restClient: RestClient = new RestClient();\n\n    static setServerNode(node: string) {\n        if (node) {\n            let url = '';\n            if (node.indexOf('http') > -1) {\n                url = node.substr('http://'.length);\n            } else {\n                url = node;\n            }\n            SDK.SERVER_NODE = url;\n            return;\n        }\n\n        throw new Error('Can not set ' + node + 'as server node');\n    }\n\n    static setRestPort(port: string) {\n        if (port) {\n            SDK.REST_PORT = port;\n            SDK.restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n            return;\n        }\n\n        throw new Error('Can not set ' + port + ' as restful port');\n    }\n\n    static setSocketPort(port: string) {\n        if (port) {\n            SDK.SOCKET_PORT = port;\n            return;\n        }\n        throw new Error('Can not set ' + port + 'as socket port');\n    }\n\n    static getDecryptError(err: any) {\n        return {\n            error: ERROR_CODE.Decrypto_ERROR,\n            result: ''\n        };\n    }\n\n    static transformPassword(password: string) {\n        if (isBase64(password)) {\n            return Buffer.from(password, 'base64').toString();\n        }\n        return password;\n    }\n\n    static createWallet(name: string,\n                        password: string, payer: string, gasPrice: string, gasLimit: string, callback?: string) {\n        const wallet = Wallet.create(name);\n        password = this.transformPassword(password);\n        const privateKey = PrivateKey.random();\n        const identity = Identity.create(privateKey, password, name);\n\n        wallet.defaultOntid = identity.ontid;\n        wallet.addIdentity(identity);\n\n        // let account = new Account()\n        // account.create(privateKey, password, name)\n        // wallet.addAccount(account)\n\n        const walletDataStr = wallet.toJson();\n        let obj: any = {\n            error: 0,\n            result: walletDataStr,\n            tx : ''\n        };\n\n        const publicKey = privateKey.getPublicKey();\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        // add preExec\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            // preExec success, send real request\n            if (res.Result.Result === '01') {\n                // restClient.sendRawTransaction(tx.serialize(), false)\n                obj.tx = tx.serialize();\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            } else {\n                const errResult = {\n                    error: ERROR_CODE.PreExec_ERROR,\n                    result: ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\n                }\n                return errResult;\n            }\n        }).catch((err: any) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static importIdentityWithWallet(\n        label: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ) {\n        let obj: any;\n        let identity = new Identity();\n        try {\n            // TODO check ontid\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n            const addr = new Address(address);\n            password = this.transformPassword(password);\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\n        } catch (err) {\n            obj  = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }\n        obj = {\n            error : ERROR_CODE.SUCCESS,\n            result : identity.toJson()\n        };\n        // check ontid on chain\n        const tx = buildGetDDOTx(identity.ontid);\n        const param = buildRestfulParam(tx);\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\n        const url = sendRawTxRestfulUrl(restUrl, true);\n        // clear privateKey and password\n        password = '';\n        return axios.post(url, param).then((res: any) => {\n            const result = res.data.Result;\n            if (result.Result) {\n                //\n            } else {\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\n                obj.result = '';\n            }\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result : ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    // send http post to check\n    static importIdentityAndCreateWallet(\n        label: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ) {\n        let identity = new Identity();\n        let error = {};\n        let obj: any;\n        try {\n            password = this.transformPassword(password);\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n            const addr = new Address(address);\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\n            const wallet = Wallet.create(identity.label);\n            wallet.defaultOntid = identity.ontid;\n            wallet.addIdentity(identity);\n            const walletStr = wallet.toJson();\n            obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: walletStr\n            };\n            // check ontid on chain\n            const tx = buildGetDDOTx(identity.ontid);\n            const param = buildRestfulParam(tx);\n            const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\n            const url = sendRawTxRestfulUrl(restUrl, true);\n            return axios.post(url, param).then((res: any) => {\n                const result = res.data.Result;\n                if (result.Result) {\n                    //\n                } else {\n                    obj.error = ERROR_CODE.UNKNOWN_ONTID;\n                    obj.result = '';\n                }\n                // clear privateKey and password\n                password = '';\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            }).catch((err) => {\n                obj = {\n                    error: ERROR_CODE.NETWORK_ERROR,\n                    result : ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n            });\n            // callback && sendBackResult2Native(JSON.stringify(obj), callback)\n            // return obj\n        } catch (err) {\n            error = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(error), callback);\n            }\n            return Promise.reject(error);\n        }\n    }\n\n    static createIdentity(label: string, password: string, payer: string,\n                          gasPrice: string, gasLimit: string, callback?: string) {\n        const privateKey = PrivateKey.random();\n        password = this.transformPassword(password);\n        const identity = Identity.create(privateKey, password, label);\n        const result = identity.toJson();\n        let obj: any = {\n            error: ERROR_CODE.SUCCESS,\n            result,\n            tx : ''\n        };\n        // register ontid\n        const publicKey = privateKey.getPublicKey();\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        password = '';\n        privateKey.key = '';\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            // preExec success, send real request\n            if (res.Result.Result === '01') {\n                // restClient.sendRawTransaction(tx.serialize(), false)\n                obj.tx = tx.serialize();\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                // clear privateKey and password\n                privateKey.key = '';\n                password = '';\n                return obj;\n            } else {\n                const errResult = {\n                    error: ERROR_CODE.PreExec_ERROR,\n                    result: ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\n                }\n                return errResult;\n            }\n        }).catch((err: any) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static createAccount(label: string, password: string, callback?: string) {\n        // generate mnemnic\n        let mnemonic = generateMnemonic();\n        password = this.transformPassword(password);\n        const mnemonicHex = str2hexstr(mnemonic);\n        const privateKey = PrivateKey.generateFromMnemonic(mnemonic);\n        const account = Account.create(privateKey, password, label);\n        const addr = account.address;\n        const salt = Buffer.from(account.salt, 'base64').toString('hex');\n        const mnemonicEnc = scrypt.encryptWithGcm(mnemonicHex, addr, salt, password);\n        const result = account.toJson();\n        const obj = {\n            error : ERROR_CODE.SUCCESS,\n            result,\n            mnemonicEnc\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        mnemonic = '';\n        return obj;\n    }\n\n    static decryptMnemonicEnc(mnemonicEnc: string,\n                              address: string, salt: string, password: string, callback?: string) {\n        let obj;\n        password = this.transformPassword(password);\n        const addr = new Address(address);\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\n        const decMneHex = scrypt.decryptWithGcm(mnemonicEnc, addr, saltHex, password);\n        const decMne = hexstr2str(decMneHex);\n        obj = {\n            error: ERROR_CODE.SUCCESS,\n            result: decMne\n        };\n        // tslint:disable-next-line:no-unused-expression\n        callback && sendBackResult2Native(JSON.stringify(obj), callback);\n        return obj;\n    }\n\n    static importAccountWithWallet(\n        label: string,\n        encryptedPrivateKey: string,\n        address: string,\n        salt: string,\n        password: string,\n        callback?: string\n    ) {\n        let account = new Account();\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(address);\n            account = Account.importAccount(label, encryptedPrivateKeyObj, password, addr, salt);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const obj = {\n            error: ERROR_CODE.SUCCESS,\n            result: account.toJson()\n        };\n        // add address check\n        if (address !== account.address.toBase58()) {\n            obj.error = ERROR_CODE.INVALID_ADDR,\n            obj.result = '';\n        }\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        password = '';\n        return obj;\n    }\n\n    static signSelfClaim(\n        context: string,\n        claimData: string,\n        ontid: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    )  {\n        let privateKey: PrivateKey;\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.sendRawTx}`;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        // const claimDataObj = JSON.parse(claimData);\n        const metadata = {\n            issuer: ontid,\n            subject: ontid,\n            issuedAt: now()\n        };\n\n        // todo: pass real public key id\n        const publicKeyId = ontid + '#keys-1';\n        const claim = new Claim(metadata, undefined, undefined);\n        claim.sign(restUrl, publicKeyId, privateKey);\n        const obj = {\n            error : 0,\n            result : claim\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return obj;\n    }\n\n    static decryptEncryptedPrivateKey(\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ) {\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        let pri;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            pri = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const obj = {\n            error : 0,\n            result : pri.key\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        password = '';\n        return obj;\n    }\n\n    static getClaim(\n        claimId: string,\n        context: string,\n        issuer: string,\n        subject: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        payer: string,\n        gasPrice: string,\n        gasLimit: string,\n        callback ?: string\n    ) {\n        let privateKey: PrivateKey;\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n\n            return result;\n        }\n        const path = 'claim' + claimId;\n        const valueObj = {\n            Type : 'JSON',\n            Value : {\n                Context: context,\n                Issuer: issuer\n            }\n        };\n        // const type = 'JSON';\n        const value = JSON.stringify(valueObj);\n        const attr = new DDOAttribute();\n        attr.key = path;\n        attr.type = 'JSON';\n        attr.value = value;\n        const publicKey = privateKey.getPublicKey();\n        const tx = buildAddAttributeTx(subject, [attr], publicKey, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            if (res.Result.Result === '01') {\n                // user agent will do this\n                // restClient.sendRawTransaction(tx.serialize(), false)\n                // const hash = sha256(sha256(tx.serializeUnsignedData()))\n                const obj = {\n                    error: ERROR_CODE.SUCCESS,\n                    result: '',\n                    tx: tx.serialize()\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                // clear privateKey and password\n                privateKey.key = '';\n                password = '';\n                return obj;\n            } else {\n                const obj = {\n                    error: ERROR_CODE.PreExec_ERROR,\n                    result: ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            }\n        }\n        ).catch((err: any) => {\n            const obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static signData(\n        content: string, // hex string\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ): PgpSignature | object {\n        let privateKey: PrivateKey;\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        let result;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const signature = privateKey.sign(content);\n        result = signature.serializePgp();\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static getBalance(address: string, callback?: string) {\n        const addressObj = new Address(address);\n        const request = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.getBalance}/${addressObj.toBase58()}`;\n        return axios.get(request).then((res: any) => {\n            if (res.data.Error === 0) {\n                const result = res.data.Result;\n                const obj = {\n                    error : 0,\n                    result\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            } else {\n                const obj = {\n                    error: res.data.Error,\n                    result : ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            }\n        }).catch( (err: any) => {\n            const obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return Promise.reject(obj);\n        });\n    }\n\n    // pls check balance before transfer\n    static transferAssets(\n        token: string,\n        from: string,\n        to: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback?: string) {\n\n        let fromAddress: Address;\n        let toAddress: Address;\n        password = this.transformPassword(password);\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n        } catch (err) {\n            const result = {\n                error : ERROR_CODE.INVALID_PARAMS,\n                result : ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(from);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        const tx = makeTransferTx(token, fromAddress, toAddress, value, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static claimOng(\n        address: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback?: string\n    ) {\n        let addressObj: Address;\n        password = this.transformPassword(password);\n        try {\n            addressObj = new Address(address);\n\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addressObj, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        const tx = makeWithdrawOngTx(addressObj, addressObj, value, new Address(payer), gasPrice, gasLimit);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static exportIdentityToQrcode(identityDataStr: string, callback?: string) {\n        const obj = Identity.parseJson(identityDataStr);\n        let salt = obj.controls[0].salt;\n        if (!isBase64(salt)) {\n            salt = Buffer.from(salt, 'hex').toString('base64');\n        }\n        const result = {\n            type : 'I',\n            label : obj.label,\n            algorithm : 'ECDSA',\n            scrypt : {\n                n : 4096,\n                p : 8,\n                r : 8,\n                dkLen : 64\n            },\n            key : obj.controls[0].encryptedKey.key,\n            salt,\n            address: obj.controls[0].address.toBase58(),\n            parameters : {\n                curve : 'secp256r1'\n            }\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static exportIdentityToKeystring(identityDataStr: string, callback?: string) {\n        const obj = Identity.parseJson(identityDataStr);\n        const address = obj.controls[0].address.toBase58();\n        const salt = obj.controls[0].salt;\n        const key = obj.controls[0].encryptedKey.key;\n        const result = salt + address + key;\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static exportAccountToQrcode(accountDataStr: string, callback?: string) {\n        const obj = Account.parseJson(accountDataStr);\n        const result = {\n            type: 'A',\n            label: obj.label,\n            algorithm: 'ECDSA',\n            scrypt: {\n                n: 4096,\n                p: 8,\n                r: 8,\n                dkLen: 64\n            },\n            key: obj.encryptedKey.key,\n            salt: obj.salt,\n            address: obj.address.toBase58(),\n            parameters: {\n                curve: 'secp256r1'\n            }\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static exportAccountToKeystring(accountDataStr: string, callback?: string) {\n        const obj = Account.parseJson(accountDataStr);\n        const salt = obj.salt;\n        const address = obj.address.toBase58();\n        const key = obj.encryptedKey.key;\n        const result = salt + address + key;\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static importAccountMnemonic(label: string, mnemonic: string, password: string, callback?: string) {\n        mnemonic = mnemonic.trim();\n        password = this.transformPassword(password);\n        if (!bip39.validateMnemonic(mnemonic)) {\n            // tslint:disable-next-line:no-shadowed-variable\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            // tslint:disable-next-line:no-unused-expression\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\n        const pri = hdkey.derive(ONT_BIP44_PATH);\n        const key = Buffer.from(pri.privateKey).toString('hex');\n        const privateKey = new PrivateKey(key);\n        const account = Account.create(privateKey, password, label);\n        const result = account.toJson();\n        const obj = {\n            error: ERROR_CODE.SUCCESS,\n            result\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        mnemonic = '';\n        return obj;\n    }\n\n    static exportWifPrivakeKey(encryptedKey: string, password: string,\n                               address: string, salt: string, callback?: string) {\n        if (address.length !== 34 && address.length !== 40) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        password = this.transformPassword(password);\n        const encrypt = new PrivateKey(encryptedKey);\n        const addr = new Address(address);\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\n        const privateKey = encrypt.decrypt(password, addr, saltHex);\n        let wif = privateKey.serializeWIF();\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: wif\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        wif = '';\n        password = '';\n        return result;\n    }\n\n    static importAccountWithWif(label: string, wif: string, password: string, callback?: string) {\n        let privateKey;\n        password = this.transformPassword(password);\n        try {\n            privateKey = PrivateKey.deserializeWIF(wif);\n        } catch (err) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const account = Account.create(privateKey, password, label);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: account.toJson()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static importAccountWithPrivateKey(label: string, privateKey: string, password: string, callback?: string) {\n        privateKey = privateKey.trim();\n        password = this.transformPassword(password);\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const pri = new PrivateKey(privateKey);\n        const account = Account.create(pri, password, label);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: account.toJson()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey = '';\n        password = '';\n        return result;\n    }\n\n    /**\n     * Actually import with Qrcode\n     */\n    static importAccountWithKeystore(keystore: string, password: string, callback?: string) {\n        let keyStoreObj;\n        password = this.transformPassword(password);\n        try {\n            keyStoreObj = JSON.parse(keystore);\n        } catch (err) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        if (keyStoreObj.type !== 'A') {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        } else {\n            let account = new Account();\n            const encryptedPrivateKeyObj = new PrivateKey(keyStoreObj.key);\n            try {\n                const params = {\n                    cost: keyStoreObj.scrypt.n || 4096,\n                    blockSize: keyStoreObj.scrypt.p || 8,\n                    parallel: keyStoreObj.scrypt.r || 8,\n                    size: keyStoreObj.scrypt.dkLen || 64\n                };\n                const addr = new Address(keyStoreObj.address);\n                account = Account.importAccount(\n                    keyStoreObj.label, encryptedPrivateKeyObj, password, addr, keyStoreObj.salt, params);\n                const obj = {\n                    error: ERROR_CODE.SUCCESS,\n                    result: account.toJson()\n                };\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                // clear privateKey and password\n                password = '';\n                return obj;\n            } catch (err) {\n                const result = this.getDecryptError(err);\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(result), callback);\n                }\n                return result;\n            }\n        }\n    }\n\n    static getUnclaimedOng(address: string, callback?: string) {\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.getAllowance('ong', new Address(ONT_CONTRACT), new Address(address)).then((res) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: res.Result\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static querySmartCodeEventByTxhash(txHash: string, callback?: string) {\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.getSmartCodeEvent(txHash).then((res) => {\n            const obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: res\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static createSharedWallet(requiredSignatureNum: string, allRelatedPks: string, callback?: string) {\n        const M  = parseInt(requiredSignatureNum, 10);\n        let pks = [];\n        let pubs = [];\n        let error = ERROR_CODE.SUCCESS;\n        try {\n            pks = JSON.parse(allRelatedPks);\n            pubs = pks.map((p: string) => PublicKey.deserializeHex(new StringReader(p)));\n        } catch (err) {\n            error = ERROR_CODE.INVALID_PARAMS;\n        }\n        if (M < 2 || pks.length < M || pks.length > 12) {\n            error = ERROR_CODE.INVALID_PARAMS;\n        }\n        let address = '';\n        try {\n            address = Address.fromMultiPubKeys(M, pubs).toBase58();\n        } catch (err) {\n            error = ERROR_CODE.INVALID_PARAMS;\n        }\n        if (callback) {\n            const result = {\n                error,\n                result: address\n            };\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return address;\n    }\n\n    static adderssFromPublicKey(publicKey: string, callback?: string) {\n        const pk = PublicKey.deserializeHex(new StringReader(publicKey));\n        const address = Address.fromPubKey(pk).toBase58();\n        const result = {\n            error : ERROR_CODE.SUCCESS,\n            result: address\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return address;\n    }\n\n    static makeMultiSignTransaction(asset: string, from: string, to: string, amount: string, gasPrice: string,\n                                    gasLimit: string, callback?: string) {\n        let fromAddress: Address;\n        let toAddress: Address;\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const tx = makeTransferTx(asset, fromAddress, toAddress, amount, gasPrice, gasLimit);\n        tx.payer = fromAddress;\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            txHash: reverseHex(tx.getSignContent()),\n            txData: tx.serialize()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        return result;\n    }\n\n    static signMultiAddrTransaction(\n        encryptedPrivateKey: string,\n        address: string,\n        salt: string,\n        password: string,\n        allRelatedPks: string,\n        requiredSignatureNum: string,\n        txDada: string,\n        callback?: string) {\n        password = this.transformPassword(password);\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const M = parseInt(requiredSignatureNum, 10);\n        const tx = Transaction.deserialize(txDada);\n        const pubs = JSON.parse(allRelatedPks);\n        const pks = pubs.map((p: string) => new PublicKey(p));\n        signTx(tx, M, pks, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            signedHash: tx.serialize()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        return tx;\n    }\n\n    /**\n     * Neo transfer\n     */\n    static neoTransfer(\n        from: string,\n        to: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        callback?: string,\n        params ?: ScryptParams\n    ) {\n        password = this.transformPassword(password);\n        const recv = new Address(to);\n        const addr = new Address(from);\n        const abiInfo = AbiInfo.parseJson(NEP5_ABI);\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\n        const amount = parseInt(value, 10);\n        const func = abiInfo.getFunction('Transfer');\n        func.name = func.name.toLowerCase();\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex, params);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const p1 = new Parameter('from', ParameterType.ByteArray, addr.serialize());\n        const p2 = new Parameter('to', ParameterType.ByteArray, recv.serialize());\n        const p3 = new Parameter('value', ParameterType.Integer, amount * NEO_TRAN);\n        func.setParamsValue(p1, p2, p3);\n        const tx = SmartContract.makeInvokeTransaction(contractAddr, addr, func);\n        const p = new Program();\n        p.parameter = Program.programFromParams([tx.sign(privateKey)]);\n        p.code = Program.programFromPubKey(privateKey.getPublicKey());\n        tx.scripts = [p];\n\n        return NeoRpc.sendRawTransaction(NEO_NODE, tx.serialize()).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: ''\n            };\n            if (res.result) {\n                result.result = reverseHex(tx.getHash());\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\n            } else {\n                result.error = ERROR_CODE.NETWORK_ERROR;\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static getNeoBalance(address: string, callback?: string) {\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\n        const addr = new Address(address);\n        return NeoRpc.getBalance(NEO_NODE, contractAddr, addr).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.result) {\n                const balance = parseInt(reverseHex(res.result), 16);\n                result.result = balance;\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static sendTransaction(txData: string, callback?: string) {\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(txData).then((res) => {\n            const obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: res\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    // ope8 apis for ONTO\n    static queryOep8Balance(\n        contractHash: string,\n        account: string,\n        tokenId: number,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep8.makeQueryBalanceOfTx(addr, tokenId);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.Result.Result) {\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static queryOep8Balances(\n        contractHash: string,\n        account: string,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep8.makeQueryBalancesTx(addr);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: [0, 0, 0, 0, 0, 0, 0, 0]\n            };\n            if (res.Result.Result) {\n                const vals = res.Result.Result.map((v: string) => v ? parseInt(reverseHex(v), 16) : 0);\n                result.result = vals;\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static queryOep8TotalBalance(\n        contractHash: string,\n        account: string,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep8.makeQueryTotalBalanceTx(addr);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.Result.Result) {\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static transferOep8(\n        contractHash: string,\n        from: string,\n        to: string,\n        value: string,\n        tokenId: number,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback?: string\n    ) {\n        let fromAddress: Address;\n        let toAddress: Address;\n        let payerAddress: Address;\n        password = this.transformPassword(password);\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n            payerAddress = new Address(payer);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(from);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            return result;\n        }\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const tx = oep8.makeTransferTx(fromAddress, toAddress, tokenId, value, gasPrice, gasLimit, payerAddress);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static compoundOep8(\n        contractHash: string,\n        account: string,\n        compoundNum: number,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback: string\n    ) {\n        let addr: Address;\n        password = this.transformPassword(password);\n        try {\n            addr = new Address(account);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            return result;\n        }\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const tx = oep8.makeCompoundTx(addr, compoundNum, gasPrice, gasLimit, addr);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport BigInt from '../../common/bigInt';\nimport { GENESIS_BLOCK_TIMESTAMP } from '../../consts';\nimport { Address } from '../../crypto';\nimport { ERROR_CODE } from '../../error';\nimport RestClient from '../../network/rest/restClient';\nimport { Transaction } from '../../transaction/transaction';\nimport { makeNativeContractTx } from '../../transaction/transactionBuilder';\nimport { calcUnboundOng, hex2VarBytes, hexstr2str,\n    num2hexstring, str2hexstr, str2VarBytes, StringReader, varifyPositiveInt } from '../../utils';\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\nimport Struct from '../abi/struct';\n\nconst GOVERNANCE_CONTRACT = '0000000000000000000000000000000000000007';\nconst PEER_ATTRIBUTES = 'peerAttributes';\nconst SPLIT_FEE_ADDRESS = 'splitFeeAddress';\nconst AUTHORIZE_INFO_POOL = 'voteInfoPool';\nconst GLOBAL_PARAM = 'globalParam';\nconst TOTAL_STAKE = 'totalStake';\nconst contractAddress = new Address(GOVERNANCE_CONTRACT);\n\n/* TODO: Test */\n\n// tslint:disable:no-console\n\n/**\n * Register to be candidate node.\n * This tx needs signatures from userAddr and payer if these two address are not the same.\n * @param ontid user's ONT ID, must be assigned with the role.\n * @param peerPubKey public key of user's peer\n * @param userAddr user's address to pledge ONT&ONG. This address must have enough ONT & ONG.\n * @param keyNo user's pk id\n * @param initPos Initial state\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeRegisterCandidateTx(\n    ontid: string,\n    peerPubKey: string,\n    keyNo: number,\n    userAddr: Address,\n    initPos: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    varifyPositiveInt(initPos);\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), initPos, ontid, keyNo);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('registerCandidate', params, contractAddress,\n                                     gasPrice, gasLimit, payer);\n}\n\n/**\n *\n * @param userAddr User's address to pledge ONT&ONG.\n * @param peerPubKey Public key of user's peer\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeUnregisterCandidateTx(\n    userAddr: Address,\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('unRegisterCandidate', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Creates transaction to approve candidate\n * @param peerPubKey Public key of user's peer\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeApproveCandidateTx(\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey));\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('approveCandidate', params, contractAddress,\n                                     gasPrice, gasLimit, payer);\n}\n\n/**\n * Creates transaction to reject candidate\n * @param peerPubKey Public key of user's peer\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeRejectCandidateTx(\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey));\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('rejectCandidate', params, contractAddress,\n        gasPrice, gasLimit, payer);\n}\n\n/**\n * Creates transaction to vote for some peers.\n * Can only vote for peers that with status 1 or 2\n * This tx needs signatures from userAddr and payer if these two address are not the same.\n * @param userAddr User's address\n * @param peerPubKeys Public keys of peers that to be voted\n * @param posList Array of token that to vote\n * @param payer Address to pay for transaction's gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeVoteForPeerTx(\n    userAddr: Address,\n    peerPubKeys: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    if (peerPubKeys.length !== posList.length) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeys.length);\n    for (const p of peerPubKeys) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const n of posList) {\n        struct.add(n);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('voteForPeer', params, contractAddress,\n       gasPrice, gasLimit, payer);\n}\n\n/**\n * User unvotes peer nodes\n * @param userAddr user's address\n * @param peerPubKeys peer's pks\n * @param posList amount of ONT to unvote\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeUnvoteForPeerTx(\n    userAddr: Address,\n    peerPubKeys: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    if (peerPubKeys.length !== posList.length) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeys.length);\n    for (const p of peerPubKeys) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const n of posList) {\n        struct.add(n);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('unVoteForPeer', params, contractAddress,\n         gasPrice, gasLimit, payer);\n}\n\n/**\n * Withdraw the unvote ONT\n * Need two signatures if userAddr and payer are not the same\n * @param userAddr\n * @param peerPubKeys\n * @param withdrawList\n */\nexport function makeWithdrawTx(\n    userAddr: Address,\n    peerPubKeys: string[],\n    withdrawList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    if (peerPubKeys.length !== withdrawList.length) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeys.length);\n    for (const p of peerPubKeys) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(withdrawList.length);\n    for (const w of withdrawList) {\n        struct.add(w);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('withdraw', params, contractAddress,\n        gasPrice, gasLimit, payer);\n}\n\n/** Quit node register\n * Need two signatures if userAddr and payer are not the same\n */\nexport function makeQuitNodeTx(\n    userAddr: Address,\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('quitNode', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Peer change the status of authorization\n * @param peerPubKey Peer's public key\n * @param userAddr User's address\n * @param maxAuthorize Allowed max amount of stake authorization\n * @param payer Payer of the transaction fee\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeChangeAuthorizationTx(\n    peerPubKey: string,\n    userAddr: Address,\n    maxAuthorize: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), maxAuthorize);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('changeMaxAuthorization', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Update allocation proportion of peer\n * @param peerPubKey\n * @param userAddr\n * @param peerCost\n * @param payer\n * @param gasPrice\n * @param gasLimit\n */\nexport function makeSetPeerCostTx(\n    peerPubKey: string,\n    userAddr: Address,\n    peerCost: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), peerCost);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('setPeerCost', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Withdraw fee to user's address\n * @param userAddr User's address\n * @param payer\n * @param gasPrice\n * @param gasLimit\n */\nexport function makeWithdrawFeeTx(\n    userAddr: Address,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('withdrawFee', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * User authorize some peers\n * @param userAddr\n * @param peerPubKeyList\n * @param posList\n * @param payer\n * @param gasPrice\n * @param gasLimit\n */\nexport function makeAuthorizeForPeerTx(\n    userAddr: Address,\n    peerPubKeyList: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeyList.length);\n    for (const p of peerPubKeyList) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const w of posList) {\n        struct.add(w);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('authorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * User cancels the authorization of peer\n */\nexport function makeUnauthorizeForPeerTx(\n    userAddr: Address,\n    peerPubKeyList: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeyList.length);\n    for (const p of peerPubKeyList) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const w of posList) {\n        struct.add(w);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('unAuthorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Peer add the init pos\n * @param peerPubkey Peer's public key\n * @param userAddr Stake wallet address\n * @param pos Amount of pos to add\n * @param payer Payer of the transaction\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeAddInitPosTx(\n    peerPubkey: string,\n    userAddr: Address,\n    pos: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('addInitPos', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Peer reduce the init pos\n * @param peerPubkey Peer's public key\n * @param userAddr Stake wallet address\n * @param pos Amount of pos to reduce\n * @param payer Payer of the transaction\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeReduceInitPosTx(\n    peerPubkey: string,\n    userAddr: Address,\n    pos: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('reduceInitPos', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\nexport function makeWithdrawPeerUnboundOngTx(\n    userAddr: Address,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n) {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('withdrawOng', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * If not set ifAuthorize or cost before, query result will be empty.\n * @param peerPubKey\n * @param url\n */\nexport async function getAttributes(peerPubKey: string, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(PEER_ATTRIBUTES) + peerPubKey;\n    const res = await restClient.getStorage(codeHash, key);\n    const result = res.Result;\n    if (result) {\n        return PeerAttributes.deserialize(new StringReader(result));\n    } else {\n        return new PeerAttributes();\n    }\n}\n\n/**\n * Get the reward fee of address\n * @param address User's address\n * @param url Node's restfull url\n */\nexport async function getSplitFeeAddress(address: Address, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(SPLIT_FEE_ADDRESS) + address.serialize();\n    const res = await restClient.getStorage(codeHash, key);\n    const result = res.Result;\n    if (result) {\n        return SplitFeeAddress.deserialize(new StringReader(result));\n    } else {\n        return new SplitFeeAddress();\n    }\n}\n\n/**\n * Get authorization of user's address\n * @param peerPubKey Peer's public key\n * @param address User's address\n * @param url Node's restful url\n */\nexport async function getAuthorizeInfo(peerPubKey: string, address: Address, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(AUTHORIZE_INFO_POOL) + peerPubKey + address.serialize();\n    const res = await restClient.getStorage(codeHash, key);\n    const result = res.Result;\n    if (result) {\n        return AuthorizeInfo.deserialize(new StringReader(result));\n    } else {\n        return new AuthorizeInfo();\n    }\n}\n\n/**\n * Query the governance view\n * @param url Url of restful api\n */\nexport async function getGovernanceView(url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr('governanceView');\n    const viewRes = await restClient.getStorage(codeHash, key);\n    const view = viewRes.Result;\n    const governanceView = GovernanceView.deserialize(new StringReader(view));\n    return governanceView;\n}\n\n/**\n * Query all the peer's state. The result is a map.\n * @param url Url of blockchain node\n */\nexport async function getPeerPoolMap(url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const governanceView = await getGovernanceView(url);\n    const key1 = str2hexstr('peerPool');\n    const key2 = num2hexstring(governanceView.view, 4, true);\n    const keyP = key1 + key2;\n    const res = await restClient.getStorage(codeHash, keyP);\n    const sr = new StringReader(res.Result);\n    const length = sr.readInt();\n    const result: any = {};\n    for (let i = 0; i < length; i++) {\n        const p = PeerPoolItem.deserialize(sr);\n        result[p.peerPubkey] = p;\n    }\n    return result;\n}\n\nexport async function getGlobalParam(url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(GLOBAL_PARAM);\n    const res = await restClient.getStorage(codeHash, key);\n    if (res.Result) {\n        return GlobalParam.deserialize(new StringReader(res.Result));\n    } else {\n        return new GlobalParam();\n    }\n\n}\n\nexport async function getTotalStake(userAddr: Address, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(TOTAL_STAKE) + userAddr.serialize();\n    const res = await restClient.getStorage(codeHash, key);\n    if (res.Result) {\n        return TotalStake.deserialize(new StringReader(res.Result));\n    } else {\n        return new TotalStake();\n    }\n}\n\nexport async function getPeerUnboundOng(userAddr: Address, url?: string) {\n    const totalStake = await getTotalStake(userAddr, url);\n    if (!totalStake.address) {\n        return 0;\n    }\n    const restClient = new RestClient(url);\n    const blockHeight = (await restClient.getBlockHeight()).Result;\n    const block = (await restClient.getBlockJson(blockHeight)).Result;\n    const timeStamp = block.Header.Timestamp - GENESIS_BLOCK_TIMESTAMP;\n    return calcUnboundOng(totalStake.stake, totalStake.timeOffset, timeStamp);\n}\n\n/**\n * Use to store governance state.\n */\nexport class GovernanceView {\n    static deserialize(sr: StringReader): GovernanceView {\n        const g = new GovernanceView();\n        g.view = sr.readUint32();\n        g.height = sr.readUint32();\n        g.txhash = sr.read(64); // uint256\n        return g;\n    }\n    view: number = 0;\n    height: number = 0;\n    txhash: string = '';\n\n    serialize(): string {\n        let result = '';\n        result += num2hexstring(this.view, 4, true);\n        result += num2hexstring(this.height, 4, true);\n        result += hex2VarBytes(this.txhash);\n        return result;\n    }\n}\n\n/**\n * Describs the peer's state in the pool.\n */\nexport class PeerPoolItem {\n    static deserialize(sr: StringReader): PeerPoolItem {\n        const p = new PeerPoolItem();\n        p.index = sr.readInt();\n        p.peerPubkey = hexstr2str(sr.readNextBytes());\n        p.address = Address.deserialize(sr);\n        p.status = parseInt(sr.read(1), 16);\n        p.initPos = sr.readLong();\n        p.totalPos = sr.readLong();\n        return p;\n    }\n\n    index: number = 0;\n    peerPubkey: string = '';\n    address: Address;\n    status: number = 0;\n    initPos: number = 0;\n    totalPos: number = 0;\n\n    serialize(): string {\n        let result = '';\n        result += num2hexstring(this.index, 4, true);\n        result += str2VarBytes(this.peerPubkey);\n        result += this.address.serialize();\n        result += num2hexstring(this.status);\n        result += num2hexstring(this.initPos, 8, true);\n        result += num2hexstring(this.totalPos, 8, true);\n        return result;\n    }\n}\n\nexport class PeerAttributes {\n    static deserialize(sr: StringReader): PeerAttributes {\n        const pr = new PeerAttributes();\n        pr.peerPubkey = hexstr2str(sr.readNextBytes());\n\n        pr.maxAuthorize = sr.readLong();\n\n        pr.t2PeerCost = sr.readLong();\n        pr.t1PeerCost = sr.readLong();\n        pr.tPeerCost = sr.readLong();\n\n        if (sr.isEmpty) {\n            return pr;\n        }\n        pr.field1 = sr.readNextBytes();\n        pr.field2 = sr.readNextBytes();\n        pr.field3 = sr.readNextBytes();\n        pr.field4 = sr.readNextBytes();\n\n        return pr;\n    }\n    peerPubkey: string = '';\n    maxAuthorize: number = 0;\n    t2PeerCost: number = 100; // peer cost, active in view T + 2\n    t1PeerCost: number = 100; // peer cost, active in view T + 1\n    tPeerCost: number = 0; // peer cost, active in view T\n    field1: string = '';\n    field2: string = '';\n    field3: string = '';\n    field4: string = '';\n\n    serialize(): string {\n        return '';\n    }\n}\n\nexport class SplitFeeAddress {\n    static deserialize(sr: StringReader) {\n        const sfa = new SplitFeeAddress();\n        sfa.address = Address.deserialize(sr);\n        sfa.amount = sr.readLong();\n        return sfa;\n    }\n\n    address: Address;\n    amount: number = 0;\n}\n\nexport class AuthorizeInfo {\n    static deserialize(sr: StringReader) {\n        const ai = new AuthorizeInfo();\n        ai.peerPubkey = hexstr2str(sr.readNextBytes());\n        ai.address = Address.deserialize(sr);\n        ai.consensusPos = sr.readLong();\n        ai.freezePos = sr.readLong();\n        ai.newPos = sr.readLong();\n        ai.withdrawPos = sr.readLong();\n        ai.withdrawFreezePos = sr.readLong();\n        ai.withdrawUnfreezePos = sr.readLong();\n        return ai;\n    }\n\n    peerPubkey: string = '';\n    address: Address;\n    consensusPos: number = 0;\n    freezePos: number = 0;\n    newPos: number = 0;\n    withdrawPos: number = 0;\n    withdrawFreezePos: number = 0;\n    withdrawUnfreezePos: number = 0;\n}\n\nexport class GlobalParam {\n    static deserialize(sr: StringReader) {\n        const gp = new GlobalParam();\n        const feeHexStr = sr.readNextBytes();\n        const candidateFeeStr = BigInt.fromHexstr(feeHexStr).value;\n        gp.candidateFee = Number(candidateFeeStr);\n        const minStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        gp.minInitState = Number(minStr);\n        const candidateNumStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const candidateNum = Number(candidateNumStr);\n        gp.candidateNum = candidateNum;\n        const posLimitStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        gp.posLimit = Number(posLimitStr);\n        const aStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const a = Number(aStr);\n        const bStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const b = Number(bStr);\n        const yStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const yita = Number(yStr);\n        const pStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const penalty = Number(pStr);\n        gp.A = a;\n        gp.B = b;\n        gp.yita = yita;\n        gp.penalty = penalty;\n        return gp;\n    }\n\n    candidateFee: number;\n    candidateNum: number;\n    minInitState: number;\n    posLimit: number;\n    A: number;\n    B: number;\n    yita: number;\n    penalty: number;\n}\n\nexport class TotalStake {\n    static deserialize(sr: StringReader): TotalStake {\n        const ts = new TotalStake();\n        ts.address = Address.deserialize(sr);\n        ts.stake = sr.readLong();\n        ts.timeOffset = sr.readUint32();\n        return ts;\n    }\n    address: Address;\n    stake: number;\n    timeOffset: number;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { BigNumber } from 'bignumber.js';\nimport BigInt from '../../common/bigInt';\nimport { Address } from '../../crypto/address';\nimport { ERROR_CODE } from '../../error';\nimport { hex2VarBytes, hexstr2str, num2hexstring, str2VarBytes, StringReader } from '../../utils';\n\nexport class Transfers {\n    static deserialize(sr: StringReader) {\n        const t = new Transfers();\n        // const version = sr.read(1);\n        // t.version = version;\n        const states = [];\n        const stateLen = sr.readNextLen();\n        for (let i = 0; i < stateLen; i++) {\n            const state = State.deserialize(sr);\n            states.push(state);\n        }\n        t.states = states;\n        return t;\n    }\n\n    // byte\n    // version : string\n    states: State[] = [];\n\n    constructor() {\n        // this.version = '00';\n    }\n\n    serialize() {\n        let result = '';\n        // result += this.version\n        result += num2hexstring(this.states.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.states.length; i++) {\n            result += this.states[i].serialize();\n        }\n        return result;\n    }\n}\n\nexport class TokenTransfer {\n    static deserialize(sr: StringReader) {\n        const tf = new TokenTransfer();\n        tf.states = [];\n        const contract = sr.read(20);\n        tf.contract = contract;\n\n        const len = sr.readNextLen();\n        for (let i = 0; i < len; i++) {\n            const state = State.deserialize(sr);\n            tf.states.push(state);\n        }\n        return tf;\n    }\n\n    // 20 bytes\n    contract: string;\n    states: State[];\n\n    serialize() {\n        let result = '';\n        result += this.contract;\n        const len = num2hexstring(this.states.length);\n        result += len;\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0 ; i < this.states.length; i++) {\n            result += this.states[i].serialize();\n        }\n        return result;\n    }\n}\n\nexport class State {\n    static deserialize(sr: StringReader) {\n        // const version = sr.read(1);\n        const from = new Address(sr.readNextBytes());\n        const to   = new Address(sr.readNextBytes());\n        // const value = (new BigNumber(sr.readNextBytes(), 16)).toString();\n        // const value = sr.read(8);\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\n\n        return new State(from, to, value.toString());\n    }\n\n    // byte\n    // version : string\n    // 20 bytes address\n    from: Address;\n    to: Address;\n    value: string;\n\n    constructor(from: Address, to: Address, value: string) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n\n    serialize() {\n        let result = '';\n        // result += this.version\n        result += hex2VarBytes(this.from.serialize());\n        result += hex2VarBytes(this.to.serialize());\n        const bi = new BigInt(this.value).toHexstr();\n        result += hex2VarBytes(bi);\n        return result;\n    }\n}\n\nexport class Contract {\n    static deserialize(sr: StringReader) {\n        const c = new Contract();\n        const version = sr.read(1);\n        const address = Address.deserialize(sr);\n        const method = sr.readNextBytes();\n        const args = sr.readNextBytes();\n        c.version = version;\n        c.address = address;\n        c.method = hexstr2str(method);\n        c.args = args;\n        return c;\n    }\n\n    // byte\n    version: string;\n\n    // 20 bytes\n    address: Address;\n\n    method: string;\n\n    // byte\n    args: string;\n\n    constructor() {\n        this.version = '00';\n    }\n\n    serialize() {\n        let result = '';\n        result += this.version;\n\n        result += this.address.serialize();\n\n        result += str2VarBytes(this.method);\n\n        result += hex2VarBytes(this.args);\n\n        return result;\n    }\n}\n\nexport class TransferFrom {\n    static deserialize(sr: StringReader): TransferFrom {\n        // const version = sr.read(1);\n        const sender = new Address(sr.readNextBytes());\n        const from = new Address(sr.readNextBytes());\n        const to = new Address(sr.readNextBytes());\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const tf = new TransferFrom(sender, from, to, value.toString());\n        return tf;\n    }\n\n    // version : string = '00'\n\n    sender: Address;\n\n    from: Address;\n\n    to: Address;\n\n    value: string;\n\n    constructor(sender: Address, from: Address, to: Address, value: string) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || !bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.sender = sender;\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n\n    serialize(): string {\n        let result = '';\n        // result += this.version\n        result += hex2VarBytes(this.sender.serialize());\n        result += hex2VarBytes(this.from.serialize());\n        result += hex2VarBytes(this.to.serialize());\n        const biHex = new BigInt(this.value).toHexstr();\n        result += hex2VarBytes(biHex);\n        return result;\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BigNumber } from 'bignumber.js';\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\nimport { Transaction } from '../../transaction/transaction';\nimport { str2hexstr } from '../../utils';\nimport { Parameter, ParameterType } from '../abi/parameter';\nimport { Address } from './../../crypto/address';\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\n\nconst functionNames = {\n    Init: 'init',\n    Transfer: 'transfer',\n    TransferMulti: 'transferMulti',\n    Approve: 'approve',\n    TransferFromm: 'transferFrom',\n    Allowance: 'allowance',\n    BalanceOf: 'balanceOf',\n    TotalSupply: 'totalSupply',\n    Symbol: 'symbol',\n    Decimals: 'decimals',\n    Name: 'name'\n};\n\nexport class Oep4State  {\n    from: string;\n    to: string;\n    amount: BigNumber;\n\n    constructor(from: Address, to: Address, amount: string) {\n        this.from = from.serialize();\n        this.to = to.serialize();\n        this.amount = new BigNumber(amount);\n    }\n}\n/**\n * Transaction builder for oep-4 contracts\n */\nexport class Oep4TxBuilder {\n\n    contractAddr: Address;\n\n    constructor(contractAddr: Address) {\n        this.contractAddr = contractAddr;\n    }\n\n    /**\n     * Init the oep-4 smart contract\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer's address to pay for gas\n     */\n    init(gasPrice: string, gasLimit: string, payer?: Address): Transaction {\n        const funcName = functionNames.Init;\n        return makeInvokeTransaction(funcName, [], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Make transaction for transfer\n     * @param from Sender's address\n     * @param to Receiver's address\n     * @param amount Amountof asset to transfer\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer's address to pay for gas\n     */\n    makeTransferTx(\n        from: Address,\n        to: Address,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const funcName = functionNames.Transfer;\n        const p1 = new Parameter('from', ParameterType.ByteArray, from.serialize());\n        const p2 = new Parameter('to', ParameterType.ByteArray, to.serialize());\n        const p3 = new Parameter('value', ParameterType.Long, amount);\n        return makeInvokeTransaction(funcName, [p1, p2, p3], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Make transaction for multi transfer.\n     * The transaction needs signatures of each sender in states and the signature of the payer.\n     * @param states Array of State(sender, receiver, amount)\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer to pay for gas\n     */\n    makeTransferMultiTx(\n        states: Oep4State[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const list = [];\n        list.push(str2hexstr(functionNames.TransferMulti));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.from,\n                state.to,\n                state.amount\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Make transaction for approve\n     * @param owner Owner's address\n     * @param spender Spender's address\n     * @param amount Amount\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer to pay for gas\n     */\n    makeApproveTx(\n        owner: Address,\n        spender: Address,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const funcName = functionNames.Approve;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferFromTx(\n        sender: Address,\n        from: Address,\n        to: Address,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const funcName = functionNames.TransferFromm;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, sender.serialize()),\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeQueryAllowanceTx(\n        owner: Address,\n        spender: Address\n    ): Transaction {\n        const funcName = functionNames.Allowance;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize())\n        ];\n        return makeInvokeTransaction(funcName, params, this.contractAddr);\n    }\n\n    /**\n     * Query the balance\n     * @param address Address to query balance\n     */\n    queryBalanceOf(address: Address): Transaction {\n        const funcName = functionNames.BalanceOf;\n        const p1 = new Parameter('from', ParameterType.ByteArray, address.serialize());\n\n        return makeInvokeTransaction(funcName, [p1], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    queryTotalSupply(): Transaction {\n        const funcName = functionNames.TotalSupply;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    queryDecimals(): Transaction {\n        const funcName = functionNames.Decimals;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    querySymbol(): Transaction {\n        const funcName = functionNames.Symbol;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    queryName(): Transaction {\n        const funcName = functionNames.Name;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\nimport { Transaction } from '../../transaction/transaction';\nimport { str2hexstr } from '../../utils';\nimport { Address } from './../../crypto/address';\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\nimport { Parameter, ParameterType } from './../abi/parameter';\n\nexport class Oep5Param {\n    public toAcct: string; // hex string\n    public tokenId: string; // hex string\n\n    public constructor(toAcct: Address, tokenId: string ) {\n        this.toAcct = toAcct.serialize();\n        this.tokenId = tokenId;\n    }\n}\n\nconst FunctionNames = {\n    Init: 'init',\n    Name: 'name',\n    Symbol: 'symbol',\n    TotalSupply: 'totalSupply',\n    BalanceOf: 'balanceOf',\n    OwnerOf: 'ownerOf',\n    Transfer: 'transfer',\n    TransferMulti: 'transferMulti',\n    Approve: 'approve',\n    ApproveMulti: 'approveMulti',\n    TakeOwnership: 'takeOwnership',\n    QueryTokenIDByIndex: 'queryTokenIDByIndex',\n    QueryTokenByID: 'queryTokenByID',\n    GetApproved: 'getApproved',\n    CreateMultiTokens: 'createMultiTokens',\n    CreateOneToken: 'createOneToken'\n};\n\nexport class Oep5TxBuilder {\n    contractAddr: Address;\n\n    constructor(contractAddr: Address) {\n        this.contractAddr = contractAddr;\n    }\n\n    makeInitTx(\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Init;\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeOwnerOfTx(\n        tokenId: string\n    ): Transaction {\n        const func = FunctionNames.OwnerOf;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    /**\n     * Transfer the control to someone else\n     * @param oep5Param\n     * @param gasPrice\n     * @param gasLimit\n     * @param payer\n     */\n    makeTransferTx(\n        oep5Param: Oep5Param,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Transfer;\n        const params = [\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Transfer the control to multi people\n     */\n    makeTransferMultiTx(\n        oep5Params: Oep5Param[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const list = [];\n        list.push(str2hexstr(FunctionNames.TransferMulti));\n        const temp = [];\n        for (const param of oep5Params) {\n            temp.push([\n                param.toAcct,\n                param.tokenId\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Approve the token to toAcct address, it can overwrite older approved address\n     * @param oep5Param\n     * @param gasPrice\n     * @param gasLimit\n     * @param payer\n     */\n    makeApproveTx(\n        oep5Param: Oep5Param,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Approve;\n        const params = [\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Take the approved token.\n     * @param oep5Param\n     * @param gasPrice\n     * @param gasLimit\n     * @param payer\n     */\n    makeTakeOwnershipTx(\n        oep5Param: Oep5Param,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.TakeOwnership;\n        const params = [\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeQueryBalanceOfTx(\n        addr: Address\n    ): Transaction {\n        const func = FunctionNames.BalanceOf;\n        const params = [\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize())\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTotalSupplyTx(): Transaction {\n        const func = FunctionNames.TotalSupply;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n    makeQueryTokenIDByIndexTx(\n        index: number\n    ): Transaction {\n        const func = FunctionNames.QueryTokenIDByIndex;\n        const params = [\n            new Parameter('index', ParameterType.Long, index)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTokenByIDTx(\n        tokenId: string\n    ): Transaction {\n        const func = FunctionNames.QueryTokenByID;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeGetApprovedTx(\n        tokenId: string\n    ): Transaction {\n        const func = FunctionNames.GetApproved;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryNameTx(): Transaction {\n        const func = FunctionNames.Name;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n    makeQuerySymbolTx(): Transaction {\n        const func = FunctionNames.Symbol;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Account } from './account';\nimport { Claim, retrievePublicKeyState } from './claim';\nimport * as CONST from './consts';\nimport * as Crypto from './crypto';\nimport { Identity } from './identity';\nimport * as NeoCore from './neocore';\nimport RestClient from './network/rest/restClient';\nimport RpcClient from './network/rpc/rpcClient';\nimport { WebsocketClient } from './network/websocket/websocketClient';\nimport * as scrypt from './scrypt';\nimport { SDK } from './sdk/index';\nimport AbiFunction from './smartcontract/abi/abiFunction';\nimport AbiInfo from './smartcontract/abi/abiInfo';\nimport { Parameter, ParameterType } from './smartcontract/abi/parameter';\nimport Struct from './smartcontract/abi/struct';\nimport * as GovernanceTxBuilder from './smartcontract/nativevm/governanceContractTxBuilder';\nimport * as OntAssetTxBuilder from './smartcontract/nativevm/ontAssetTxBuilder';\nimport * as OntidContract from './smartcontract/nativevm/ontidContractTxBuilder';\nimport * as Token from './smartcontract/nativevm/token';\nimport * as Oep4 from './smartcontract/neovm/oep4TxBuilder';\nimport * as Oep5 from './smartcontract/neovm/oep5TxBuilder';\nimport * as Oep8 from './smartcontract/neovm/oep8TxBuilder';\nimport { DDO, DDOAttribute } from './transaction/ddo';\nimport * as ScriptBuilder from './transaction/scriptBuilder';\nimport { Transaction } from './transaction/transaction';\nimport * as TransactionBuilder from './transaction/transactionBuilder';\nimport { Transfer } from './transaction/transfer';\nimport { TxSignature } from './transaction/txSignature';\nimport * as utils from './utils';\nimport { Wallet } from './wallet';\n\nclass ONT {\n    Account: any;\n    Identity: any;\n    Claim: any;\n    DDO: any;\n    DDOAttribute: any;\n    Transaction: any;\n    Transfer: any;\n    TxSignature: any;\n    TransactionBuilder: any;\n    OntAssetTxBuilder: any;\n    Parameter: any;\n    ParameterType: any;\n    AbiFunction: any;\n    AbiInfo: any;\n    utils: any;\n    scrypt: any;\n    CONST: any;\n    Wallet: any;\n    SDK: any;\n    Token: any;\n    OntidContract: any;\n    GovernanceTxBuilder: any;\n    RestClient: any;\n    RpcClient: any;\n    WebsocketClient: any;\n    Crypto: any;\n    Struct: any;\n    ScriptBuilder: any;\n    NeoCore: any;\n    Oep4: any;\n    Oep8: any;\n    Oep5: any;\n\n    constructor() {\n        this.Account = Account;\n        this.Identity = Identity;\n        this.Claim = Claim;\n        this.DDO = DDO;\n        this.DDOAttribute = DDOAttribute;\n        this.Transaction = Transaction;\n        this.Transfer = Transfer;\n        this.TxSignature = TxSignature;\n        this.TransactionBuilder = TransactionBuilder;\n        this.OntAssetTxBuilder = OntAssetTxBuilder;\n        this.GovernanceTxBuilder = GovernanceTxBuilder;\n        this.Parameter = Parameter;\n        this.ParameterType = ParameterType;\n        this.AbiFunction = AbiFunction;\n        this.AbiInfo = AbiInfo;\n        this.utils = utils;\n        this.scrypt = scrypt;\n        this.CONST = CONST;\n        this.Wallet = Wallet;\n        this.SDK = SDK;\n        this.Token = Token;\n        this.OntidContract = OntidContract;\n        this.RestClient = RestClient;\n        this.RpcClient = RpcClient;\n        this.WebsocketClient = WebsocketClient;\n        this.Crypto = Crypto;\n        this.Struct = Struct;\n        this.ScriptBuilder = ScriptBuilder;\n        this.NeoCore = NeoCore;\n        this.Oep4 = Oep4;\n        this.Oep8 = Oep8;\n        this.Oep5 = Oep5;\n    }\n    setNode(url: string) {\n        this.CONST.TEST_NODE = url;\n    }\n\n    setRpcPort(port: string) {\n        this.CONST.HTTP_JSON_PORT = port;\n    }\n\n    setRestPort(port: string) {\n        this.CONST.HTTP_REST_PORT = port;\n    }\n\n    setSocketPort(port: string) {\n        this.CONST.HTTP_WS_PORT = port;\n    }\n}\n\nexport default ONT;\n\nexport {\n    Account,\n    Identity,\n    Claim,\n    retrievePublicKeyState,\n    DDO,\n    DDOAttribute,\n    Transaction,\n    Transfer,\n    TxSignature,\n    Parameter,\n    ParameterType,\n    AbiFunction,\n    AbiInfo,\n    TransactionBuilder,\n    OntAssetTxBuilder,\n    GovernanceTxBuilder,\n    utils,\n    scrypt,\n    CONST,\n    Wallet,\n    SDK,\n    Token,\n    OntidContract,\n    RestClient,\n    RpcClient,\n    WebsocketClient,\n    Crypto,\n    Struct,\n    ScriptBuilder,\n    NeoCore,\n    Oep4,\n    Oep8,\n    Oep5\n};\n"],"sourceRoot":""}