{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"crypto-js\"","webpack:///external \"axios\"","webpack:///external \"bignumber.js\"","webpack:///external \"bip39\"","webpack:///external \"base64-url\"","webpack:///external \"sm.js\"","webpack:///external \"elliptic\"","webpack:///external \"bs58\"","webpack:///external \"js-sha3\"","webpack:///external \"long\"","webpack:///external \"secure-random\"","webpack:///external \"@ont-community/hdkey-secp256r1\"","webpack:///external \"wif\"","webpack:///external \"crypto\"","webpack:///external \"scrypt-async\"","webpack:///external \"milagro-crypto-js\"","webpack:///external \"@ont-community/html5-websocket\"","webpack:///external \"websocket-as-promised\"","webpack:///external \"uuid\"","webpack:///./src/consts.ts","webpack:///./src/error.ts","webpack:///./src/transaction/opcode.ts","webpack:///./src/utils.ts","webpack:///./src/common/bigInt.ts","webpack:///./src/crypto/SignatureScheme.ts","webpack:///./src/crypto/KeyType.ts","webpack:///./src/crypto/CurveLabel.ts","webpack:///./src/smartcontract/abi/parameter.ts","webpack:///./src/crypto/Key.ts","webpack:///./src/crypto/PublicKey.ts","webpack:///./src/transaction/program.ts","webpack:///./src/smartcontract/abi/struct.ts","webpack:///./src/transaction/scriptBuilder.ts","webpack:///./src/crypto/address.ts","webpack:///./src/scrypt.ts","webpack:///./src/crypto/Signature.ts","webpack:///./src/crypto/PrivateKey.ts","webpack:///./src/crypto/PrivateKeyFactory.ts","webpack:///./src/crypto/AnonymousCredential.ts","webpack:///./src/common/fixed64.ts","webpack:///./src/smartcontract/abi/abiFunction.ts","webpack:///./src/transaction/payload/payload.ts","webpack:///./src/transaction/payload/deployCode.ts","webpack:///./src/transaction/payload/invokeCode.ts","webpack:///./src/transaction/txAttribute.ts","webpack:///./src/transaction/transaction.ts","webpack:///./src/transaction/txSignature.ts","webpack:///./src/transaction/transfer.ts","webpack:///./src/transaction/transactionBuilder.ts","webpack:///./src/account.ts","webpack:///./src/network/rest/urlConsts.ts","webpack:///./src/network/rest/restClient.ts","webpack:///./src/network/websocket/deferred.ts","webpack:///./src/network/websocket/websocketSender.ts","webpack:///./src/network/websocket/websocketClient.ts","webpack:///./src/network/websocket/websocketBuilder.ts","webpack:///./src/smartcontract/abi/abiInfo.ts","webpack:///./src/smartcontract/neovm/attestClaimTxBuilder.ts","webpack:///./src/smartcontract/data/attestClaim.ts","webpack:///./src/claim/attestNotifyEvent.ts","webpack:///./src/smartcontract/abi/nativeVmParamsBuilder.ts","webpack:///./src/smartcontract/nativevm/ontidContractTxBuilder.ts","webpack:///./src/transaction/ddo.ts","webpack:///./src/claim/claim.ts","webpack:///./src/claim/message.ts","webpack:///./src/identity.ts","webpack:///./src/neocore/TransactionNeo.ts","webpack:///./src/neocore/InvocationTransaction.ts","webpack:///./src/neocore/NeoRpc.ts","webpack:///./src/neocore/Program.ts","webpack:///./src/neocore/SmartContract.ts","webpack:///./src/neocore/TransactionInput.ts","webpack:///./src/neocore/TransactionOutput.ts","webpack:///./src/network/rpc/rpcClient.ts","webpack:///./src/smartcontract/nativevm/ontAssetTxBuilder.ts","webpack:///./src/smartcontract/neovm/oep8TxBuilder.ts","webpack:///./src/wallet.ts","webpack:///./src/sdk/index.ts","webpack:///./src/smartcontract/nativevm/governanceContractTxBuilder.ts","webpack:///./src/smartcontract/nativevm/token.ts","webpack:///./src/smartcontract/neovm/oep4TxBuilder.ts","webpack:///./src/smartcontract/neovm/oep5TxBuilder.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ADDR_VERSION","DEFAULT_SCRYPT","cost","blockSize","parallel","size","OEP_HEADER","OEP_FLAG","WEBVIEW_SCHEME","DEFAULT_ALGORITHM","algorithm","parameters","curve","DEFAULT_SM2_ID","TEST_NODE","MAIN_NODE","HTTP_REST_PORT","HTTP_WS_PORT","HTTP_JSON_PORT","REST_API","getBalance","sendRawTx","getMerkleProof","ONT_NETWORK","MAIN","TEST","TEST_ONT_URL","SOCKET_URL","RPC_URL","REST_URL","sendRawTxByRestful","MAIN_ONT_URL","TOKEN_TYPE","ONT","ONG","DEFAULT_GAS_LIMIT","NATIVE_INVOKE_NAME","TX_MAX_SIG_SIZE","ONT_BIP44_PATH","UNBOUND_GENERATION_AMOUNT","UNBOUND_TIME_INTERVAL","ONT_TOTAL_SUPPLY","GENESIS_BLOCK_TIMESTAMP","ERROR_CODE","OPCODE","opcode","hexstring2ab","str","result","length","push","parseInt","substring","ab2hexstring","arr","uint8Arr","Uint8Array","byteLength","toString","ab2str","buf","String","fromCharCode","apply","str2ab","ArrayBuffer","bufView","strLen","charCodeAt","str2hexstr","hexstr2str","hex2VarBytes","hex","num2VarInt","str2VarBytes","bool2VarByte","v","hexXor","str1","str2","Error","result8","substr","num2hexstring","num","littleEndian","RangeError","Number","isSafeInteger","hexstring","repeat","reverseHex","out","bigIntFromBytes","bytes","buff","Buffer","from","data","Array","subarray","concat","fill","external_long_","bigIntToBytes","toBytesLE","negData","neg","stop","b","isNegative","pos","slice","StringReader","[object Object]","this","isEmpty","index","indexOf","bytesToRead","readNextLen","read","len","EventEmitter","handlers","type","handler","event","sendBackResult2Native","callback","window","prompt","axiosPost","url","params","external_axios_default","a","post","then","res","console","log","catch","err","JSON","stringify","now","Math","floor","Date","sha256","external_crypto_js_","Hex","parse","ripemd160","hash160","SignatureScript","generateRandomArray","external_secure_random_","randomBytes","generateMnemonic","random","external_bip39_","parseMnemonic","varifyPositiveInt","test","INVALID_PARAMS","isBase64","isHexString","unboundDeadline","count","numInterval","calcUnboundOng","balance","startOffset","endOffset","amount","UNBOUND_DEADLINE","ustart","istart","uend","iend","bigInt_BigInt","bi","external_bignumber_js_","isInteger","SignatureScheme","label","labelJWS","values","item","find","undefined","ECDSAwithSHA224","ECDSAwithSHA256","ECDSAwithSHA384","ECDSAwithSHA512","ECDSAwithSHA3_224","ECDSAwithSHA3_256","ECDSAwithSHA3_384","ECDSAwithSHA3_512","ECDSAwithRIPEMD160","SM2withSM3","EDDSAwithSHA512","KeyType","defaultSchema","ECDSA","SM2","EDDSA","CurveLabel","preset","SECP224R1","SECP256R1","SECP384R1","SECP521R1","SM2P256V1","ED25519","ParameterType","ParameterTypeVal","Key_KeyParameters","json","fromLabel","Key_Key","deserializeJson","msg","scheme","external_js_sha3_","external_sm_js_","sum","schema","serializeJson","PublicKey_PublicKey","sr","pk","algorithmHex","curveHex","fromHex","signature","isSchemaSupported","hash","getSignContent","computeHash","verifySignature","verifyEcDSASignature","verifyEdDSASignature","verifySM2Signature","external_elliptic_","verify","reader","id","readNullTerminated","SM2KeyPair","PublicKey_PublicKeyStatus","hexLabel","comparePublicKeys","ec","paKey","keyFromPublic","pbKey","pa","getPublic","pb","getX","getY","pka","pkb","_pubFromString","pushOpCode","op","pushBigInt","PUSHM1","PUSH0","PUSH1","pushNum","pushBytes","toHexstr","hexstr","PUSHBYTES75","PUSHBYTES1","PUSHDATA1","PUSHDATA2","PUSHDATA4","programFromPubKey","serializeHex","pushPubKey","CHECKSIG","programFromMultiPubKey","pubkeys","sort","CHECKMULTISIG","programFromParams","sigs","readOpcode","readBytes","code","keylen","readUint32","readUint16","readUint8","readPubKey","pkStr","readNextBytes","deserializeHex","IN_USE","REVOKED","ProgramInfo","Parameter","Struct","list","args","pushBool","param","PUSHT","PUSHF","pushInt","biHex","pushHexString","pushBigNum","isEqualTo","isGreaterThan","isLessThan","toNumber","getStructBytes","val","ByteArray","getMapBytes","Map","k","keys","getType","getValue","Integer","Long","pushMap","NEWMAP","TOALTSTACK","DUPFROMALTSTACK","pushParam","SETITEM","FROMALTSTACK","Boolean","BOOLOR","PACK","ADD","serializeAbiFunction","abiFunction","tmp","convertMap","createCodeParamsScript","convertArray","map","pVal","set","deserializeItem","readBoolean","ele","structBytes","buildSmartContractParam","functionName","mapBytes","buildWasmContractParam","pList","Int","IntArray","LongArray","Params","address_Address","publicKey","programHash","ontid","address","vmCode","publicKeys","fromPubKey","toBase58","hexToBase58","base58ToHex","hexEncoded","datas","external_bs58_","base58Encoded","scrypt","keyphrase","addressHash","derived","external_scrypt_async_","normalize","N","dkLen","encryptWithCtr","privateKey","publicKeyEncoded","scryptParams","getB58Checksum","derived1","derived2","iv","assembled","encrypt","CTR","padding","NoPadding","ciphertext","decryptWithCtr","encryptedKey","saltOrAddress","encrypted","salt","ciphertexts","decrypt","checkCtrDecrypted","Decrypto_ERROR","encryptWithEcb","addresshash","xor","ECB","decryptWithEcb","checkEcbDecrypted","decryptedKey","encryptWithGcm","aad","cipher","external_crypto_","setAAD","plainText","update","final","authTag","getAuthTag","decryptWithGcm","decipher","setAuthTag","decrypted","Signature_Signature","encoded","publicKeyId","decoded","external_base64_url_","pgpSignature","Value","deserialzedValue","Algorithm","sigScheme","keyId","PublicKeyId","Format","HDKey","PrivateKey_PrivateKey","keyType","wifkey","external_wif_","mnemonic","derivePath","split","seed","pri","fromMasterSeed","derive","signed","computeSignature","sign","getEcDSAPublicKey","getEdDSAPublicKey","getSM2PublicKey","getPublicKey","INVALID_ADDR","keyFromPrivate","keyFromSecret","pubToString","computeEcDSASignature","computeEdDSASignature","computeSM2Signature","canonical","toArrayLike","R","S","keyDeserializers","defaultKeyDeserializer","registerKeyDeserializer","deserializer","deserializeFromJson","external","deserialize","Issuer","AnonymousCredential_CryptoSuite","sk","SecretKey","Rand","GenerateSk","GenerateIssuerPublicKey","AttributeName","GenerateAttr","Nym","attrs","e","getRandBN","B","ECP","copy","g1","add","PAIR","G1mul","h0","attr","h","A","BIG","invmodp","order","cred","Credential","Set","IssuerPublicKey","COPY","CR","VerifyCredentialRequest","User","ipk","nonce","h_sk","t1","C","hashToBN","modmul","mod","pi","genAttrBN","Cred","wg2e","ECP2","w","G2mul","g2","sig","affine","left","ate","fexp","right","equals","Copy","D","r1","A_","r3","_e","modneg","_A","r2","_r2","B_","s_","r_a","r_e","r_r2","r_r3","r_s_","r_sk","E","t2","c_","s_sk","s_a","sub","s_e","s_r2","s_r3","s_s_","proof","O","g2Dup","_t1","_t2","c1","c2","comp","ctx","external_milagro_crypto_js_","rng","RAND","getG1Generator","getG2Generator","getOrder","x","y","rcopy","ROM_CURVE","CURVE_Gx","CURVE_Gy","setxy","qx","FP2","qy","CURVE_Pxa","CURVE_Pxb","bset","CURVE_Pya","CURVE_Pyb","CURVE_Order","clean","randomnum","points","all","forEach","isArray","pp","toBytes","H","HASH256","process_array","fromBytes","HAttr","getRandG1","CryptoBase","setValue","super","_g1","_g2","SetBasicValue","target","SetAttrValue","genAttrElement","_C","Fixed64Size","fixed64_Fixed64","f","AbiFunction","returntype","getName","j","Payload","deployCode_DeployCode","needStorage","version","author","email","description","boolValue","codeVersion","invokeCode_InvokeCode","TransactionAttributeUsage","TxType","txAttribute_TransactionAttribute","usage","Script","DescriptionUrl","Description","Nonce","ss","dataLen","txSignature_TxSignature","invocationScript","verificationScript","sigData","getParamsFromProgram","info","end","M","pubKeys","getProgramInfo","signAsync","transaction_Transaction","txAttributes","gasPrice","gasLimit","payer","tx","payload","Invoke","Deploy","attributeLength","txAttribute","sigLength","serializeUnsignedData","serializeSignedData","serialize","ProgramHexString","ProgramSha256","transfer_Transfer","Default_params","Action","Version","Type","Op","signTransaction","signTransactionAsync","async","createAsync","addSign","equalPks","pks1","pks2","signTx","signData","makeNativeContractTx","funcName","contractAddr","SYSCALL","makeInvokeTransaction","abiFunc","APPCALL","makeDeployCodeTransaction","desp","dc","buildTxParam","isPreExec","PreExec","serialized","assign","Data","buildRpcParam","method","jsonrpc","buildRestfulParam","sendRawTxRestfulUrl","preExec","charAt","restUrl","account_HDKey","account_Account","encryptedPrivateKey","password","saltBase64","account","lock","isDefault","trim","parseJsonObj","obj","extra","toJsonObj","_extends","enc-alg","signatureScheme","exportPrivateKey","urlConsts","Url_send_transaction","Url_get_transaction","Url_get_generate_block_time","Url_get_node_count","Url_get_block_height","Url_get_block_by_height","Url_get_block_by_hash","Url_get_account_balance","Url_get_contract_state","Url_get_smartcodeevent_txs_by_height","Url_get_smartcodeevent_by_txhash","Url_get_block_height_by_txhash","Url_get_storage","Url_get_merkleproof","Url_get_allowance","restClient_RestClient","action","encodeURIComponent","hexData","userId","concatParams","body","txHash","codeHash","asset","to","toLowerCase","Deferred","resolve","_resolve","reject","reason","_reject","_promise","Promise","promise","websocketSender_WebsocketSender","debug","wsp","external_websocket_as_promised_","createWebSocket","socketUrl","html5_websocket_","attachRequestId","websocketSender_extends","Id","extractRequestId","packMessage","unpackMessage","message","onOpen","addListener","onClose","onSend","onMessage","onError","close","open","sendRequest","requestId","generateReqId","listener","onUnpackedMessage","websocketClient_WebsocketClient","autoClose","promises","sender","notifyListener","raw","send","subscribeEvent","subscribeJsonBlock","subscribeRawBlock","subscribeBlockTxHashes","SubscribeEvent","SubscribeJsonBlock","SubscribeRawBlock","SubscribeBlockTxHashs","sendSubscribe","waitNotify","sendRawTransaction","sendResult","Result","deferred","Hash","Raw","getRawTransaction","getRawTransactionJson","Height","getBlock","getBlockJson","Addr","getUnboundOng","getContract","getContractJson","getSmartCodeEvent","getBlockHeightByTxHash","Key","getStorage","Asset","From","To","getAllowance","height","getBlockHash","getBlockTxsByHeight","getGrantOng","getMempoolTxState","TxHash","delete","warn","abiInfo_AbiInfo","functions","entrypoint","attestClaimTxBuilder_abiInfo","parseJson","events","attestClaimTxBuilder_contractHash","getHash","replace","contractAddress","AttestNotifyEvent","Desc","attestNotifyEvent_Result","State","GasConsumed","Notify","ContractAddress","States","createCodeParamScript","SWAP","APPEND","buildNativeCodeScript","NEWSTRUCT","isTypedArray","ONTID_CONTRACT","ONTID_METHOD","regIDWithPublicKey","regIDWithAttributes","addAttributes","removeAttribute","getAttributes","getDDO","addKey","removeKey","getPublicKeys","addRecovery","changeRecovery","getKeyState","buildRegisterOntidTx","struct","buildRegIdWithAttributes","attributes","attrLen","buildAddAttributeTx","buildRemoveAttributeTx","buildGetAttributesTx","buildGetDDOTx","buildAddControlKeyTx","newPk","userKey","p1","p2","p3","buildRemoveControlKeyTx","pk2Remove","buildGetPublicKeysTx","buildAddRecoveryTx","recovery","buildChangeRecoveryTx","newrecovery","oldrecovery","buildGetPublicKeyStateTx","pkId","ddo_PublicKeyWithId","ddo_DDOAttribute","ddo_DDO","ddo","pkLen","recoveryLen","RevocationType","Status","message_Message","jwt","creator","parts","header","deserializeHeader","deserializePayload","deserializeJWT","metadata","payloadFromJSON","rest","stringified","_JSON$parse","jti","iss","iat","exp","messageId","issuer","subject","issuedAt","expireAt","_objectWithoutProperties","alg","fromLabelJWS","kid","external_uuid_","retrievePublicKey","serializeUnsigned","verifyKeyOwnership","verifyExpiration","ontId","extractOntId","extractKeyId","client","response","fromHexLabel","retrievePublicKeyState","serializeHeader","serializePayload","signatureEncoded","serializeJWT","typ","payloadToJSON","message_extends","claim_Claim","deserializeInternal","useProof","checkAttest","getStatus","serializeProof","attesterId","subjectId","claimId","getFunction","buildCommitRecordTx","revokerOntid","name1","type1","buildRevokeRecordTx","buildGetRecordStatusTx","claim_GetStatusResponse","status","ATTESTED","issuerId","ver","@context","context","clm","content","clm-rev","revocation","NOTFOUND","identity_ControlData","cd","identity_extends","identity_Identity","controls","identity","generateOntid","control","fromOntid","fromJson","toJson","TransactionNeo_TransactionNeo","scripts","serializeExclusiveData","inputs","outputs","getHashData","InvocationTransaction_InvocationTransaction","script","gas","NeoRpc_NeoRpc","req","makeRequest","toHexString","Program_Program","program","parameter","pks","SmartContract_SmartContract","addr","makeInvocationTransaction","attr1","attr2","TransactionInput_TransactionInput","input","prevHash","prevIndex","TransactionOutput_TransactionOutput","output","assetId","readLong","scriptHash","rpcClient_RpcClient","ONT_CONTRACT","ONG_CONTRACT","getTokenContract","tokenType","verifyAmount","lte","makeTransferTx","contract","makeWithdrawOngTx","makeQueryAllowanceTx","makeQueryBalanceTx","deserializeTransferTx","contractIndex1","lastIndexOf","contractIndex2","contractIndex","max","paramsEnd","methodStr","numTmp","fromHexstr","oep8TxBuilder_Oep8State","tokenId","oep8TxBuilder_TransferFrom","spender","FunctionNames","Name","TotalSupply","BalanceOf","Transfer","TransferMulti","Approve","ApproveMulti","Allowance","TransferFrom","TransferFromMulti","Compound","Concatkey","Init","CreateMultiKindsPumpkin","CheckTokenPrefix","BalancesOf","TotalBalanceOf","CheckTokenId","oep8TxBuilder_Oep8TxBuilder","func","sendAddr","recvAddr","states","temp","state","owner","compoundNum","wallet_Wallet","defaultOntid","defaultAccountAddress","identities","accounts","wallet","createTime","toISOString","ac","sdk_HDKey","CONTRACT_HASH","NEO_NODE","NEP5_ABI","NEO_TRAN","sdk_SDK","node","SERVER_NODE","port","REST_PORT","restClient","SOCKET_PORT","error","transformPassword","addIdentity","errResult","PreExec_ERROR","NETWORK_ERROR","encryptedPrivateKeyObj","importIdentity","getDecryptError","SUCCESS","UNKNOWN_ONTID","walletStr","mnemonicHex","generateFromMnemonic","mnemonicEnc","decMne","importAccount","claimData","saltHex","claim","path","valueObj","Context","serializePgp","addressObj","request","token","fromAddress","toAddress","identityDataStr","accountDataStr","wif","serializeWIF","deserializeWIF","keystore","keyStoreObj","requiredSignatureNum","allRelatedPks","pubs","fromMultiPubKeys","txData","txDada","signedHash","recv","abiInfo","setParamsValue","contractHash","oep8","makeQueryBalanceOfTx","makeQueryBalancesTx","vals","makeQueryTotalBalanceTx","payerAddress","makeCompoundTx","PEER_ATTRIBUTES","SPLIT_FEE_ADDRESS","AUTHORIZE_INFO_POOL","GLOBAL_PARAM","TOTAL_STAKE","governanceContractTxBuilder_contractAddress","makeRegisterCandidateTx","peerPubKey","keyNo","userAddr","initPos","makeUnregisterCandidateTx","makeApproveCandidateTx","makeRejectCandidateTx","makeVoteForPeerTx","peerPubKeys","posList","makeUnvoteForPeerTx","makeWithdrawTx","withdrawList","makeQuitNodeTx","makeChangeAuthorizationTx","maxAuthorize","makeSetPeerCostTx","peerCost","makeWithdrawFeeTx","makeAuthorizeForPeerTx","peerPubKeyList","makeUnauthorizeForPeerTx","makeAddInitPosTx","peerPubkey","makeReduceInitPosTx","makeWithdrawPeerUnboundOngTx","governanceContractTxBuilder_PeerAttributes","getSplitFeeAddress","governanceContractTxBuilder_SplitFeeAddress","getAuthorizeInfo","governanceContractTxBuilder_AuthorizeInfo","getGovernanceView","view","governanceContractTxBuilder_GovernanceView","getPeerPoolMap","governanceView","keyP","readInt","governanceContractTxBuilder_PeerPoolItem","getGlobalParam","governanceContractTxBuilder_GlobalParam","getTotalStake","governanceContractTxBuilder_TotalStake","getPeerUnboundOng","totalStake","blockHeight","getBlockHeight","timeStamp","Header","Timestamp","stake","timeOffset","txhash","g","totalPos","t2PeerCost","t1PeerCost","tPeerCost","field1","field2","field3","field4","pr","sfa","consensusPos","freezePos","newPos","withdrawPos","withdrawFreezePos","withdrawUnfreezePos","ai","gp","feeHexStr","candidateFeeStr","candidateFee","minStr","minInitState","candidateNumStr","candidateNum","posLimitStr","posLimit","aStr","bStr","yStr","yita","pStr","penalty","ts","token_Transfers","stateLen","token_State","token_TokenTransfer","tf","token_Contract","token_TransferFrom","functionNames","TransferFromm","Decimals","oep4TxBuilder_Oep4State","oep4TxBuilder_Oep4TxBuilder","Oep5Param","toAcct","oep5TxBuilder_FunctionNames","OwnerOf","TakeOwnership","QueryTokenIDByIndex","QueryTokenByID","GetApproved","CreateMultiTokens","CreateOneToken","oep5TxBuilder_Oep5TxBuilder","oep5Param","oep5Params","__webpack_exports__","Account","Identity","Claim","DDO","DDOAttribute","Transaction","TxSignature","TransactionBuilder","transactionBuilder_namespaceObject","OntAssetTxBuilder","ontAssetTxBuilder_namespaceObject","GovernanceTxBuilder","governanceContractTxBuilder_namespaceObject","AbiInfo","utils","utils_namespaceObject","scrypt_namespaceObject","CONST","consts_namespaceObject","Wallet","SDK","Token","token_namespaceObject","OntidContract","ontidContractTxBuilder_namespaceObject","RestClient","RpcClient","WebsocketClient","Crypto","crypto_namespaceObject","ScriptBuilder","scriptBuilder_namespaceObject","NeoCore","neocore_namespaceObject","Oep4","oep4TxBuilder_namespaceObject","Oep8","oep8TxBuilder_namespaceObject","Oep5","oep5TxBuilder_namespaceObject"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","module.exports = require(\"crypto-js\");","module.exports = require(\"axios\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"bip39\");","module.exports = require(\"base64-url\");","module.exports = require(\"sm.js\");","module.exports = require(\"elliptic\");","module.exports = require(\"bs58\");","module.exports = require(\"js-sha3\");","module.exports = require(\"long\");","module.exports = require(\"secure-random\");","module.exports = require(\"@ont-community/hdkey-secp256r1\");","module.exports = require(\"wif\");","module.exports = require(\"crypto\");","module.exports = require(\"scrypt-async\");","module.exports = require(\"milagro-crypto-js\");","module.exports = require(\"@ont-community/html5-websocket\");","module.exports = require(\"websocket-as-promised\");","module.exports = require(\"uuid\");","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// export const ADDR_VERSION = '41';\nexport const ADDR_VERSION = '17';\n\nexport const DEFAULT_SCRYPT = {\n    cost: 4096, // 除以2时间减半\n    blockSize: 8,\n    parallel: 8,\n    size: 64\n};\n\n// specified by oep, same as bip38\nexport const OEP_HEADER = '0142';\n\nexport const OEP_FLAG = 'e0';\n\n// Ont://nativeMethod?param1=xxx&param2=yyy\nexport const WEBVIEW_SCHEME = 'Ont';\n\nexport const DEFAULT_ALGORITHM = {\n    algorithm: 'ECDSA',\n    parameters: {\n        curve: 'P-256' // also called secp256r1\n    }\n};\n\nexport const DEFAULT_SM2_ID = '1234567812345678';\n\nexport const TEST_NODE = 'polaris1.ont.io'; // 0.9\n// export const TEST_NODE = '139.219.129.26'; // 0.81\n// export const TEST_NODE = '192.168.50.74';\n// export const TEST_NODE = '127.0.0.1';\n\nexport const MAIN_NODE = 'dappnode1.ont.io';\n\nexport const HTTP_REST_PORT = '20334';\nexport const HTTP_WS_PORT = '20335';\nexport const HTTP_JSON_PORT = '20336';\n\nexport const REST_API = {\n    getBalance: '/api/v1/balance',\n    sendRawTx: '/api/v1/transaction',\n    getMerkleProof: '/api/v1/merkleproof' // end with /txHash\n};\n\nexport const ONT_NETWORK = {\n    MAIN: 'MainNet',\n    TEST: 'TestNet'\n};\n\nexport const TEST_ONT_URL = {\n    SOCKET_URL: `ws://${TEST_NODE}:${HTTP_WS_PORT}`,\n\n    RPC_URL: `http://${TEST_NODE}:${HTTP_JSON_PORT}`,\n\n    REST_URL: `http://${TEST_NODE}:${HTTP_REST_PORT}`,\n\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\n};\n\nexport const MAIN_ONT_URL = {\n    SOCKET_URL: `ws://${MAIN_NODE}:${HTTP_WS_PORT}`,\n\n    RPC_URL: `http://${MAIN_NODE}:${HTTP_JSON_PORT}/`,\n\n    REST_URL: `http://${MAIN_NODE}:${HTTP_REST_PORT}/`,\n\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\n\n};\n\nexport const TOKEN_TYPE = {\n    ONT: 'ONT',\n    ONG: 'ONG'\n};\n\nexport const DEFAULT_GAS_LIMIT = 30000;\n\nexport const NATIVE_INVOKE_NAME = 'Ontology.Native.Invoke';\n\nexport const TX_MAX_SIG_SIZE = 16;\n\n// tslint:disable-next-line:quotemark\nexport const ONT_BIP44_PATH = \"m/44'/1024'/0'/0/0\";\n\nexport const UNBOUND_GENERATION_AMOUNT = [5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n\nexport const UNBOUND_TIME_INTERVAL = 31536000;\n\nexport const ONT_TOTAL_SUPPLY = 1000000000;\n\nexport const GENESIS_BLOCK_TIMESTAMP = 1530316800;\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport enum ERROR_CODE {\n    SUCCESS\t            =     0, // 成功\n    SESSION_EXPIRED     = 41001,   // 会话无效或已过期（ 需要重新登录） |\n    SERVICE_CEILING     = 41002,   // 达到服务上限 |\n    ILLEGAL_DATAFORMAT  = 41003,   // 不合法数据格式 |\n    INVALID_VERSION     = 41004,   // 不合法的版本 |\n    INVALID_METHOD      = 42001,   // 无效的方法 |\n    INVALID_PARAMS      = 42002,   // 无效的参数 |\n    INVALID_TRANSACTION = 43001,   // 无效的交易 |\n    INVALID_ASSET       = 43002,   // 无效的资产 |\n    INVALID_BLOCK       = 43003,   // 无效的块 |\n    UNKNOWN_TRANSACTION = 44001,   // 找不到交易 |\n    UNKNOWN_ASSET       = 44002,   // 找不到资产 |\n    UNKNOWN_BLOCK       = 44003,   // 找不到块 |\n    UNKNWN_CONTRACT     = 44004,   // 找不到合约 |\n    INTERNAL_ERROR      = 45001,   // 内部错误 |\n    SMARTCODE_ERROR     = 47001,   // 智能合约错误 |\n\n    UNKNOWN_ONTID       = 51000,   // 不存在的ONT ID,\n    NETWORK_ERROR       = 52000,   // 网络错误,\n    Decrypto_ERROR      = 53000,    // 解密错误,\n    INVALID_ADDR        = 53001,   // 地址验证失败\n\n    PreExec_ERROR = 54000   // 预执行错误\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nenum OPCODE {\n    // Constants\n    PUSH0 = 0x00, // An empty array of bytes is pushed onto the stack.\n    PUSHF = PUSH0,\n    PUSHBYTES1 = 0x01, // 0x01-0x4B The next bytes is data to be pushed onto the stack\n    PUSHBYTES75 = 0x4B,\n    PUSHDATA1 = 0x4C, // The next byte contains the number of bytes to be pushed onto the stack.\n    PUSHDATA2 = 0x4D, // The next two bytes contain the number of bytes to be pushed onto the stack.\n    PUSHDATA4 = 0x4E, // The next four bytes contain the number of bytes to be pushed onto the stack.\n    PUSHM1 = 0x4F, // The number -1 is pushed onto the stack.\n    PUSH1 = 0x51, // The number 1 is pushed onto the stack.\n    PUSHT = PUSH1,\n    PUSH2 = 0x52, // The number 2 is pushed onto the stack.\n    PUSH3 = 0x53, // The number 3 is pushed onto the stack.\n    PUSH4 = 0x54, // The number 4 is pushed onto the stack.\n    PUSH5 = 0x55, // The number 5 is pushed onto the stack.\n    PUSH6 = 0x56, // The number 6 is pushed onto the stack.\n    PUSH7 = 0x57, // The number 7 is pushed onto the stack.\n    PUSH8 = 0x58, // The number 8 is pushed onto the stack.\n    PUSH9 = 0x59, // The number 9 is pushed onto the stack.\n    PUSH10 = 0x5A, // The number 10 is pushed onto the stack.\n    PUSH11 = 0x5B, // The number 11 is pushed onto the stack.\n    PUSH12 = 0x5C, // The number 12 is pushed onto the stack.\n    PUSH13 = 0x5D, // The number 13 is pushed onto the stack.\n    PUSH14 = 0x5E, // The number 14 is pushed onto the stack.\n    PUSH15 = 0x5F, // The number 15 is pushed onto the stack.\n    PUSH16 = 0x60, // The number 16 is pushed onto the stack.\n\n    // Flow control\n    NOP = 0x61, // Does nothing.\n    JMP = 0x62,\n    JMPIF = 0x63,\n    JMPIFNOT = 0x64,\n    CALL = 0x65,\n    RET = 0x66,\n    APPCALL = 0x67,\n    SYSCALL = 0x68,\n    TAILCALL = 0x69,\n    DUPFROMALTSTACK = 0x6A,\n\n    // Stack\n    TOALTSTACK = 0x6B, // Puts the input onto the top of the alt stack. Removes it from the main stack.\n    FROMALTSTACK = 0x6C, // Puts the input onto the top of the main stack. Removes it from the alt stack.\n    XDROP = 0x6D,\n    XSWAP = 0x72,\n    XTUCK = 0x73,\n    DEPTH = 0x74, // Puts the number of stack items onto the stack.\n    DROP = 0x75, // Removes the top stack item.\n    DUP = 0x76, // Duplicates the top stack item.\n    NIP = 0x77, // Removes the second-to-top stack item.\n    OVER = 0x78, // Copies the second-to-top stack item to the top.\n    PICK = 0x79, // The item n back in the stack is copied to the top.\n    ROLL = 0x7A, // The item n back in the stack is moved to the top.\n    ROT = 0x7B, // The top three items on the stack are rotated to the left.\n    SWAP = 0x7C, // The top two items on the stack are swapped.\n    TUCK = 0x7D, // The item at the top of the stack is copied and inserted before the second-to-top item.\n\n    // Splice\n    CAT = 0x7E, // Concatenates two strings.\n    SUBSTR = 0x7F, // Returns a section of a string.\n    LEFT = 0x80, // Keeps only characters left of the specified point in a string.\n    RIGHT = 0x81, // Keeps only characters right of the specified point in a string.\n    SIZE = 0x82, // Returns the length of the input string.\n\n    // Bitwise logic\n    INVERT = 0x83, // Flips all of the bits in the input.\n    AND = 0x84, // Boolean and between each bit in the inputs.\n    OR = 0x85, // Boolean or between each bit in the inputs.\n    XOR = 0x86, // Boolean exclusive or between each bit in the inputs.\n    EQUAL = 0x87, // Returns 1 if the inputs are exactly equal, 0 otherwise.\n    // EQUALVERIFY = 0x88, // Same as EQUAL, but runs VERIFY afterward.\n    // RESERVED1 = 0x89, // Transaction is invalid unless occuring in an unexecuted IF branch\n    // RESERVED2 = 0x8A, // Transaction is invalid unless occuring in an unexecuted IF branch\n\n    // Arithmetic\n    // Note: Arithmetic inputs are limited to signed 32-bit integers, but may overflow their output.\n    INC = 0x8B, // 1 is added to the input.\n    DEC = 0x8C, // 1 is subtracted from the input.\n    // SAL           = 0x8D, // The input is multiplied by 2.\n    // SAR           = 0x8E, // The input is divided by 2.\n    NEGATE = 0x8F, // The sign of the input is flipped.\n    ABS = 0x90, // The input is made positive.\n    NOT = 0x91, // If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\n    NZ = 0x92, // Returns 0 if the input is 0. 1 otherwise.\n    ADD = 0x93, // a is added to b.\n    SUB = 0x94, // b is subtracted from a.\n    MUL = 0x95, // a is multiplied by b.\n    DIV = 0x96, // a is divided by b.\n    MOD = 0x97, // Returns the remainder after dividing a by b.\n    SHL = 0x98, // Shifts a left b bits, preserving sign.\n    SHR = 0x99, // Shifts a right b bits, preserving sign.\n    BOOLAND = 0x9A, // If both a and b are not 0, the output is 1. Otherwise 0.\n    BOOLOR = 0x9B, // If a or b is not 0, the output is 1. Otherwise 0.\n    NUMEQUAL = 0x9C, // Returns 1 if the numbers are equal, 0 otherwise.\n    NUMNOTEQUAL = 0x9E, // Returns 1 if the numbers are not equal, 0 otherwise.\n    LT = 0x9F, // Returns 1 if a is less than b, 0 otherwise.\n    GT = 0xA0, // Returns 1 if a is greater than b, 0 otherwise.\n    LTE = 0xA1, // Returns 1 if a is less than or equal to b, 0 otherwise.\n    GTE = 0xA2, // Returns 1 if a is greater than or equal to b, 0 otherwise.\n    MIN = 0xA3, // Returns the smaller of a and b.\n    MAX = 0xA4, // Returns the larger of a and b.\n    WITHIN = 0xA5, // Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\n\n    // Crypto\n    // RIPEMD160 = 0xA6, // The input is hashed using RIPEMD-160.\n    SHA1 = 0xA7, // The input is hashed using SHA-1.\n    SHA256 = 0xA8, // The input is hashed using SHA-256.\n    HASH160 = 0xA9,\n    HASH256 = 0xAA,\n    // tslint:disable-next-line:max-line-length\n    CHECKSIG = 0xAC, // The entire transaction's outputs inputs and script (from the most recently-executed CODESEPARATOR to the end) are hashed. The signature used by CHECKSIG must be a valid signature for this hash and public key. If it is 1 is returned 0 otherwise.\n    // tslint:disable-next-line:max-line-length\n    CHECKMULTISIG = 0xAE, // For each signature and public key pair CHECKSIG is executed. If more public keys than signatures are listed some key/sig pairs can fail. All signatures need to match a public key. If all signatures are valid 1 is returned 0 otherwise. Due to a bug one extra unused value is removed from the stack.\n\n    // Array\n\t// tslint:disable:indent\n    ARRAYSIZE  = 0xC0,\n\tPACK       = 0xC1,\n\tUNPACK     = 0xC2,\n\tPICKITEM   = 0xC3,\n\tSETITEM    = 0xC4,\n\tNEWARRAY   = 0xC5,\n\tNEWSTRUCT  = 0xC6,\n\tNEWMAP     = 0xC7,\n\tAPPEND     = 0xC8,\n\tREVERSE    = 0xC9,\n\tREMOVE     = 0xCA,\n\tHASKEY     = 0xCB,\n\tKEYS       = 0xCC,\n\tVALUES     = 0xCD,\n\n\t// Exception\n\tTHROW = 0xF0,\n\tTHROWIFNOT = 0xF1\n}\n\nexport default OPCODE;\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport axios from 'axios';\nimport * as bip39 from 'bip39';\nimport * as cryptoJS from 'crypto-js';\nimport * as Long from 'long';\nimport * as secureRandom from 'secure-random';\nimport { ONT_TOTAL_SUPPLY, UNBOUND_GENERATION_AMOUNT, UNBOUND_TIME_INTERVAL, WEBVIEW_SCHEME } from './consts';\nimport { ERROR_CODE } from './error';\n/**\n * Turn hex string into array buffer\n * @param str hex string\n */\nexport function hexstring2ab(str: string): number[] {\n    const result = [];\n\n    while (str.length >= 2) {\n        result.push(parseInt(str.substring(0, 2), 16));\n        str = str.substring(2, str.length);\n    }\n\n    return result;\n}\n\n/**\n * Turn array buffer into hex string\n * @param arr Array like value\n */\nexport function ab2hexstring(arr: any): string {\n    let result: string = '';\n    const uint8Arr: Uint8Array = new Uint8Array(arr);\n    for (let i = 0; i < uint8Arr.byteLength; i++) {\n        let str = uint8Arr[i].toString(16);\n        str = str.length === 0\n            ? '00'\n            : str.length === 1\n                ? '0' + str\n                : str;\n        result += str;\n    }\n    return result;\n}\n\n /**\n  * Turn ArrayBuffer or array-like oject into normal string\n  * @param buf\n  */\nexport function ab2str(buf: ArrayBuffer | number[]): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\n}\n\n/**\n * Turn normal string into ArrayBuffer\n * @param str Normal string\n */\nexport function str2ab(str: string) {\n    const buf = new ArrayBuffer(str.length); // 每个字符占用1个字节\n    const bufView = new Uint8Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n}\n\n/**\n * Turn normal string into hex string\n * @param str Normal string\n */\nexport function str2hexstr(str: string) {\n    return ab2hexstring(str2ab(str));\n}\n\n/**\n * Turn hex string into normal string\n * @param str Hex string\n */\nexport function hexstr2str(str: string) {\n    return ab2str(hexstring2ab(str));\n}\n\n/**\n * return the (length of bytes) + bytes\n * @param hex Hex string\n */\nexport function hex2VarBytes(hex: string) {\n    let result = '';\n    result += num2VarInt(hex.length / 2);\n    result += hex;\n    return result;\n}\n\n/**\n * return the length of string(bytes) + string(bytes)\n * @param str Normal string\n */\nexport function str2VarBytes(str: string) {\n    let result = '';\n    const hex = str2hexstr(str);\n    const hexLen = num2VarInt(hex.length / 2);\n    result += hexLen;\n    result += hex;\n    return result;\n}\n\n/**\n * return the byte of boolean value\n * @param v\n */\nexport function bool2VarByte(v: boolean) {\n    return v ? '01' : '00';\n}\n\n/**\n * Do xor operation with two strings\n * @param str1 Hex string\n * @param str2 Hex string\n */\nexport function hexXor(str1: string, str2: string): string {\n    if (str1.length !== str2.length) {\n        throw new Error('strings are disparate lengths');\n    }\n    if (str1.length % 2 !== 0) {\n        throw new Error('strings must be hex');\n    }\n\n    const result = new ArrayBuffer(str1.length / 2);\n    const result8 = new Uint8Array(result);\n    for (let i = 0; i < str1.length; i += 2) {\n        // tslint:disable-next-line:no-bitwise\n        result8[i / 2] = (parseInt(str1.substr(i, 2), 16) ^ parseInt(str2.substr(i, 2), 16));\n    }\n    return ab2hexstring(result);\n}\n\n/**\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\n * @param {number} num\n * @param {number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\n * @param {boolean} littleEndian - Encode the hex in little endian form\n * @return {string}\n */\nexport const num2hexstring = (num: number, size = 1, littleEndian = false) => {\n    if (num < 0) {\n        throw new RangeError('num must be >=0');\n    }\n    if (size % 1 !== 0) {\n        throw new Error('size must be a whole integer');\n    }\n    if (!Number.isSafeInteger(num)) {\n        throw new RangeError(`num (${num}) must be a safe integer`);\n    }\n\n    size = size * 2;\n    let hexstring = num.toString(16);\n    hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n    if (littleEndian) {\n        hexstring = reverseHex(hexstring);\n    }\n    return hexstring;\n};\n\n/**\n * Converts a number to a hex\n * @param {number} num - The number\n * @returns {string} hexstring of the variable Int.\n */\nexport const num2VarInt = (num: number) => {\n    if (num < 0xfd) {\n        return num2hexstring(num);\n    } else if (num <= 0xffff) {\n        // uint16\n        return 'fd' + num2hexstring(num, 2, true);\n    } else if (num <= 0xffffffff) {\n        // uint32\n        return 'fe' + num2hexstring(num, 4, true);\n    } else {\n        // uint64\n        return 'ff' + num2hexstring(num, 8, true);\n    }\n};\n\n/**\n * Reverses a hex string, 2 chars as 1 byte\n * @example\n * reverseHex('abcdef') = 'efcdab'\n * @param {string} hex - HEX string\n * @return {string} reversed hex string.\n */\nexport const reverseHex = (hex: string) => {\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Incorrect Length: ${hex}`);\n    }\n    let out = '';\n    for (let i = hex.length - 2; i >= 0; i -= 2) {\n        out += hex.substr(i, 2);\n    }\n    return out;\n};\n\nexport function bigIntFromBytes(bytes: string): Long {\n    const buff = Buffer.from(bytes, 'hex');\n    let data = Array.from(buff.subarray(0));\n    const b = data[data.length - 1];\n\n    if (b >> 7 === 1) {\n        data = data.concat(Array(8 - data.length).fill(255));\n    }\n    return Long.fromBytesLE(data);\n}\n\nexport function bigIntToBytes(value: Long) {\n    let data = value.toBytesLE();\n    const negData = value.neg().toBytesLE();\n    let stop;\n    if (value.isNegative()) {\n        stop = 255;\n    } else {\n        stop = 0;\n    }\n    let b = stop;\n    let pos = 0;\n    for (let i = data.length - 1; i >= 0; i--) {\n        if (data[i] !== stop) {\n            b = value.isNegative() ? negData[i] : data[i];\n            pos = i + 1;\n            break;\n        }\n    }\n    data = data.slice(0, pos);\n\n    if (b >> 7 === 1) {\n        data.push(value.isNegative() ? 255 : 0);\n    }\n    return new Buffer(data).toString('hex');\n}\n\n/**\n * @class StringReader\n * @classdesc A string helper used to read given string as bytes.2 chars as one byte.\n * @param {string} str - The string to read.\n */\nexport class StringReader {\n    str: string;\n    pos: number;\n    size: number;\n    constructor(str = '') {\n        if (str.length % 2 !== 0) {\n            throw new Error('Param\\'s length is not even.');\n        }\n        this.str = str;\n        this.pos = 0;\n        this.size = this.str.length / 2;\n    }\n\n    /**\n     * Checks if reached the end of the string.\n     */\n    isEmpty() {\n        return this.pos >= this.str.length;\n    }\n\n    /**\n     * Reads some bytes.\n     * @param {number} bytes - Number of bytes to read\n     */\n    read(bytes: number) {\n        if (this.isEmpty()) {\n            throw new Error('StringReader reached the end.');\n        }\n        const out = this.str.substr(this.pos, bytes * 2);\n        this.pos += bytes * 2;\n        return out;\n    }\n\n    unreadBytes(bytes: number) {\n        if ( (this.pos - bytes * 2) < 0 ) {\n            throw new Error('Can not unread too many bytes.');\n        }\n        this.pos -= bytes * 2;\n        return;\n    }\n\n    /**\n     * Reads string terminated by NULL.\n     */\n    readNullTerminated(): string {\n        const index = this.str.indexOf('00', this.pos);\n        if (index === -1) {\n            throw new Error('No ending NULL found');\n        }\n\n        const out = this.str.substring(this.pos, index);\n        this.pos = index + 2;\n        return out;\n    }\n\n    /**\n     * First, read one byte as the length of bytes to read. Then read the following bytes.\n     */\n    readNextBytes() {\n        const bytesToRead = this.readNextLen();\n        if (bytesToRead === 0) {\n            return '';\n        }\n\n        return this.read(bytesToRead);\n    }\n\n    /**\n     * Reads one byte as int, which may indicates the length of following bytes to read.\n     * @returns {number}\n     */\n    readNextLen() {\n        let len = parseInt(this.read(1), 16);\n\n        if (len === 0xfd) {\n            len = parseInt(reverseHex(this.read(2)), 16);\n        } else if (len === 0xfe) {\n            len = parseInt(reverseHex(this.read(4)), 16);\n        } else if (len === 0xff) {\n            len = parseInt(reverseHex(this.read(8)), 16);\n        }\n\n        return len;\n    }\n\n    /**\n     * Read Uint8\n     */\n    readUint8() {\n        return parseInt(reverseHex(this.read(1)), 16);\n    }\n\n    /**\n     * read 2 bytes as uint16 in littleEndian\n     */\n    readUint16() {\n        return parseInt(reverseHex(this.read(2)), 16);\n    }\n\n    /**\n     * Read 4 bytes as uint32 in littleEndian\n     */\n    readUint32() {\n        return parseInt(reverseHex(this.read(4)), 16);\n    }\n\n    /**\n     * Read 4 bytes as int in littleEndian\n     */\n    readInt() {\n        return parseInt(reverseHex(this.read(4)), 16);\n    }\n\n    /**\n     * Read 8 bytes as long in littleEndian\n     */\n    readLong() {\n        return parseInt(reverseHex(this.read(8)), 16);\n    }\n\n    readBoolean() {\n        return parseInt(this.read(1), 16) !== 0;\n    }\n}\n\nexport class EventEmitter {\n    handlers: any = {};\n\n    // register event type and handler\n    on(type: string, handler: () => void) {\n        if (typeof this.handlers[type] === 'undefined') {\n            this.handlers[type] = [];\n        }\n        this.handlers[type].push(handler);\n    }\n\n    /**\n     * trigger event\n     * @param { string } type\n     * @param { any } event , is the parameter\n     */\n    trigger(type: string, event?: any) {\n        if (this.handlers[type] instanceof Array) {\n            const handlers = this.handlers[type];\n            for (let i = 0, len = handlers.length; i < len; i++) {\n                handlers[i](event);\n            }\n        }\n    }\n\n    // remove event listener\n    off(type: string) {\n        delete this.handlers[type];\n    }\n}\n\nexport const sendBackResult2Native = (result: string, callback: string) => {\n    if (window && window.prompt) {\n        window.prompt(`${WEBVIEW_SCHEME}://${callback}?params=${result}`);\n    }\n};\n\nexport const axiosPost = (url: string, params: any) => {\n    return axios.post(url, params).then((res: any) => {\n        // tslint:disable-next-line:no-console\n        console.log('axios res:' + res);\n        return res;\n    }).catch((err: any) => {\n        // tslint:disable-next-line:no-console\n        console.log('axios res:' + JSON.stringify(err));\n\n        return err;\n    });\n};\n\n/**\n * Gets current time in unix timestamp format.\n */\nexport function now(): number {\n    return Math.floor(Date.now() / 1000);\n}\n\n/**\n * Computes sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function sha256(data: string) {\n    const hex = cryptoJS.enc.Hex.parse(data);\n    const sha = cryptoJS.SHA256(hex).toString();\n    return sha;\n}\n\n/**\n * Computes ripemd-160 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function ripemd160(data: string) {\n    const hex = cryptoJS.enc.Hex.parse(data);\n    const ripemd = cryptoJS.RIPEMD160(hex).toString();\n    return ripemd;\n}\n\n/**\n * Computes ripemd-160 hash of sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function hash160(SignatureScript: string): string {\n    return ripemd160(sha256(SignatureScript));\n}\n\n/**\n * Generates random ArrayBuffer of specified length.\n *\n * @param len Length of the array to generate\n */\nexport function generateRandomArray(len: number): ArrayBuffer {\n    return secureRandom(len);\n}\n\n/**\n * Generates random ArrayBuffer of specified length encoded as hex string\n *\n * @param len Length of the array to generate\n */\nexport function randomBytes(len: number) {\n    return ab2hexstring(generateRandomArray(len));\n}\n\nexport function generateMnemonic(size: number = 16): string {\n    const random = ab2hexstring(generateRandomArray(size));\n    return bip39.entropyToMnemonic(random);\n}\n\nexport function parseMnemonic(str: string) {\n    return bip39.mnemonicToEntropy(str);\n}\n\nexport function varifyPositiveInt(v: number) {\n    if (!/^[1-9]\\d*$/.test(v.toString())) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    return;\n}\n\nexport function isBase64(str: string): boolean {\n    return Buffer.from(str, 'base64').toString('base64') === str;\n}\n\nexport function isHexString(str: string): boolean {\n    const regexp = /^[0-9a-fA-F]+$/;\n    return regexp.test(str) && (str.length % 2 === 0);\n}\n\nexport function unboundDeadline() {\n    let count = 0;\n    for (const m of UNBOUND_GENERATION_AMOUNT) {\n        count += m;\n    }\n    count *= UNBOUND_TIME_INTERVAL;\n    const numInterval = UNBOUND_GENERATION_AMOUNT.length;\n    if (UNBOUND_GENERATION_AMOUNT[numInterval - 1] !== 1 ||\n        ! ((count - UNBOUND_TIME_INTERVAL < ONT_TOTAL_SUPPLY) && ONT_TOTAL_SUPPLY <= count)) {\n        throw new Error('incompatible constants setting');\n    }\n    return UNBOUND_TIME_INTERVAL * numInterval - (count - ONT_TOTAL_SUPPLY);\n}\n\nexport function calcUnboundOng(balance: number, startOffset: number, endOffset: number) {\n    let amount = 0;\n    if (startOffset >= endOffset) {\n        return 0;\n    }\n    const UNBOUND_DEADLINE = unboundDeadline();\n    if (startOffset < UNBOUND_DEADLINE) {\n        let ustart = Math.floor(startOffset / UNBOUND_TIME_INTERVAL);\n        let istart = startOffset % UNBOUND_TIME_INTERVAL;\n        if (endOffset >= UNBOUND_DEADLINE) {\n            endOffset = UNBOUND_DEADLINE;\n        }\n        const uend = Math.floor(endOffset / UNBOUND_TIME_INTERVAL);\n        const iend = endOffset % UNBOUND_TIME_INTERVAL;\n        while (ustart < uend) {\n            amount += (UNBOUND_TIME_INTERVAL - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\n            ustart++;\n            istart = 0;\n        }\n        amount += (iend - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\n    }\n    return amount * balance;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport * as Long from 'long';\nimport { ERROR_CODE } from './../error';\nimport { bigIntToBytes, reverseHex } from './../utils';\n\n// const SIZE = 8;\n/**\n * Big positive integer base on BigNumber\n */\nexport default class BigInt {\n    /**\n     * Create BigInt from string\n     * @param hex Byte string value\n     */\n    static fromHexstr(hex: string): BigInt {\n        hex = reverseHex(hex);\n        const bi = new BigNumber(hex, 16).toString();\n        return new BigInt(bi);\n    }\n\n    value: string | number;\n\n    constructor(value: string | number) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.value = value;\n    }\n\n    /**\n     * Create hex string from BigInt\n     */\n    toHexstr(): string {\n        const bi = Long.fromValue(this.value);\n        const hex = bigIntToBytes(bi);\n        return hex;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Schema used during signing and verification of signature.\n */\nexport class SignatureScheme {\n    static values: SignatureScheme[] = [];\n\n    static ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\n    static ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\n    static ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\n    static ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\n    static ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\n    static SM2withSM3 = new SignatureScheme('SM3withSM2', 9, 'SM');\n    static EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\n\n    /**\n     * Finds Signature schema corresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Signature schema corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Signature schema corresponding to specified label representation in JWS.\n     *\n     * @param label Label\n     */\n    static fromLabelJWS(label: string): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.labelJWS === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n    hex: number;\n    labelJWS: string;\n\n    constructor(label: string, hex: number, labelJWS: string) {\n        this.label = label;\n        this.hex = hex;\n        this.labelJWS = labelJWS;\n\n        SignatureScheme.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Type of key. ECDSA is the default one to use.\n */\nexport class KeyType {\n    static values: KeyType[] = [];\n\n    static ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\n    static SM2 = new KeyType('SM2', 0x13, SignatureScheme.SM2withSM3);\n    static EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\n\n    /**\n     * Finds Key type corresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): KeyType {\n        const item = KeyType.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Key type corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): KeyType {\n        const item = KeyType.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n    hex: number;\n    defaultSchema: SignatureScheme;\n\n    constructor(label: string, hex: number, defaultSchema: SignatureScheme) {\n        this.label = label;\n        this.hex = hex;\n        this.defaultSchema = defaultSchema;\n\n        KeyType.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Elliptic curve used.\n */\nexport class CurveLabel {\n    static values: CurveLabel[] = [];\n\n    static SECP224R1 = new CurveLabel('P-224', 1, 'p224');\n    static SECP256R1 = new CurveLabel('P-256', 2, 'p256');\n    static SECP384R1 = new CurveLabel('P-384', 3, 'p384');\n    static SECP521R1 = new CurveLabel('P-521', 4, 'p521');\n    static SM2P256V1 = new CurveLabel('sm2p256v1', 20, 'sm2p256v1');\n    static ED25519 = new CurveLabel('ed25519', 25, 'ed25519');\n\n    /**\n     * Finds Curvecorresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): CurveLabel {\n        const item = CurveLabel.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Curve corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): CurveLabel {\n        const item = CurveLabel.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n    hex: number;\n    preset: string;\n\n    constructor(label: string, hex: number, preset: string) {\n        this.label = label;\n        this.hex = hex;\n        this.preset = preset;\n\n        CurveLabel.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nexport enum ParameterType  {\n    Boolean = 'Boolean',\n    Integer = 'Integer',\n    ByteArray = 'ByteArray',\n    Interface = 'Interface',\n    Array = 'Array',\n    Struct = 'Struct',\n    Map = 'Map',\n    String  = 'String',\n    Int = 'Int',\n    Long = 'Long', // value should be string\n    IntArray = 'IntArray',\n    LongArray = 'LongArray',\n    Address = 'Address'\n}\n\nexport enum ParameterTypeVal {\n    ByteArray = 0x00,\n    Boolean = 0x01,\n    Integer = 0x02,\n    Interface = 0x40,\n    Array = 0x80,\n    Struct = 0x81,\n    Map = 0x82\n}\n\n/**\n * Decribes the parameter.\n */\nexport class Parameter {\n    public name: string;\n    public type: ParameterType;\n    public value: any;\n    constructor(name: string, type: ParameterType, value: any) {\n        this.name = name;\n        this.type = type;\n        this.value = value;\n    }\n\n    getName(): string {\n        return this.name;\n    }\n\n    getType(): ParameterType {\n        return this.type;\n    }\n\n    getValue(): any {\n        return this.value;\n    }\n\n    setValue(value: any): boolean {\n        if (value.type === this.type && value.name === this.name && value.value != null) {\n            this.value = value.value;\n            return true;\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as cryptoJS from 'crypto-js';\nimport { sha3_224, sha3_256, sha3_384, sha3_512 } from 'js-sha3';\nimport { sm3 } from 'sm.js';\nimport { DEFAULT_ALGORITHM } from '../consts';\nimport { hexstring2ab } from '../utils';\nimport { CurveLabel } from './CurveLabel';\nimport { KeyType } from './KeyType';\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Specific parameters for the key type.\n */\nexport class KeyParameters {\n    /**\n     * Create KeyParameters from json.\n     * @param json JsonKeyParameters\n     */\n    static deserializeJson(json: JsonKeyParameters): KeyParameters {\n        return new KeyParameters(\n        CurveLabel.fromLabel(json.curve)\n        );\n    }\n    curve: CurveLabel;\n\n    constructor(curve: CurveLabel) {\n        this.curve = curve;\n    }\n\n    /**\n     * Serialize KeyParameters to json.\n     */\n    serializeJson(): JsonKeyParameters {\n        return {\n            curve: this.curve.label\n        };\n    }\n}\n\n/**\n * Common representation of private or public key\n */\nexport class Key {\n    /**\n     * Algorithm used for key generation.\n     */\n    algorithm: KeyType;\n\n    /**\n     * Parameters of the algorithm.\n     */\n    parameters: KeyParameters;\n\n    /**\n     * Key data.\n     */\n    key: string;\n\n    /**\n     * Creates Key.\n     *\n     * If no algorithm or parameters are specified, default values will be used.\n     * This is strongly discurraged, because it will forbid using other Key types.\n     * Therefore use it only for testing.\n     *\n     * @param key Hex encoded key value\n     * @param algorithm Key type\n     * @param parameters Parameters of the key type\n     */\n    constructor(key: string, algorithm?: KeyType, parameters?: KeyParameters) {\n        this.key = key;\n\n        if (algorithm === undefined) {\n            algorithm = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\n        }\n\n        if (parameters === undefined) {\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\n        }\n\n        this.algorithm = algorithm;\n        this.parameters = parameters;\n    }\n\n    /**\n     * Computes hash of message using hashing function of signature schema.\n     *\n     * @param msg Hex encoded input data\n     * @param scheme Signing schema to use\n     */\n    computeHash(msg: string, scheme: SignatureScheme): string {\n        switch (scheme) {\n        case SignatureScheme.ECDSAwithSHA224:\n            return cryptoJS.SHA224(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA256:\n            return cryptoJS.SHA256(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA384:\n            return cryptoJS.SHA384(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.EDDSAwithSHA512:\n            return cryptoJS.SHA512(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA3_224:\n            return sha3_224(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithSHA3_256:\n            return sha3_256(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithSHA3_384:\n            return sha3_384(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithSHA3_512:\n            return sha3_512(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return cryptoJS.RIPEMD160(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.SM2withSM3:\n            return (new sm3()).sum(hexstring2ab(msg), 'hex');\n        default:\n            throw new Error('Unsupported hash algorithm.');\n        }\n    }\n\n    /**\n     * Tests if signing schema is compatible with key type.\n     *\n     * @param schema Signing schema to use\n     */\n    isSchemaSupported(schema: SignatureScheme): boolean {\n        switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return this.algorithm === KeyType.ECDSA;\n        case SignatureScheme.EDDSAwithSHA512:\n            return this.algorithm === KeyType.EDDSA;\n        case SignatureScheme.SM2withSM3:\n            return this.algorithm === KeyType.SM2;\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Gets JSON representation of the Key (Public/Private).\n     */\n    serializeJson(): JsonKey {\n        return {\n            algorithm: this.algorithm.label,\n            parameters: this.parameters.serializeJson(),\n            key: this.key\n        };\n    }\n}\n\n/**\n * Json representation of the Key.\n */\nexport interface JsonKey {\n    algorithm: string;\n    parameters: JsonKeyParameters;\n    key: string | null;\n    external?: any | null;\n}\n\n/**\n * Json representation of the Key parameters.\n */\nexport interface JsonKeyParameters {\n    curve: string;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as elliptic from 'elliptic';\nimport { sm2 } from 'sm.js';\nimport { DEFAULT_SM2_ID } from '../consts';\nimport { hexstr2str, hexstring2ab, num2hexstring, StringReader } from '../utils';\nimport { CurveLabel } from './CurveLabel';\nimport { Key, KeyParameters } from './Key';\nimport { KeyType } from './KeyType';\nimport { Signable } from './signable';\nimport { Signature } from './Signature';\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Class to manage the public key with some userful functions.\n */\nexport class PublicKey extends Key {\n    /**\n     * Creates PublicKey from Hex representation.\n     *\n     * @param sr String reader\n     * @param length Byte length of the serialized object\n     *\n     */\n    static deserializeHex(sr: StringReader, length: number = 33): PublicKey {\n        if (length === 33) { // ECDSA\n            const algorithm = KeyType.ECDSA;\n            const curve = CurveLabel.SECP256R1;\n            const pk = sr.read(33);\n            return new PublicKey(pk, algorithm, new KeyParameters(curve));\n        } else {\n            const algorithmHex = parseInt(sr.read(1), 16);\n            const curveHex = parseInt(sr.read(1), 16);\n            const pk = sr.read(length - 2);\n\n            return new PublicKey(\n                pk,\n                KeyType.fromHex(algorithmHex),\n                new KeyParameters(CurveLabel.fromHex(curveHex))\n            );\n        }\n    }\n\n    /**\n     * Verifies if the signature was created with private key corresponding to supplied public key\n     * and was not tampered with using signature schema.\n     *\n     * @param msg Hex encoded input data or Signable object\n     * @param signature Signature object\n     */\n    verify(msg: string | Signable, signature: Signature): boolean {\n        if (!this.isSchemaSupported(signature.algorithm)) {\n            throw new Error('Signature schema does not match key type.');\n        }\n\n        // retrieves content to sign if not provided directly\n        if (typeof msg !== 'string') {\n            msg = msg.getSignContent();\n        }\n\n        let hash: string;\n        if (signature.algorithm === SignatureScheme.SM2withSM3) {\n            // library sm.js (SM2withSM3) has implemented hashing as part of verification, therefore it is skipped\n            hash = msg;\n        } else {\n            hash = this.computeHash(msg, signature.algorithm);\n        }\n\n        return this.verifySignature(hash, signature.value, signature.algorithm);\n    }\n\n    /**\n     * Serializes public key to Hex representation.\n     *\n     * Length definition is not included.\n     */\n    serializeHex(): string {\n        let result = '';\n        switch (this.algorithm) {\n        case KeyType.ECDSA:\n            result += this.key;\n            break;\n        case KeyType.EDDSA:\n        case KeyType.SM2:\n            result += num2hexstring(this.algorithm.hex);\n            result += num2hexstring(this.parameters.curve.hex);\n            result += this.key;\n            break;\n        }\n        return result;\n    }\n\n    /**\n     * For internal use.\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     * @param schema Signature scheme to use\n     */\n    verifySignature(hash: string, signature: string, schema: SignatureScheme): boolean {\n        switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return this.verifyEcDSASignature(hash, signature);\n        case SignatureScheme.EDDSAwithSHA512:\n            return this.verifyEdDSASignature(hash, signature);\n        case SignatureScheme.SM2withSM3:\n            return this.verifySM2Signature(hash, signature);\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Verifies EcDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     */\n    verifyEcDSASignature(hash: string, signature: string): boolean {\n        const r = signature.substr(0, 64);\n        const s = signature.substr(64, 64);\n\n        const ec = new elliptic.ec(this.parameters.curve.preset);\n        return ec.verify(hash, { r, s }, this.key, 'hex');\n    }\n\n    /**\n     * Verifies EdDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     */\n    verifyEdDSASignature(hash: string, signature: string): boolean {\n        const r = signature.substr(0, 64);\n        const s = signature.substr(64, 64);\n\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\n        return eddsa.verify(hash, { r, s }, this.key, 'hex');\n    }\n\n    /**\n     * Verifies SM2 signature of message hash.\n     *\n     * Only default SM2 ID is supported.\n     *\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     */\n    verifySM2Signature(hash: string, signature: string): boolean {\n        const reader = new StringReader(signature);\n\n        const id = hexstr2str(reader.readNullTerminated());\n        if (id !== DEFAULT_SM2_ID && id !== '') {\n            throw new Error('Unsupported SM2 id used.');\n        }\n\n        const r = reader.read(32);\n        const s = reader.read(32);\n\n        const keyPair = sm2.SM2KeyPair(this.key);\n        return keyPair.verify(hexstring2ab(hash), r, s);\n    }\n}\n\n/**\n * Public key status enumaration.\n */\nexport class PublicKeyStatus {\n    static values: PublicKeyStatus[] = [];\n\n    static IN_USE = new PublicKeyStatus('in use');\n\n    static REVOKED = new PublicKeyStatus('revoked');\n\n    /**\n     * Finds Public key status corresponding to specified label representation.\n     *\n     * @param label Hex encoded label\n     */\n    static fromHexLabel(hexLabel: string): PublicKeyStatus {\n        const label = hexstr2str(hexLabel);\n\n        const item = PublicKeyStatus.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n\n    constructor(label: string) {\n        this.label = label;\n\n        PublicKeyStatus.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as elliptic from 'elliptic';\nimport { sm2 } from 'sm.js';\nimport BigInt from '../common/bigInt';\nimport { KeyType } from '../crypto/KeyType';\nimport { PublicKey } from '../crypto/PublicKey';\nimport { ERROR_CODE } from '../error';\nimport { num2hexstring, StringReader } from './../utils';\nimport opcode from './opcode';\n// The sorting rules is as follows:\n//    1. if keys have different types, then sorted by the KeyType value.\n//    2. else,\n//       2.1. ECDSA or SM2:\n//           2.1.1. if on different curves, then sorted by the curve label.\n//           2.1.2. else if x values are different, then sorted by x.\n//           2.1.3. else sorted by y.\n//       2.2. EdDSA: sorted by the byte sequence directly.\nexport function comparePublicKeys(a: PublicKey, b: PublicKey) {\n    if (a.algorithm !== b.algorithm) {\n        return a.algorithm.hex - b.algorithm.hex;\n    }\n    switch (a.algorithm) {\n    case KeyType.ECDSA:\n        const ec = new elliptic.ec(a.parameters.curve.preset);\n        const paKey = ec.keyFromPublic(a.key, 'hex', true);\n        const pbKey = ec.keyFromPublic(b.key, 'hex', true);\n        const pa = paKey.getPublic();\n        const pb = pbKey.getPublic();\n        if (pa.getX() !== pb.getX()) {\n            return pa.getX() - pb.getX();\n        } else {\n            return pa.getY() - pb.getY();\n        }\n    case KeyType.SM2:\n        const pka = new sm2.SM2KeyPair();\n        const pkb = new sm2.SM2KeyPair();\n        pka._pubFromString(a.key);\n        pkb._pubFromString(b.key);\n        if (pka.getX().toString() !== pkb.getX().toString()) {\n            return Number(pka.getX().toString()) - Number(pkb.getX().toString());\n        } else {\n            return Number(pka.getY().toString()) - Number(pkb.getY().toString());\n        }\n    case KeyType.EDDSA:\n        return Number(a.key) - Number(b.key);\n    default:\n        return 0;\n    }\n}\n\nexport function pushOpCode(op: opcode): string {\n    return num2hexstring(op);\n}\n\nexport function pushPubKey(pk: PublicKey): string {\n    const pkStr = pk.serializeHex();\n    return pushBytes(pkStr);\n}\n\nexport function pushBigInt(num: number): string {\n    if (num === -1) {\n        return num2hexstring(opcode.PUSHM1);\n    }\n    if (num === 0) {\n        return num2hexstring(opcode.PUSH0);\n    }\n    if (num > 0 && num <= 16) {\n        return num2hexstring(opcode.PUSH1 - 1 + num);\n    }\n    return num2hexstring(num, 8, true);\n}\n\nexport function pushNum(num: number): string {\n    if ( num === 0 ) {\n        return pushOpCode(opcode.PUSH0);\n    } else if ( num <= 16 ) {\n        return num2hexstring(num - 1 + opcode.PUSH1);\n    }\n    const bint = new BigInt(num.toString());\n    return pushBytes(bint.toHexstr());\n}\n\nexport function pushBytes(hexstr: string): string {\n    let result = '';\n    if (hexstr.length === 0) {\n        throw new Error('pushBytes error, hexstr is empty.');\n    }\n    const len = hexstr.length / 2;\n    if (len <= opcode.PUSHBYTES75 + 1 - opcode.PUSHBYTES1 ) {\n        result += num2hexstring(len + opcode.PUSHBYTES1 - 1);\n    } else if (len < 0x100) {\n        result += num2hexstring(opcode.PUSHDATA1);\n        result += num2hexstring(len);\n    } else if (len < 0x10000) {\n        result += num2hexstring(opcode.PUSHDATA2);\n        result += num2hexstring(len, 2, true);\n    } else if (len < 0x100000000) {\n        result += num2hexstring(opcode.PUSHDATA4);\n        result += num2hexstring(len, 4, true);\n    } else {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    result += hexstr;\n    return result;\n}\n\nexport function programFromPubKey(pk: PublicKey): string {\n    let result = '';\n    result += pushPubKey(pk);\n    result += pushOpCode(opcode.CHECKSIG);\n    return result;\n}\n\nexport function programFromMultiPubKey(pubkeys: PublicKey[], m: number): string {\n    const n = pubkeys.length;\n    if (!(1 <= m && m <= n && n <= 1024)) {\n        throw new Error('Wrong multi-sig param');\n    }\n    // const pkStrList = pubkeys.map( (p) => p.serializeHex());\n    // pkStrList.sort();\n\n    pubkeys.sort(comparePublicKeys);\n\n    let result = '';\n    result += pushNum(m);\n\n    for (const pk of pubkeys) {\n        result += pushBytes(pk.serializeHex());\n    }\n    result += pushNum(n);\n    result += pushOpCode(opcode.CHECKMULTISIG);\n    return result;\n}\n\nexport function programFromParams(sigs: string[]): string {\n    let result = '';\n    sigs.sort();\n    for ( const s of sigs) {\n        result += pushBytes(s);\n    }\n    return result;\n}\n\nexport function readOpcode(sr: StringReader) {\n    return parseInt(sr.read(1), 16);\n}\n\nexport function readNum(sr: StringReader) {\n    let code;\n    try {\n        code = readOpcode(sr);\n    } catch (err) {\n        return 0;\n    }\n    let num = code - opcode.PUSH1 + 1;\n    if (code === opcode.PUSH0) {\n        readOpcode(sr);\n        return 0;\n    } else if (1 <= num && num <= 16) {\n        readOpcode(sr);\n        return num;\n    }\n    const bint = BigInt.fromHexstr(sr.readNextBytes());\n    num = parseInt(bint.value.toString(), 10);\n    return num;\n}\n\nexport function readBytes(sr: StringReader) {\n    const code = readOpcode(sr);\n    let keylen;\n    if (code === opcode.PUSHDATA4) {\n        keylen = sr.readUint32();\n    } else if (code === opcode.PUSHDATA2) {\n        keylen = sr.readUint16();\n    } else if (code === opcode.PUSHDATA1) {\n        keylen = sr.readUint8();\n    } else if (code <= opcode.PUSHBYTES75 && code >= opcode.PUSHBYTES1) {\n        keylen = code - opcode.PUSHBYTES1 + 1;\n    } else {\n        throw new Error('unexpected opcode: ' + code);\n    }\n    return sr.read(keylen);\n}\n\nexport function readPubKey(sr: StringReader) {\n    const pkStr = sr.readNextBytes();\n    return PublicKey.deserializeHex(new StringReader(pkStr));\n}\n\nexport function getParamsFromProgram(hexstr: string): string[] {\n    const sigs = [];\n    const sr = new StringReader(hexstr);\n    while (!sr.isEmpty()) {\n        sigs.push(readBytes(sr));\n    }\n    return sigs;\n}\n\nexport class ProgramInfo {\n    M: number;\n    pubKeys: PublicKey[];\n}\nexport function getProgramInfo(hexstr: string): ProgramInfo {\n    const info = new ProgramInfo();\n    const end = parseInt(hexstr.substr(-2, 2), 16);\n    if (end === opcode.CHECKSIG) {\n        const sr = new StringReader(hexstr);\n        const pk = readPubKey(sr);\n        info.M = 1;\n        info.pubKeys = [pk];\n        return info;\n    } else if (end === opcode.CHECKMULTISIG) {\n        const sr = new StringReader(hexstr);\n        const m = parseInt(sr.read(1), 16) - opcode.PUSH1 + 1;\n        const n = parseInt(hexstr.substr(-4, 2), 16) - opcode.PUSH1 + 1;\n        info.M = m;\n        info.pubKeys = [];\n        for (let i = 0; i < n; i++) {\n            const key = readPubKey(sr);\n            info.pubKeys.push(key);\n        }\n        // const n = readNum(sr);\n        return info;\n    } else {\n        throw new Error('Unsupported program.');\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Struct is a special kind of parameter that used in smart contract.\n */\nexport default class Struct {\n    list: any[];\n\n    constructor() {\n        this.list = [];\n    }\n    /**\n     * Add arguments to struct.\n     * @param args Array of some kinds of value.\n     * Boolean, number, string, Address and Struct are supported.\n     */\n    add(...args: any[]) {\n        for (const a of args) {\n            this.list.push(a);\n        }\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport BigInt from '../common/bigInt';\nimport { ERROR_CODE } from '../error';\nimport AbiFunction from '../smartcontract/abi/abiFunction';\nimport { Parameter, ParameterType, ParameterTypeVal } from '../smartcontract/abi/parameter';\nimport Struct from '../smartcontract/abi/struct';\nimport { bigIntFromBytes, hexstr2str, num2hexstring, num2VarInt, str2hexstr, StringReader } from '../utils';\nimport opcode from './opcode';\n\nexport const pushBool = (param: boolean) => {\n    let result = '';\n    if (param) {\n        result += num2hexstring(opcode.PUSHT);\n    } else {\n        result += num2hexstring(opcode.PUSHF);\n    }\n    return result;\n};\n\nexport const pushInt = (param: number) => {\n    let result = '';\n    if (param === -1) {\n        result = num2hexstring(opcode.PUSHM1);\n    } else if (param === 0) {\n        result = num2hexstring(opcode.PUSH0);\n    } else if (param > 0 && param < 16) {\n        const num = opcode.PUSH1 - 1 + param;\n        result = num2hexstring(num);\n    } else {\n        const biHex = new BigInt(param.toString()).toHexstr();\n        result = pushHexString(biHex);\n    }\n\n    return result;\n};\n\nexport const pushBigNum = (param: BigNumber) => {\n    let result = '';\n    if (param.isEqualTo(-1)) {\n        result = num2hexstring(opcode.PUSHM1);\n    } else if (param.isEqualTo(0)) {\n        result = num2hexstring(opcode.PUSH0);\n    } else if (param.isGreaterThan(0) && param.isLessThan(16)) {\n        const num = opcode.PUSH1 - 1 + param.toNumber();\n        result = num2hexstring(num);\n    } else {\n        const biHex = new BigInt(param.toString()).toHexstr();\n        result = pushHexString(biHex);\n    }\n    return result;\n};\n\nexport const pushHexString = (param: string) => {\n    let result = '';\n    const len = param.length / 2;\n    if (len <= opcode.PUSHBYTES75) {\n        result += num2hexstring(len);\n    } else if (len < 0x100) {\n        result += num2hexstring(opcode.PUSHDATA1);\n        result += num2hexstring(len);\n    } else if (len < 0x10000) {\n        result += num2hexstring(opcode.PUSHDATA2);\n        result += num2hexstring(len, 2, true);\n    } else {\n        result += num2hexstring(opcode.PUSHDATA4);\n        result += num2hexstring(len, 4, true);\n    }\n    result += param;\n    return result;\n};\n\nexport const getStructBytes = (val: Struct) => {\n    let result = '';\n    result += num2hexstring(ParameterTypeVal.Struct);\n    result += num2hexstring(val.list.length); // val is array-like\n    for (const v of val.list) {\n        if (typeof v === 'string') {// consider as hex string\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(v);\n        } else if (typeof v === 'number') {\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(num2VarInt(v));\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n    return result;\n};\n\nexport const getMapBytes = (val: Map<string, Parameter>) => {\n    let result = '';\n    result += num2hexstring(ParameterTypeVal.Map);\n    result += num2hexstring(val.size);\n    for (const k of val.keys()) {\n        result += num2hexstring(ParameterTypeVal.ByteArray);\n        result += pushHexString(str2hexstr(k));\n        const p = val.get(k);\n        if (p && p.getType() === ParameterType.ByteArray) {\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(p.getValue());\n        } else if (p && p.getType() === ParameterType.String) {\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(str2hexstr(p.getValue()));\n        } else if (p && p.getType() === ParameterType.Integer) {\n            result += num2hexstring(ParameterTypeVal.Integer);\n            result += pushHexString(num2VarInt(p.getValue()));\n        } else if (p && p.getType() === ParameterType.Long) {\n            result += num2hexstring(ParameterTypeVal.Integer);\n            result += pushHexString(num2VarInt(p.getValue()));\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n    return result;\n};\n\nexport const pushMap = (val: Map<string, any>) => {\n    let result = '';\n    result += num2hexstring(opcode.NEWMAP);\n    result += num2hexstring(opcode.TOALTSTACK);\n    for (const k of val.keys()) {\n        result += num2hexstring(opcode.DUPFROMALTSTACK);\n        result += pushHexString(str2hexstr(k));\n        result += pushParam(val.get(k));\n        result += num2hexstring(opcode.SETITEM);\n    }\n    result += num2hexstring(opcode.FROMALTSTACK);\n    return result;\n};\n\nexport const pushParam = (p: any) => {\n    if (!p) {\n        throw Error('Parameter can not be undefined');\n    }\n    let result = '';\n    if (p.type === ParameterType.ByteArray) {\n        result += pushHexString(p.value);\n    } else if (p.type === ParameterType.String) {\n        result += pushHexString(str2hexstr(p.value));\n    } else if (p.type === ParameterType.Boolean) {\n        result += pushBool(Boolean(p.value));\n        result += num2hexstring(opcode.PUSH0);\n        result += num2hexstring(opcode.BOOLOR);\n    } else if (p instanceof Map) {\n        result += pushMap(p);\n    } else if (p.type === ParameterType.Array) {\n        for (let i = p.value.length - 1; i > -1; i--) {\n            result += pushParam(p.value[i]);\n        }\n        result += pushInt(p.value.length);\n        result += num2hexstring(opcode.PACK);\n    } else if (p.type === ParameterType.Integer) {\n        result += pushInt(p.value);\n        result += num2hexstring(opcode.PUSH0);\n        result += num2hexstring(opcode.ADD);\n    } else if (p.type === ParameterType.Long) {\n        result += pushBigNum(new BigNumber(p.value));\n        result += num2hexstring(opcode.PUSH0);\n        result += num2hexstring(opcode.ADD);\n    } else {\n        throw Error('Invalid parameter type: ' + p.type);\n    }\n    return result;\n};\n\nexport const serializeAbiFunction = (abiFunction: AbiFunction) => {\n    const list = [];\n    list.push(str2hexstr(abiFunction.name));\n    const tmp = [];\n    for (const p of abiFunction.parameters) {\n        if (p.getType() === ParameterType.String) {\n            tmp.push(str2hexstr(p.getValue()));\n        } else if (p.getType() === ParameterType.Long) {\n            tmp.push(new BigNumber(p.getValue()));\n        } else if (p.getType() === ParameterType.Map) {\n            tmp.push(convertMap(p));\n        } else {\n            tmp.push(p.getValue());\n        }\n    }\n    if (list.length > 0) {\n        list.push(tmp);\n    }\n    const result = createCodeParamsScript(list);\n    return result;\n};\n\nexport function convertArray(list: Parameter[]): any {\n    const tmp = [];\n    for (const p of list) {\n        if (p.getType && p.getType() === ParameterType.String) {\n            tmp.push(str2hexstr(p.getValue()));\n        } else if (p.getType && p.getType() === ParameterType.Long) {\n            tmp.push(new BigNumber(p.getValue()));\n        } else if (p.getType && p.getType() === ParameterType.Array) {\n            tmp.push(convertArray(p.value));\n        } else if (p.getType && p.getType() === ParameterType.Map) {\n            tmp.push(convertMap(p));\n        } else {\n            tmp.push(p.getValue ? p.getValue() : p);\n        }\n    }\n    return tmp;\n}\n\nexport function convertMap(p: Parameter): any {\n    const map = new Map();\n    for (const k of Object.keys(p.value)) {\n        const pVal = p.value[k];\n        // map.set(k, pVal);\n        if (pVal.type && pVal.type === ParameterType.Map) {\n            map.set(k, convertMap(pVal));\n        } else {\n            map.set(k, pVal);\n        }\n    }\n    return map;\n}\n\n/**\n * To deserialize the value return from smart contract invoke.\n * @param hexstr\n */\nexport function deserializeItem(sr: StringReader): any {\n    const t = parseInt(sr.read(1), 16);\n    if ( t === ParameterTypeVal.ByteArray) {\n        return sr.readNextBytes();\n    } else if (t === ParameterTypeVal.Boolean) {\n        return sr.readBoolean();\n    } else if (t === ParameterTypeVal.Integer) {\n        const v = bigIntFromBytes(sr.readNextBytes()).toNumber();\n        return v;\n    } else if (t === ParameterTypeVal.Array || t === ParameterTypeVal.Struct ) {\n        const length = sr.readNextLen();\n        const list = [];\n        for (let i = length; i > 0; i--) {\n            const ele = deserializeItem(sr);\n            list.push(ele);\n        }\n        return list;\n    } else if (t === ParameterTypeVal.Map ) {\n        const length = sr.readNextLen();\n        const map = new Map();\n        for (let i = length; i > 0; i--) {\n            const key = hexstr2str(deserializeItem(sr));\n            const value = deserializeItem(sr);\n            map.set(key, value);\n        }\n        return map;\n    } else {\n        throw Error('Invalid parameter type: ' + t);\n    }\n}\n\nexport const createCodeParamsScript = (list: any[]) => {\n    let result = '';\n    for (let i = list.length - 1; i >= 0; i--) {\n        const val = list[i];\n        if (typeof val === 'string') {\n            result += pushHexString(val);\n        } else if (typeof val === 'number') {\n            result += pushInt(val);\n        } else if (typeof val === 'boolean') {\n            result += pushBool(val);\n        } else if (val instanceof BigNumber) {\n            result += pushBigNum(val);\n        } else if (val instanceof Map) {\n            result += pushMap(val);\n            // const mapBytes = getMapBytes(val);\n            // result += pushHexString(mapBytes);\n        } else if (val instanceof Struct) {\n            const structBytes = getStructBytes(val);\n            result += pushHexString(structBytes);\n        } else if (val instanceof Array) {\n            result += createCodeParamsScript(convertArray(val));\n            result += pushInt(val.length);\n            result += num2hexstring(opcode.PACK);\n        }\n    }\n    return result;\n};\n\n// deprecated\nexport const buildSmartContractParam = (functionName: string, params: Parameter[]) => {\n    let result = '';\n    for (let i = params.length - 1; i > -1; i--) {\n        const type = params[i].getType();\n        switch (type) {\n        case ParameterType.Boolean:\n            result += pushBool(params[i].getValue());\n            break;\n\n        case ParameterType.Integer:\n            result += pushInt(params[i].getValue());\n            break;\n\n        case ParameterType.String:\n            const value = str2hexstr(params[i].getValue());\n            result += pushHexString(value);\n            break;\n\n        case ParameterType.ByteArray:\n            result += pushHexString(params[i].getValue());\n            break;\n\n        case ParameterType.Map:\n            const mapBytes = getMapBytes(params[i].getValue());\n            result += pushHexString(mapBytes);\n            break;\n\n        case ParameterType.Struct:\n            const structBytes = getStructBytes(params[i].getValue());\n            result += pushHexString(structBytes);\n            break;\n        // case ParameterType.Array:\n        //     result += buildSmartContractParam(params[i].getValue());\n        //     result += pushInt(params[i].getValue().length);\n        //     result += num2hexstring(opcode.PACK);\n        //     break;\n        default:\n            throw new Error('Unsupported param type: ' + JSON.stringify(params[i]));\n        }\n    }\n\n    result += pushInt(params.length);\n    result += num2hexstring(opcode.PACK);\n\n    result += pushHexString(str2hexstr(functionName));\n\n    return result;\n};\n\nexport const buildWasmContractParam = (params: Parameter[]) => {\n    const pList = [];\n\n    for (const p of params) {\n        const type = p.getType();\n        let o;\n\n        switch (type) {\n        case ParameterType.String:\n            o = {\n                type: 'string',\n                value: p.getValue()\n            };\n            break;\n        case ParameterType.Int:\n            o = {\n                type: 'int',\n                value: p.getValue().toString()\n            };\n            break;\n        case ParameterType.Long:\n            o = {\n                type: 'int64',\n                value: p.getValue()\n            };\n            break;\n        case ParameterType.IntArray:\n            o = {\n                type: 'int_array',\n                value: p.getValue()\n            };\n            break;\n        case ParameterType.LongArray:\n            o = {\n                type: 'int_array',\n                value: p.getValue()\n            };\n            break;\n        default:\n            break;\n        }\n        pList.push(o);\n    }\n\n    const result = {\n        Params: pList\n    };\n    return str2hexstr(JSON.stringify(result));\n};\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as base58 from 'bs58';\nimport * as cryptoJS from 'crypto-js';\nimport { ADDR_VERSION } from '../consts';\nimport { ERROR_CODE } from '../error';\nimport opcode from '../transaction/opcode';\nimport { comparePublicKeys, programFromPubKey, pushBigInt } from '../transaction/program';\nimport { pushHexString } from '../transaction/scriptBuilder';\nimport { ab2hexstring, hash160, num2hexstring, sha256, StringReader } from '../utils';\nimport { reverseHex } from './../utils';\nimport { PublicKey } from './PublicKey';\n\n/**\n * Representation of Address.\n *\n * There are 4 types of address:\n * 1. Public key based\n * 2. Multi public key based (m, n)\n * 3. Contract based\n * 4. ONT ID based\n *\n * The value is stored as base58 or hex encoded, therefore always use\n * toBase58() or serialize() according to requirements.\n */\nexport class Address {\n    static deserialize(sr: StringReader): Address {\n        return new Address(sr.read(20));\n    }\n    /**\n     * Generates public key based address.\n     *\n     * @param publicKey Public key to use\n     */\n    static fromPubKey(publicKey: PublicKey): Address {\n        const program = programFromPubKey(publicKey);\n        // const program = publicKey.key + num2hexstring(opcode.CHECKSIG);\n        const programHash = hash160(program);\n        return new Address(programHash);\n    }\n\n    /**\n     * Generates identity based address.\n     * @param ontid ONT ID in the form did:ont:AXmQDzzvpEtPkNwBEFsREzApTTDZFW6frD\n     */\n    static fromOntid(ontid: string): Address {\n        const address = ontid.substr(8);\n        return new Address(address);\n    }\n\n    /**\n     * Generates address from smart contract code.\n     *\n     * @param vmCode Hex encoded smart contract code\n     */\n    static fromVmCode(vmCode: string): Address {\n        const programHash = hash160(vmCode);\n        // programHash = num2hexstring(vmType) + programHash.substring(2);\n        return new Address(programHash);\n    }\n\n    /**\n     * Generates (m, n) threshold address.\n     *\n     * m - threshold\n     * n - total number of public keys\n     *\n     * @param m The threshold\n     * @param publicKeys Public key\n     */\n    static fromMultiPubKeys(m: number, publicKeys: PublicKey[]): Address {\n        const n = publicKeys.length;\n\n        if (m <= 0 || m > n || n > 24 ) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n\n        // const pkHexStrs = publicKeys.map((p) => p.serializeHex());\n        // pkHexStrs.sort();\n        publicKeys.sort(comparePublicKeys);\n        let result = '';\n        result += pushBigInt(m);\n        for (const s of publicKeys) {\n            result += pushHexString(s.serializeHex());\n        }\n        result += pushBigInt(n);\n        result += num2hexstring(opcode.CHECKMULTISIG);\n        const programHash = hash160(result);\n        return new Address(programHash);\n    }\n\n    /**\n     * Deterministicaly generates ONT ID from this public key.\n     */\n    static generateOntid(publicKey: PublicKey): string {\n        const address = Address.fromPubKey(publicKey);\n        const ontid = 'did:ont:' + address.toBase58();\n\n        return ontid;\n    }\n\n    /**\n     * Base58 or Hex encoded address\n     */\n    value: string;\n\n    constructor(value: string) {\n        if (value.length === 40 || value.length === 34) {\n            this.value = value;\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n\n    /**\n     * Gets Base58 encoded representation of the address.\n     */\n    toBase58() {\n        if (this.value.length === 34) {\n            return this.value;\n        } else {\n            return hexToBase58(this.value);\n        }\n    }\n\n    /**\n     * Gets Hex encoded representation of the address.\n     */\n    toHexString() {\n        let val;\n        if (this.value.length === 40) {\n            val = this.value;\n        } else {\n            val = base58ToHex(this.value);\n        }\n        return reverseHex(val);\n    }\n\n    serialize() {\n        if (this.value.length === 40) {\n            return this.value;\n        } else {\n            return base58ToHex(this.value);\n        }\n    }\n\n    /**\n     * Computes the salt from address for decrypt.\n     */\n    getB58Checksum() {\n        const address = this.toBase58();\n        const hash = cryptoJS.SHA256(address).toString();\n        const hash2 = sha256(hash);\n        return hash2.slice(0, 8);\n    }\n}\n\n/**\n *\n * @param programhash\n */\nfunction hexToBase58(hexEncoded: string): string {\n    const data = ADDR_VERSION + hexEncoded;\n\n    const hash = sha256(data);\n    const hash2 = sha256(hash);\n    const checksum = hash2.slice(0, 8);\n\n    const datas = data + checksum;\n\n    return base58.encode(new Buffer(datas, 'hex'));\n}\n\nfunction base58ToHex(base58Encoded: string) {\n    const decoded = base58.decode(base58Encoded);\n    const hexEncoded = ab2hexstring(decoded).substr(2, 40);\n\n    if (base58Encoded !== hexToBase58(hexEncoded)) {\n        throw new Error('[addressToU160] decode encoded verify failed');\n    }\n    return hexEncoded;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as base58 from 'bs58';\nimport { createCipheriv, createDecipheriv } from 'crypto';\nimport * as CryptoJS from 'crypto-js';\nimport * as asyncScrypt from 'scrypt-async';\nimport { DEFAULT_SCRYPT, OEP_FLAG, OEP_HEADER } from './consts';\nimport { Address } from './crypto/address';\nimport { PublicKey } from './crypto/PublicKey';\nimport { ERROR_CODE } from './error';\nimport { ab2hexstring, hexstring2ab, hexXor, isHexString, StringReader } from './utils';\n\n/**\n * Decribtes the structure of params for scrypt\n */\nexport interface ScryptParams {\n    cost: number;\n    blockSize: number;\n    parallel: number;\n    size: number;\n}\n\n/**\n * Synchronious call to scrypt-async-js.\n *\n * @param keyphrase Keyphrase to use\n * @param addressHash Hex encoded address\n * @param params Scrypt params\n */\nfunction scrypt(keyphrase: string, addressHash: string, params: ScryptParams) {\n    let derived: number[] = [];\n\n    asyncScrypt(\n        keyphrase.normalize('NFC'),\n        hexstring2ab(addressHash),\n        {\n            N: params.cost,\n            r: params.blockSize,\n            p: params.parallel,\n            dkLen: params.size\n        },\n        (result: string | number[]) => {\n            derived = result as number[];\n        }\n    );\n    return new Buffer(derived);\n}\n\n/**\n * Encrypt with aes-ctr\n */\nexport function encryptWithCtr(\n    privateKey: string,\n    publicKeyEncoded: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    // let privateKey = PrivateKey.deserializeWIF(wifKey);\n    // console.log( \"privateKey: \", privateKey );\n\n    // console.log( \"publickeyEncode: \", publicKey );\n\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    const address = Address.fromPubKey(publicKey);\n    // console.log( \"address: \", address );\n\n    const addresshash = address.getB58Checksum();\n    // console.log( \"addresshash: \", addresshash );\n\n    // Scrypt\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 32);\n    const derived2 = derived.slice(64);\n    const iv = CryptoJS.enc.Hex.parse(derived1);\n\n    // console.log('decrypt derived: ' + derived)\n    // console.log('decrypt iv: ' + iv)\n    // console.log('decrypt derived2: ' + derived2)\n\n    // AES Encrypt\n    // let xor = hexXor(privateKey, derived1);\n    const encrypted = CryptoJS.AES.encrypt(\n        CryptoJS.enc.Hex.parse(privateKey),\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\n    );\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\n\n    // Construct\n    // let assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\n    const assembled = encrypted.ciphertext.toString();\n\n    // console.log( \"enc assembled: \", assembled );\n\n    // return Bs58check.encode(Buffer.from(assembled, 'hex'));\n    return new Buffer(assembled, 'hex').toString('base64');\n}\n\n/**\n * Decrypt with aes-ctr\n * @param encryptedKey encrypted private key\n * @param keyphrase user's password to encrypt private key\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\n */\nexport function decryptWithCtr(\n    encryptedKey: string,\n    keyphrase: string,\n    saltOrAddress: string | Address,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    // let assembled = ab2hexstring(Bs58check.decode(encryptedKey));\n    const encrypted = Buffer.from(encryptedKey, 'base64').toString('hex');\n\n    // tslint:disable-next-line:no-console\n    // console.log('dec assembled: ', encrypted);\n\n    let salt = '';\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\n        salt = saltOrAddress;\n    } else if (saltOrAddress instanceof Address) {\n        salt = saltOrAddress.getB58Checksum();\n    } else {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    // let addressHash = assembled.substr(0, 8);\n    // console.log( \"dec addressHash: \", addressHash );\n\n    // let encrypted = assembled.substr(8);\n    // console.log( \"encrypted: \", encrypted );\n\n    // Scrypt\n    const derived = scrypt(keyphrase, salt, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 32);\n    const derived2 = derived.slice(64);\n    // console.log('decrypt derived: ' + derived)\n\n    const iv = CryptoJS.enc.Hex.parse(derived1);\n\n    // AES Decrypt\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\n    const decrypted = CryptoJS.AES.decrypt(\n        ciphertexts,\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\n    );\n    // console.log( \"decrypted: \", decrypted.toString() );\n\n    // Check PrivateKey\n    // ----------------------------------------------------------\n\n    // PrivateKey\n    // let privateKey = hexXor(decrypted.toString(), derived1);\n    const privateKey = decrypted.toString();\n    // console.log( \"privateKey: \", privateKey );\n    return privateKey;\n}\n\n/**\n * Checks if the password supplied to decrypt was correct.\n *\n * This method was taken out from decrypt, because it needs to create public key from private key\n * and it needs to be supplied from outside.\n *\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\n * @param publicKeyEncoded Public key from decrypted key\n */\nexport function checkCtrDecrypted(saltOrAddress: string | Address, publicKeyEncoded: string): void {\n    // const assembled = ab2hexstring(Bs58check.decode(encryptedKey));\n    // let assembled = Buffer.from(encryptedKey, 'base64').toString('hex')\n\n    // console.log( \"assembled: \", assembled );\n\n    // const addressHash = assembled.substr(0, 8);\n    // console.log( \"addressHash: \", addressHash );\n\n    // console.log('publicKey', publicKey)\n    let salt = '';\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\n        salt = saltOrAddress;\n    } else if (saltOrAddress instanceof Address) {\n        salt = saltOrAddress.getB58Checksum();\n    } else {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    // Address\n    const address = Address.fromPubKey(publicKey);\n    // console.log('address 2', address)\n\n    // AddressHash\n    const saltNew = address.getB58Checksum();\n\n    if (saltNew !== salt) {\n\n        // tslint:disable-next-line:no-console\n        console.log('keyphrase error.');\n\n        throw ERROR_CODE.Decrypto_ERROR;\n    }\n\n    // WIF\n    // let wifKey = privateKey.serializeWIF();\n    // console.log( \"wifKey: \", wifKey );\n}\n\n/**\n * Encrypt with aes-ecb\n */\nexport function encryptWithEcb(\n    privateKey: string,\n    publicKeyEncoded: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    const address = Address.fromPubKey(publicKey);\n    // console.log( \"address: \", address );\n\n    const addresshash = address.getB58Checksum();\n    // console.log( \"addresshash: \", addresshash );\n    // Scrypt\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 64);\n    const derived2 = derived.slice(64);\n\n    // AES Encrypt\n    const xor = hexXor(privateKey, derived1);\n    const encrypted = CryptoJS.AES.encrypt(\n        CryptoJS.enc.Hex.parse(xor),\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\n    // Construct\n    const assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\n    // console.log( \"assembled: \", assembled );\n    return base58.encode(Buffer.from(assembled, 'hex'));\n}\n\n/**\n * Decrypt with aes-ecb\n */\nexport function decryptWithEcb(\n    encryptedKey: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\n    // console.log( \"assembled: \", assembled );\n    const addressHash = assembled.substr(6, 8);\n    // console.log( \"addressHash: \", addressHash );\n    const encrypted = assembled.substr(-64);\n    // console.log( \"encrypted: \", encrypted );\n    // Scrypt\n    const derived = scrypt(keyphrase, addressHash, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 64);\n    const derived2 = derived.slice(64);\n\n    // AES Decrypt\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\n    const decrypted = CryptoJS.AES.decrypt(\n        ciphertexts,\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\n    // console.log( \"decrypted: \", decrypted.toString() );\n    // Check PrivateKey\n    // ----------------------------------------------------------\n    // PrivateKey\n    const privateKey = hexXor(decrypted.toString(), derived1);\n    // console.log( \"privateKey: \", privateKey );\n    return privateKey;\n}\n\n/**\n * Checks if the password supplied to decrypt was correct.\n *\n * This method was taken out from decrypt, because it needs to create public key from private key\n * and it needs to be supplied from outside.\n *\n * @param encryptedKey Original encrypted key\n * @param decryptedKey Decrypted key with decrypt\n * @param publicKeyEncoded Public key from decrypted key\n */\nexport function checkEcbDecrypted(encryptedKey: string, decryptedKey: string, publicKeyEncoded: string): void {\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\n    // console.log( \"assembled: \", assembled );\n    const addressHash = assembled.substr(6, 8);\n\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    // Address\n    const address = Address.fromPubKey(publicKey);\n    // console.log('address', address)\n    // AddressHash\n    const addressHashNew = address.getB58Checksum();\n\n    if (addressHashNew !== addressHash) {\n        // tslint:disable-next-line:no-console\n        console.log('keyphrase error.');\n        throw ERROR_CODE.Decrypto_ERROR;\n    }\n}\n\n/**\n * Encrypt with aes-gcm-256\n * This is the default encryption algorithm for private key\n * @param privateKey Private key to encpryt with\n * @param address Adderss to encrypt with\n * @param salt Salt to encrypt with\n * @param keyphrase User's password\n * @param scryptParams Optional params to encrypt\n */\nexport function encryptWithGcm(\n    privateKey: string,\n    address: Address,\n    salt: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n) {\n    if (!isHexString(privateKey)) {\n        throw new Error(ERROR_CODE.INVALID_PARAMS + ', Invalid private key');\n    }\n    const derived = scrypt(keyphrase, salt, scryptParams);\n    const derived1 = derived.slice(0, 12);\n    const derived2 = derived.slice(32);\n    const key = derived2;\n    const iv = derived1;\n    const aad = new Buffer(address.toBase58());\n    const cipher = createCipheriv('aes-256-gcm', key, iv);\n    cipher.setAAD(aad);\n    const plainText = Buffer.from(privateKey, 'hex');\n    let ciphertext = cipher.update(plainText);\n    // ciphertext += cipher.final();\n    const final = cipher.final();\n    const authTag = cipher.getAuthTag();\n    ciphertext = Buffer.concat([ciphertext, final]);\n\n    const result = Buffer.concat([ciphertext, authTag]);\n    return result.toString('base64');\n}\n\n/**\n * Decrypt with aes-256-gcm\n * @param encrypted Encrypted private key\n * @param address Address to decrypt with\n * @param salt Salt to decrypt with\n * @param keyphrase User's password\n * @param scryptParams Optioanl params to decrypt with\n */\nexport function decryptWithGcm(\n    // ciphertext: string,\n    // authTag: string,\n    encrypted: string,\n    address: Address,\n    salt: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n) {\n    if (salt.length !== 32) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const result = Buffer.from(encrypted, 'base64');\n    const ciphertext = result.slice(0, result.length - 16);\n    const authTag = result.slice(result.length - 16);\n    const derived = scrypt(keyphrase, salt, scryptParams);\n    const derived1 = derived.slice(0, 12);\n    const derived2 = derived.slice(32);\n    const key = derived2;\n    const iv = derived1;\n    const aad = new Buffer(address.toBase58());\n    // const auth = new Buffer(authTag, 'hex');\n    const decipher = createDecipheriv('aes-256-gcm', key, iv);\n    decipher.setAAD(aad);\n    decipher.setAuthTag(authTag);\n    let decrypted = decipher.update(ciphertext).toString('hex');\n\n    try {\n        decrypted += decipher.final().toString('hex');\n    } catch (err) {\n        throw ERROR_CODE.Decrypto_ERROR;\n    }\n    return decrypted;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as b64 from 'base64-url';\nimport { num2hexstring, StringReader } from '../utils';\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Signature generated by signing data with Private Key.\n */\nexport class Signature {\n    static deserializeJWT(encoded: string, algorithm: SignatureScheme, publicKeyId: string): Signature {\n        const decoded = b64.decode(encoded, 'hex');\n\n        return new Signature(\n        algorithm,\n        decoded,\n        publicKeyId\n        );\n    }\n\n    /**\n     * Deserializes PgpSignature to Signature.\n     * @param pgpSignature PgpSignature\n     */\n    static deserializePgp(pgpSignature: PgpSignature): Signature {\n        const value = new Buffer(pgpSignature.Value, 'base64').toString('hex');\n        const deserialzedValue = Signature.deserializeHex(value).value;\n        return new Signature(\n        SignatureScheme.fromLabel(pgpSignature.Algorithm),\n            deserialzedValue\n        );\n    }\n\n    /**\n     * Deserializes hex representation to Signature\n     * @param data hex string\n     */\n    static deserializeHex(data: string): Signature {\n        if (data.length < 4) {\n            throw new Error('Invalid params.');\n        }\n        const sr = new StringReader(data);\n        const scheme = parseInt(sr.read(1), 16);\n        const sigScheme = SignatureScheme.fromHex(scheme);\n        const value = data.substr(2);\n        const sig = new Signature(sigScheme, value);\n        return sig;\n    }\n\n    algorithm: SignatureScheme;\n    value: string;\n\n    /**\n     * Public key Id used for create this signature.\n     *\n     */\n    publicKeyId?: string;\n\n    constructor(algorithm: SignatureScheme, value: string, publicKeyId?: string) {\n        this.algorithm = algorithm;\n        this.value = value;\n        this.publicKeyId = publicKeyId;\n    }\n\n    /**\n     * Serializes signature to Hex representation.\n     * For transfer to java backend and verify it.\n     */\n    serializeHex(): string {\n        let result = '';\n        result += num2hexstring(this.algorithm.hex);\n        result += this.value;\n        return result;\n\n    }\n\n    /**\n     * Serializes signature to PGP representation with optional PublicKeyId.\n     *\n     * @param keyId Whole Public Key Id in the form <ONTID>#keys-<id>\n     */\n    serializePgp(keyId?: string): PgpSignature {\n        const encoded = new Buffer(this.serializeHex(), 'hex').toString('base64');\n        return {\n            PublicKeyId: keyId,\n            Format: 'pgp',\n            Value: encoded,\n            Algorithm: this.algorithm.label\n        };\n    }\n\n    /**\n     * Serializes signature to base64url format.\n     */\n    serializeJWT(): string {\n        return b64.encode(this.value, 'hex');\n    }\n}\n\n/**\n * PGP representation of the signature with embedded KeyId\n */\nexport interface PgpSignature {\n    PublicKeyId?: string;\n    Format: 'pgp';\n    Algorithm: string;\n    Value: string;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as bip39 from 'bip39';\nimport * as elliptic from 'elliptic';\nimport * as secureRandom from 'secure-random';\nimport { sm2 } from 'sm.js';\nimport * as wif from 'wif';\nimport { DEFAULT_ALGORITHM, DEFAULT_SM2_ID, ONT_BIP44_PATH } from '../consts';\nimport { ERROR_CODE } from '../error';\nimport { decryptWithGcm, encryptWithGcm, ScryptParams } from '../scrypt';\nimport { ab2hexstring, hexstring2ab, isBase64, str2hexstr } from '../utils';\nimport { Address } from './address';\nimport { Key, KeyParameters } from './Key';\nimport { KeyType } from './KeyType';\nimport { PublicKey } from './PublicKey';\nimport { Signable } from './signable';\nimport { Signature } from './Signature';\nimport { SignatureScheme } from './SignatureScheme';\n\n// tslint:disable-next-line:no-var-requires\nconst HDKey = require('@ont-community/hdkey-secp256r1');\n\nexport class PrivateKey extends Key {\n  /**\n   * Generates random Private key using supplied Key type and parameters.\n   *\n   * If no Key type or parameters is supplied, default SDK key type with default parameters will be used.\n   *\n   * @param keyType The key type\n   * @param parameters The parameters for the key type\n   */\n    static random(keyType?: KeyType, parameters?: KeyParameters): PrivateKey {\n        if (keyType === undefined) {\n            keyType = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\n        }\n\n        if (parameters === undefined) {\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\n        }\n\n        return new PrivateKey(ab2hexstring(secureRandom(32)), keyType, parameters);\n    }\n\n    /**\n     * Creates PrivateKey from Wallet Import Format (WIF) representation.\n     *\n     * @param wifkey WIF private key representation\n     *\n     */\n    static deserializeWIF(wifkey: string): PrivateKey {\n        const key = ab2hexstring(wif.decode(wifkey, 128).privateKey);\n        return new PrivateKey(key);\n    }\n\n    /**\n     * Creates PrivateKey from mnemonic according to BIP39 protocol.\n     *\n     * @param mnemonic Space separated list of words\n     *\n     */\n    static generateFromMnemonic(mnemonic: string, derivePath: string = ONT_BIP44_PATH): PrivateKey {\n        if (mnemonic.split(' ').length < 12) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\n\n        // generate privateKey\n        // const pri = seed.substr(0, 64);\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\n        const pri = hdkey.derive(derivePath);\n        const key = Buffer.from(pri.privateKey).toString('hex');\n        const privateKey = new PrivateKey(key);\n        return privateKey;\n    }\n\n    /**\n     * Signs the data with supplied private key using signature schema.\n     *\n     * If the signature schema is not provided, the default schema for this key type is used.\n     *\n     * This method is not suitable, if external keys (Ledger, TPM, ...) support is required.\n     *\n     * @param msg Hex encoded input data or Signable object\n     * @param schema Signing schema to use\n     * @param publicKeyId Id of public key\n     */\n    sign(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Signature {\n        if (schema === undefined) {\n            schema = this.algorithm.defaultSchema;\n        }\n\n        if (!this.isSchemaSupported(schema)) {\n            throw new Error('Signature schema does not match key type.');\n        }\n\n        // retrieves content to sign if not provided directly\n        if (typeof msg !== 'string') {\n            msg = msg.getSignContent();\n        }\n\n        let hash: string;\n        if (schema === SignatureScheme.SM2withSM3) {\n            // library sm.js (SM2withSM3) has implemented hashing as part of signing, therefore it is skipped\n            hash = msg;\n        } else {\n            hash = this.computeHash(msg, schema);\n        }\n\n        const signed = this.computeSignature(hash, schema);\n        return new Signature(schema, signed, publicKeyId);\n    }\n\n    /**\n     * Asynchroniously signs the data with supplied private key using signature schema.\n     *\n     * If the signature schema is not provided, the default schema for this key type is used.\n     *\n     * This method is suitable, if external keys (Ledger, TPM, ...) support is required.\n     *\n     * @param msg Hex encoded input data or Signable object\n     * @param schema Signing schema to use\n     * @param publicKeyId Id of public key\n     */\n    async signAsync(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Promise<Signature> {\n        return this.sign(msg, schema, publicKeyId);\n    }\n\n    /**\n     * Derives Public key out of Private key.\n     */\n    getPublicKey(): PublicKey {\n        switch (this.algorithm) {\n        case KeyType.ECDSA:\n            return this.getEcDSAPublicKey();\n        case KeyType.EDDSA:\n            return this.getEdDSAPublicKey();\n        case KeyType.SM2:\n            return this.getSM2PublicKey();\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Decrypts encrypted private key with supplied password.\n     *\n     * @param keyphrase Password to decrypt with\n     * @param address For aad in decryption\n     * @param 16 secure random bytes\n     * @param params Optional Scrypt params\n     */\n    decrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\n        // const decrypted = decrypt(this.key, keyphrase, checksum, params);\n        if (salt.length === 24 && isBase64(salt)) {\n            salt = Buffer.from(salt, 'base64').toString('hex');\n        }\n        const decrypted = decryptWithGcm(this.key, address, salt, keyphrase, params);\n        const decryptedKey = new PrivateKey(decrypted, this.algorithm, this.parameters);\n        // checkDecrypted(checksum, decryptedKey.getPublicKey().serializeHex());\n        const pk = decryptedKey.getPublicKey();\n        const addrTmp = Address.fromPubKey(pk);\n        if (addrTmp.toBase58() !== address.toBase58()) {\n            throw ERROR_CODE.Decrypto_ERROR;\n        }\n        return decryptedKey;\n    }\n\n    /**\n     * Encrypts private key with supplied password.\n     *\n     * @param keyphrase Password to encrypt with\n     * @param address For aad in encryption\n     * @param salt 16 secure random bytes\n     * @param params Optional Scrypt params\n     */\n    encrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\n        // add address check\n        const publicKey = this.getPublicKey();\n        const addr = Address.fromPubKey(publicKey).toBase58();\n        if (addr !== address.toBase58()) {\n            throw ERROR_CODE.INVALID_ADDR;\n        }\n        const encrypted = encryptWithGcm(this.key, address, salt, keyphrase, params);\n        return new PrivateKey(encrypted, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Derives Public key out of Private key using EcDSA algorithm.\n     */\n    getEcDSAPublicKey(): PublicKey {\n        const ec = new elliptic.ec(this.parameters.curve.preset);\n        const keyPair = ec.keyFromPrivate(this.key, 'hex');\n        const pk = keyPair.getPublic(true, 'hex');\n\n        return new PublicKey(pk, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Derives Public key out of Private key using EdDSA algorithm.\n     */\n    getEdDSAPublicKey(): PublicKey {\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\n        const keyPair = eddsa.keyFromSecret(this.key, 'hex');\n        const pk = keyPair.getPublic(true, 'hex');\n\n        return new PublicKey(pk, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Derives Public key out of Private key using SM2 algorithm.\n     */\n    getSM2PublicKey(): PublicKey {\n        const keyPair = sm2.SM2KeyPair(null, this.key);\n        const pk = keyPair.pubToString('compress');\n\n        return new PublicKey(pk, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Computes signature of message hash using specified signature schema.\n     *\n     * @param hash Message hash\n     * @param schema Signature schema to use\n     */\n    computeSignature(hash: string, schema: SignatureScheme): string {\n        switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return this.computeEcDSASignature(hash);\n        case SignatureScheme.EDDSAwithSHA512:\n            return this.computeEdDSASignature(hash);\n        case SignatureScheme.SM2withSM3:\n            return this.computeSM2Signature(hash);\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Computes EcDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     */\n    computeEcDSASignature(hash: string): string {\n        const ec = new elliptic.ec(this.parameters.curve.preset);\n        const signed = ec.sign(hash, this.key, { canonical: true });\n        return Buffer.concat([\n            signed.r.toArrayLike(Buffer, 'be', 32),\n            signed.s.toArrayLike(Buffer, 'be', 32)\n        ]).toString('hex');\n    }\n\n    /**\n     * Computes EdDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     */\n    computeEdDSASignature(hash: string): string {\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\n        const signed = eddsa.sign(hash, this.key, null);\n        return Buffer.concat([\n            signed.R.toArrayLike(Buffer, 'be', 32),\n            signed.S.toArrayLike(Buffer, 'be', 32)\n        ]).toString('hex');\n    }\n\n    /**\n     * Computes SM2 signature of message hash.\n     *\n     * Only default SM2 ID is supported.\n     *\n     * @param hash Message hash\n     */\n    computeSM2Signature(hash: string): string {\n        const keyPair = sm2.SM2KeyPair(null, this.key);\n        const signed = keyPair.sign(hexstring2ab(hash));\n\n        const id = DEFAULT_SM2_ID;\n\n        return str2hexstr(id + '\\0') + signed.r + signed.s;\n    }\n\n    /**\n     * Gets Wallet Import Format (WIF) representation of the PrivateKey.\n     *\n     */\n    serializeWIF(): string {\n        return wif.encode(128, Buffer.from(this.key, 'hex'), true);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { JsonKey, KeyParameters } from './Key';\nimport { KeyType } from './KeyType';\nimport { PrivateKey } from './PrivateKey';\n\n/**\n * Interface for Key deserializers\n */\nexport interface KeyDeserializer {\n    getType(): string;\n    deserialize(json: JsonKey): PrivateKey;\n}\n\n/**\n * Default private key deserializer.\n */\nexport class DefaultKeyDeserializer implements KeyDeserializer {\n    getType(): string {\n        return '';\n    }\n\n    deserialize(json: JsonKey): PrivateKey {\n        if (json.key != null) {\n            return new PrivateKey(\n                json.key,\n                KeyType.fromLabel(json.algorithm),\n                KeyParameters.deserializeJson(json.parameters)\n            );\n        } else {\n            throw new Error('Unsupported Key type.');\n        }\n    }\n}\n\n/**\n * Registered key deserializers\n */\nconst keyDeserializers: KeyDeserializer[] = [];\nconst defaultKeyDeserializer = new DefaultKeyDeserializer();\n\n/**\n * Registers new external deserializer for private keys.\n *\n * @param deserializer Deserializer instance\n */\nexport function registerKeyDeserializer(deserializer: KeyDeserializer) {\n    keyDeserializers.push(deserializer);\n}\n\n/**\n * Creates PrivateKey from Json representation.\n *\n * @param json Json private key representation\n *\n */\nexport function deserializeFromJson(json: JsonKey): PrivateKey {\n    if (json.external == null) {\n        return defaultKeyDeserializer.deserialize(json);\n    } else {\n        for (const deserializer of keyDeserializers) {\n            if (deserializer.getType() === json.external.type) {\n                return deserializer.deserialize(json);\n            }\n        }\n\n        throw new Error('Unsupported Key type.');\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as CTX from 'milagro-crypto-js';\nimport * as utils from '../utils';\n\n/**\n * Issuer\n *  Issuer in Anonymous Credential\n */\nexport class Issuer {\n\n    sk: SecretKey;\n    pk: IssuerPublicKey;\n    // AttrMap: Map<string, number>;\n    AttributeName: string[];\n\n    param: CryptoSuite;\n\n    constructor(curve: string) {\n        this.param = new CryptoSuite(curve);\n        this.sk = new SecretKey(this.param);\n    }\n\n    /* GenerateSk():SecretKey\n     *  generate a random secret key\n     */\n    GenerateSk(): SecretKey {\n        this.sk.Rand();\n        return this.sk;\n    }\n\n    /* GenerateKeyPair()\n     *  generate a random secret key\n     */\n    GenerateKeyPair() {\n        this.sk = SecretKey.GenerateSk(this.param);\n        this.pk = this.sk.GenerateIssuerPublicKey();\n    }\n\n    /* SetAttributeSet(AttributeName:string[])\n     *  generate a random secret key\n     */\n    SetAttributeSet(AttributeName: string[]) {\n        this.AttributeName = AttributeName;\n        this.pk.GenerateAttr(AttributeName);\n    }\n\n    /* Sign(Nym, attrs):Credential\n     *  sign a credential for a user\n     */\n    Sign(Nym: any, attrs: any[]): Credential {\n        // random e, s\n        const e = this.param.getRandBN();\n        const s = this.param.getRandBN();\n        const B = new this.param.ECP(); // B = g1 · HRand^s · Nym · MulAll(HAttrs[i]^(Attrs[i]))\n        B.copy(this.param.g1);\n        B.add(this.param.PAIR.G1mul(this.pk.h0, s));\n        B.add(Nym);\n        for (let i = 0; i < this.pk.attr.length; i++) {\n            B.add(this.param.PAIR.G1mul(this.pk.h[i], attrs[i]));\n        }\n\n        let A = new this.param.ECP(); // A = B^(1/(e+x))\n        const tmp = new this.param.BIG(); // tmp = (1/(e+x))\n        tmp.copy(e);\n        tmp.add(this.sk.value); // !!!!!!!!!!!\n        tmp.invmodp(this.param.order);\n\n        A = this.param.PAIR.G1mul(B, tmp);\n\n        const cred = new Credential(this.param);\n        cred.Set(A, B, e, s, attrs);\n        return cred;\n    }\n\n    /* GetPk()\n     *  get issuer's public key\n     */\n    GetPk(): IssuerPublicKey {\n        return IssuerPublicKey.COPY(this.pk);\n    }\n\n    /* GenerateSk():SecretKey\n     *  generate a random secret key\n     */\n    GenerateNonce(): any {\n        const nonce = this.param.getRandBN();\n        return nonce;\n    }\n\n    VerifyCredentialRequest(CR: any): boolean {\n        return this.pk.VerifyCredentialRequest(CR);\n    }\n\n}\n\n/**\n * User\n *  An user in Anonymous Credential\n *  Prover and Verifier are all user.\n */\nexport class User {\n\n    attrs: any[];\n\n    private sk: SecretKey;\n    private Nym: any;\n    // private pi: {\n    //     C: any,\n    //     S: any\n    // };\n\n    private Cred: Credential;\n\n    private ipk: IssuerPublicKey;\n\n    private param: CryptoSuite;\n\n    constructor(curve: string) {\n        this.param = new CryptoSuite(curve);\n    }\n\n    /* GenerateSk():SecretKey\n     *  generate a random secret key\n     */\n    GenerateSk(): SecretKey {\n        this.sk = SecretKey.GenerateSk(this.param);\n        return this.sk;\n    }\n\n    /* SetIpk(ipk:IssuerPublicKey)\n     *  save issuer's public key\n     */\n    SetIpk(ipk: IssuerPublicKey) {\n        this.ipk = IssuerPublicKey.COPY(ipk);\n    }\n\n    GenerateCrendentialRequest(nonce: any): any {\n        if (this.ipk === undefined) {\n            // tslint:disable-next-line:no-console\n            console.log('Please set ipk first.');\n            return;\n        }\n\n        const ipk = this.ipk;\n        const Nym = this.param.PAIR.G1mul(ipk.h_sk, this.sk.value); // Nym\n\n        const r = this.param.getRandBN(); // r\n        const t1 = this.param.PAIR.G1mul(ipk.h_sk, r); // t1\n\n        const C = this.param.hashToBN(t1, ipk.h_sk, Nym, nonce);\n\n        const S = this.param.BIG.modmul(C, this.sk.value, this.param.order);\n        S.add(r);\n        S.mod(this.param.order);\n\n        const pi = {\n            C,\n            S\n        };\n\n        const attrs = this.param.genAttrBN(ipk.attr);\n\n        this.Nym = Nym;\n        this.attrs = attrs;\n\n        const CR = {\n            Nym,\n            pi,\n            nonce,\n            attrs\n        };\n\n        return CR;\n    }\n\n    VerifyBBSplus(Cred: Credential): boolean {\n        // pk   <- ipk.w\n        // m    <- attrs\n        // sig  <- (A,E,s)\n\n        // check if\n        // e(A, g2^E * pk) == e(B, g2)\n        // and if\n        // B == g1 * HRand^s * Nym * (h1^m1 * ... * hL^mL)\n\n        const wg2e = new this.param.ECP2();\n        wg2e.copy(this.ipk.w);\n        wg2e.add(this.param.PAIR.G2mul(this.param.g2, Cred.sig.e));\n        wg2e.affine(); // ~!!!!use affine() after ECP's mul operation, for pairing.\n\n        const A = new this.param.ECP();\n        A.copy(Cred.sig.A);\n        A.affine();\n\n        let left = this.param.PAIR.ate(wg2e, A);\n        left = this.param.PAIR.fexp(left);\n\n        const B = new this.param.ECP();\n        B.copy(this.param.g1);\n        B.add(this.param.PAIR.G1mul(this.ipk.h0, Cred.sig.s));\n        B.add(this.Nym);\n\n        for (let i = 0; i < Cred.attrs.length; i++) {\n            B.add(this.param.PAIR.G1mul(this.ipk.h[i], Cred.attrs[i]));\n        }\n\n        B.affine();\n        let right = this.param.PAIR.ate(this.param.g2, B);\n        right = this.param.PAIR.fexp(right);\n\n        return left.equals(right);\n    }\n\n    SetCredential(Cred: Credential) {\n        this.Cred = new Credential(this.param);\n        this.Cred.Copy(Cred);\n        return true;\n    }\n\n    Prove(D: any[]) {\n        const ipk = this.ipk;\n        const Cred = this.Cred;\n\n        const r1 = this.param.getRandBN(); // r1\n\n        const A_ = this.param.PAIR.G1mul(Cred.sig.A, r1); // A'\n\n        const r3 = new this.param.BIG(0); // r3\n        r3.copy(r1);\n        r3.invmodp(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        let _e = new this.param.BIG(0); // -e\n        _e.copy(Cred.sig.e);\n        _e = this.param.BIG.modneg(_e, this.param.order);\n\n        const _A = this.param.PAIR.G1mul(A_, _e); // _A\n        _A.add(this.param.PAIR.G1mul(Cred.sig.B, r1));\n\n        const r2 = this.param.getRandBN(); // r2\n        // tslint:disable-next-line:variable-name\n        let _r2 = new this.param.BIG(0); // -r2\n        _r2.copy(r2);\n        _r2 = this.param.BIG.modneg(_r2, this.param.order);\n\n        const B_ = this.param.PAIR.G1mul(Cred.sig.B, r1); // B'\n        B_.add(this.param.PAIR.G1mul(ipk.h0, _r2));\n\n        // tslint:disable-next-line:variable-name\n        let s_ = this.param.BIG.modmul(r2, r3, this.param.order); // s'\n        s_ = this.param.BIG.modneg(s_, this.param.order);\n        s_.add(Cred.sig.s);\n        s_.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const r_a = []; // r_a[]\n        for (let i = 0; i < D.length; i++) {\n            if (D[i] === 0) {\n                r_a[i] = this.param.getRandBN();\n            } else {\n                r_a[i] = false;\n            }\n        }\n\n        // tslint:disable-next-line:variable-name\n        const r_e = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_r2 = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_r3 = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_s_ = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_sk = this.param.getRandBN();\n\n        const E = this.param.PAIR.G1mul(ipk.h_sk, r_sk); // E\n\n        const t1 = this.param.PAIR.G1mul(A_, r_e); // t1\n        t1.add(this.param.PAIR.G1mul(ipk.h0, r_r2));\n\n        const t2 = this.param.PAIR.G1mul(B_, r_r3); // t2\n        t2.add(this.param.PAIR.G1mul(ipk.h0, r_s_));\n        t2.add(this.param.PAIR.G1mul(E, new this.param.BIG(-1)));\n        for (let i = 0; i < r_a.length; i++) {\n            if (r_a[i] !== false) {\n                t2.add(this.param.PAIR.G1mul(ipk.h[i], r_a[i]));\n            }\n        }\n\n        // c' = H(A', _A, B', Nym, t1, t2, g1, HRand, h1, ... , hL, w)\n        // tslint:disable-next-line:variable-name\n        const c_ = this.param.hashToBN(\n            A_,\n            _A,\n            B_,\n            this.Nym,\n            t1,\n            t2,\n            this.param.g1,\n            ipk.h0,\n            ipk.h,\n            ipk.w\n        );\n\n        const nonce = this.param.getRandBN();\n        // c = H(nonce, c', (D, I))\n        const c = this.param.hashToBN(nonce, c_, D, this.attrs);\n\n        // tslint:disable-next-line:variable-name\n        const s_sk = new this.param.BIG(0);\n        s_sk.copy(r_sk);\n        s_sk.add(this.param.BIG.modmul(c, this.sk.value, this.param.order));\n        s_sk.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_a = [];\n        for (let i = 0; i < D.length; i++) {\n            if (D[i] === 0) {\n                s_a[i] = new this.param.BIG(0);\n                s_a[i].copy(r_a[i]);\n                s_a[i].sub(this.param.BIG.modmul(c, this.attrs[i], this.param.order));\n                s_a[i].mod(this.param.order);\n            } else {\n                s_a[i] = false;\n            }\n        }\n\n        // tslint:disable-next-line:variable-name\n        const s_e = new this.param.BIG(0);\n        s_e.copy(r_e);\n        s_e.sub(this.param.BIG.modmul(c, Cred.sig.e, this.param.order));\n        s_e.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_r2 = new this.param.BIG(0);\n        s_r2.copy(r_r2);\n        s_r2.add(this.param.BIG.modmul(c, r2, this.param.order));\n        s_r2.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_r3 = new this.param.BIG(0);\n        s_r3.copy(r_r3);\n        s_r3.add(this.param.BIG.modmul(c, r3, this.param.order));\n        s_r3.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_s_ = new this.param.BIG(0);\n        s_s_.copy(r_s_);\n        s_s_.sub(this.param.BIG.modmul(c, s_, this.param.order));\n        s_s_.mod(this.param.order);\n\n        const pi = {\n            c,\n            s_sk,\n            s_a,\n            s_e,\n            s_r2,\n            s_r3,\n            s_s_,\n            nonce\n        };\n\n        const proof = {\n            A_,\n            _A,\n            B_,\n            Nym: this.Nym,\n            pi\n        };\n\n        return proof;\n    }\n\n    Verify(proof: any, D: any[], attrs: any[]): boolean {\n        const ipk = this.ipk;\n\n        // make sure A is not infinity\n        const O = new this.param.ECP(0); // Add\n        // let O = new this.param.ECP(1); // Muliply\n        if (proof.A_.equals(O)) {\n            // tslint:disable-next-line:no-console\n            console.log('A\\' == O return true, verify failed.');\n            return false;\n        }\n\n        const A_ = new this.param.ECP();\n        A_.copy(proof.A_);\n        const w = new this.param.ECP2();\n        w.copy(ipk.w);\n        const _A = new this.param.ECP();\n        _A.copy(proof._A);\n        const g2Dup = new this.param.ECP2();\n        g2Dup.copy(this.param.g2);\n\n        A_.affine();\n        w.affine();\n        _A.affine();\n        g2Dup.affine();\n\n        let left = this.param.PAIR.ate(w, A_);\n        let right = this.param.PAIR.ate(g2Dup, _A);\n\n        left = this.param.PAIR.fexp(left);\n        right = this.param.PAIR.fexp(right);\n\n        if (!left.equals(right)) {\n            // tslint:disable-next-line:no-console\n            console.log('e(A\\', w) == e(_A, g2) return false, verify failed.');\n            return false;\n        }\n\n        _A.copy(proof._A);\n        // tslint:disable-next-line:variable-name\n        const _t1 = this.param.PAIR.G1mul(A_, proof.pi.s_e);\n        _t1.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_r2));\n        _A.sub(proof.B_);\n        _t1.add(this.param.PAIR.G1mul(_A, this.param.BIG.modneg(proof.pi.c, this.param.order)));\n\n        // ~t2 : (B')^s_r3 · HRand^s_s' · HSk^(-s_sk) · MulAll(hi^(-s_ai)) · (g1·MulAll(hi^ai))^(-c)\n        // tslint:disable-next-line:variable-name\n        const _t2 = this.param.PAIR.G1mul(proof.B_, proof.pi.s_r3);\n        _t2.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_s_));\n        _t2.add(\n            this.param.PAIR.G1mul(ipk.h_sk, this.param.BIG.modneg(proof.pi.s_sk, this.param.order))\n        );\n\n        const sum = new this.param.ECP();\n        sum.copy(this.param.g1);\n        for (let i = 0; i < D.length; i++) {\n            if (D[i] === 0) {\n                _t2.add(this.param.PAIR.G1mul(ipk.h[i], proof.pi.s_a[i]));\n            } else {\n                sum.add(this.param.PAIR.G1mul(ipk.h[i], attrs[i]));\n            }\n        }\n\n        _t2.add(this.param.PAIR.G1mul(sum, this.param.BIG.modneg(proof.pi.c, this.param.order)));\n\n        const c1 = this.param.hashToBN(\n            proof.A_,\n            proof._A,\n            proof.B_,\n            proof.Nym,\n            _t1,\n            _t2,\n            this.param.g1,\n            ipk.h0,\n            ipk.h,\n            ipk.w\n        );\n        const c2 = this.param.hashToBN(proof.pi.nonce, c1, D, attrs);\n\n        if (this.param.BIG.comp(c2, proof.pi.c) !== 0) {\n            // tslint:disable-next-line:no-console\n            console.log(\n                // tslint:disable-next-line:max-line-length\n                'c == H(nonce, H(A\\', _A, B\\', Nym, ~t1, ~t2, g1, HRand, h1, ... , hL, w), (D, I)) return false, verify failed.'\n            );\n            return false;\n        }\n\n        return true;\n    }\n}\n\n/**\n * CryptoSuite\n *  contains everything in Paring Based Cryptography\n */\nexport class CryptoSuite {\n    curve: string;\n    ctx: any;\n    order: any;\n    PAIR: any;\n    ECP: any;\n    ECP2: any;\n    BIG: any;\n    rng: any;\n    g1: any;\n    g2: any;\n\n    constructor(curve: string) {\n        this.curve = curve;\n        this.ctx = new CTX(curve);\n\n        this.PAIR = this.ctx.PAIR;          // Set pairing interface\n        this.ECP = this.ctx.ECP;            // Set G1 interface\n        this.ECP2 = this.ctx.ECP2;          // Set G2 interface\n        this.BIG = this.ctx.BIG;            // Set BN interface\n        this.rng = new this.ctx.RAND();     // new random number generator\n\n        this.g1 = this.getG1Generator();       // g1\n        this.g2 = this.getG2Generator();       // g2\n        this.order = this.getOrder(); // n\n    }\n\n    getG1Generator() {\n        const g1 = new this.ctx.ECP(0);    // new G1\n        const x = new this.ctx.BIG(0);\n        const y = new this.ctx.BIG(0);\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Gx);\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Gy);\n        g1.setxy(x, y);\n        return g1;\n    }\n\n    getG2Generator() {\n        const g2 = new this.ctx.ECP2(0);\n        const x = new this.ctx.BIG(0);\n        const y = new this.ctx.BIG(0);\n        const qx = new this.ctx.FP2(0);\n        const qy = new this.ctx.FP2(0);\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pxa);\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pxb);\n        qx.bset(x, y);\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pya);\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pyb);\n        qy.bset(x, y);\n        g2.setxy(qx, qy);\n        return g2;\n    }\n\n    getOrder() {\n        const r = new this.ctx.BIG(0);     // new BN\n        r.rcopy(this.ctx.ROM_CURVE.CURVE_Order);\n        return r;\n    }\n\n    getRandBN(): any {\n        const buf = utils.generateRandomArray(256);\n        this.rng.clean();\n        this.rng.seed(256, buf);\n        const r = this.BIG.randomnum(this.order, this.rng);\n        return r;\n    }\n\n    getRandG1(): any {\n        const r = this.getRandBN();\n        const g = this.PAIR.G1mul(this.g1, r);\n        return g;\n    }\n\n    getRandG2(): any {\n        const r = this.getRandBN();\n        const g = this.PAIR.G2mul(this.g2, r);\n        return g;\n    }\n\n    hashToBN(...points: any[]): any {\n        let all: any[] = [];\n        let tmp: ConcatArray<any> = [];\n        points.forEach((p) => {\n            if (Array.isArray(p)) {\n                if (typeof p[0] === 'number') {\n                    all = all.concat(p);\n                    tmp = [];\n                } else {\n                    p.forEach((pp) => {\n                        pp.toBytes(tmp);\n                        all = all.concat(tmp);\n                        tmp = [];\n                    });\n                }\n            } else {\n                p.toBytes(tmp);\n                all = all.concat(tmp);\n                tmp = [];\n            }\n        });\n        const H = new this.ctx.HASH256();\n        H.process_array(all);\n        const R = H.hash();\n        const C = this.BIG.fromBytes(R);\n        C.mod(this.order);\n        return C;\n    }\n\n    genAttrBN(attrs: any): any {\n        const HAttr = [];\n\n        for (let i = 0; i < attrs.length; i++) {\n            const t = this.getRandBN();\n            HAttr[i] = t;\n        }\n\n        return HAttr;\n    }\n\n    genAttrElement(attrs: any): any {\n        const HAttr = [];\n\n        for (let i = 0; i < attrs.length; i++) {\n            const t = this.getRandG1();\n            HAttr[i] = t;\n        }\n\n        return HAttr;\n    }\n}\n\n/**\n * CryptoBase\n *  contains a refrence to a CryptoSuite instance.\n */\nexport class CryptoBase {\n    param: CryptoSuite;\n    constructor(param: CryptoSuite) {\n        this.param = param;\n    }\n}\n\nexport class SecretKey extends CryptoBase {\n    /*\n     * GenerateSk():SecretKey\n     * Generate a random secret key.\n     */\n    static GenerateSk(param: CryptoSuite): SecretKey {\n        const x = param.getRandBN(); // isk\n        const sk = new SecretKey(param);\n        sk.setValue(x);\n        return sk;\n    }\n\n    value: any;\n\n    constructor(param: CryptoSuite) {\n        super(param);\n        this.value = new this.param.BIG(0);\n    }\n\n    setValue(v: any) {\n        this.value.copy(v);\n    }\n\n    GenerateIssuerPublicKey(): IssuerPublicKey {\n        const x = this.value;\n        const w = this.param.PAIR.G2mul(this.param.g2, x); // w\n        let r = this.param.getRandBN(); // random number\n        // tslint:disable-next-line:variable-name\n        const _g1 = this.param.PAIR.G1mul(this.param.g1, r);\n        // tslint:disable-next-line:variable-name\n        const _g2 = this.param.PAIR.G1mul(_g1, x);\n\n        // zkp - pi\n        r = this.param.getRandBN();\n        const t1 = this.param.PAIR.G2mul(this.param.g2, r);\n        const t2 = this.param.PAIR.G1mul(_g1, r);\n\n        const C = this.param.hashToBN(t1, t2, this.param.g2, _g1, w, _g2);\n\n        const S = this.param.BIG.modmul(C, x, this.param.order);\n        S.add(r);\n        S.mod(this.param.order);\n\n        const pi = {\n            C,\n            S\n        };\n\n        const pk = new IssuerPublicKey(this.param);\n        pk.SetBasicValue(w, _g1, _g2, pi);\n        return pk;\n    }\n\n    /*\n     * ToBytes()\n     *  convert secret key to string format.\n     *  TODO:: add serialize function.\n     */\n    ToBytes() {\n        if (this.value === undefined) {\n            return '';\n        }\n        return this.value.toBytes();\n    }\n\n    /*\n     * FromString(s: any)\n     *  convert string to a SecretKey.\n     *  TODO:: add unserialize function.\n     */\n    FromBytes(s: any) {\n        this.value = this.param.BIG.fromBytes(s);\n        return this.value.toString();\n    }\n\n    /*\n     * GenerateSk():SecretKey\n     * Generate a random secret key.\n     */\n    Rand() {\n        const x = this.param.getRandBN(); // isk\n        this.setValue(x);\n    }\n\n}\n\nexport class IssuerPublicKey extends CryptoBase {\n    /*\n     * COPY(target: IssuerPublicKey):IssuerPublicKey\n     *  copy and return a new public key\n     */\n    static COPY(target: IssuerPublicKey): IssuerPublicKey {\n        const pk = new IssuerPublicKey(target.param);\n        pk.SetBasicValue(target.w, target._g1, target._g2, target.pi);\n        pk.SetAttrValue(target.h0, target.h_sk, target.h, target.attr);\n        return pk;\n    }\n\n    w: any;\n    // tslint:disable-next-line:variable-name\n    _g1: any;\n    // tslint:disable-next-line:variable-name\n    _g2: any;\n    pi: {\n        C: any,\n        S: any\n    };\n    h0: any;\n    // tslint:disable-next-line:variable-name\n    h_sk: any;\n    h: any;\n    attr: any[];\n\n    constructor(param: CryptoSuite) {\n        super(param);\n\n        this.w = new this.param.ECP2();\n        this._g1 = new this.param.ECP();\n        this._g2 = new this.param.ECP();\n\n        const C = new this.param.BIG();\n        const S = new this.param.BIG();\n        this.pi = {C, S};\n\n        this.h0 = new this.param.ECP();\n        this.h_sk = new this.param.ECP();\n        this.attr = [];\n    }\n\n    /*\n     * SetBasicValue(w, _g1, _g2, pi)\n     *  set basic values of the public key\n     */\n    // tslint:disable-next-line:variable-name\n    SetBasicValue(w: any, _g1: any, _g2: any, pi: any) {\n        this.w.copy(w);\n        this._g1.copy(_g1);\n        this._g2.copy(_g2);\n        this.pi.C.copy(pi.C);\n        this.pi.S.copy(pi.S);\n    }\n\n    /*\n     * SetAttrValue(h0, h_sk, h, attr)\n     *  set basic values of the public key\n     */\n    // tslint:disable-next-line:variable-name\n    SetAttrValue(h0: any, h_sk: any, h: any[], attr: any[]) {\n        this.h0.copy(h0);\n        this.h_sk.copy(h_sk);\n        this.h = [];\n        this.attr = [];\n\n        for (let i = 0; i < h.length; i++) {\n            this.h[i] = new this.param.ECP();\n            this.h[i].copy(h[i]);\n        }\n        for (let i = 0; i < attr.length; i++) {\n            this.attr[i] = attr[i];\n        }\n    }\n\n    /*\n     * GenerateAttr(AttributeName)\n     *  generates\n     *    ipk.h0: rand G1\n     *    ipk.h_sk: rand G1\n     *    ipk.h[]: Rand G1 array, match to AttributeName\n     */\n    GenerateAttr(AttributeName: any) {\n        const HAttr = this.param.genAttrElement(AttributeName);\n        const h0 = this.param.getRandG1();\n        // tslint:disable-next-line:variable-name\n        const h_sk = this.param.getRandG1();\n        const h: any[] = [];\n\n        HAttr.forEach((a: any) => {\n            h.push(a);\n        });\n\n        this.h0 = h0;\n        this.h_sk = h_sk;\n        this.h = h;\n        this.attr = AttributeName;\n    }\n\n    /*\n     * VerifyCredentialRequest(Nym, pi, n)\n     *  verifies user's credential request\n     */\n    VerifyCredentialRequest(CR: any): boolean {\n        const C = new this.param.BIG(0);\n        C.copy(CR.pi.C);\n\n        // tslint:disable-next-line:variable-name\n        const _t1 = this.param.PAIR.G1mul(this.h_sk, CR.pi.S);\n        _t1.add(this.param.PAIR.G1mul(CR.Nym, this.param.BIG.modneg(C, this.param.order)));\n\n        const _C = this.param.hashToBN(_t1, this.h_sk, CR.Nym, CR.nonce);\n\n        return this.param.BIG.comp(CR.pi.C, _C) === 0;\n    }\n\n}\n\n/**\n * Credential\n *  The credential generated from issuer\n */\nexport class Credential extends CryptoBase {\n    sig: {\n        A: any,\n        B: any,\n        e: any,\n        s: any\n    };\n    attrs: any[];\n\n    constructor(param: CryptoSuite) {\n        super(param);\n        const A = new this.param.ECP();\n        const B = new this.param.ECP();\n        const e = new this.param.BIG();\n        const s = new this.param.BIG();\n        this.sig = {A, B, e, s};\n        this.attrs = [];\n    }\n\n    Set(A: any, B: any, e: any, s: any, attrs: any) {\n        this.sig.A.copy(A);\n        this.sig.B.copy(B);\n        this.sig.e.copy(e);\n        this.sig.s.copy(s);\n\n        for (let i = 0; i < attrs.length; i++) {\n            this.attrs[i] = new this.param.BIG();\n            this.attrs[i].copy(attrs[i]);\n        }\n    }\n\n    Copy(target: Credential) {\n        this.Set(target.sig.A, target.sig.B, target.sig.e, target.sig.s, target.attrs);\n    }\n\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport { reverseHex, StringReader } from '../utils';\n\nconst Fixed64Size = 8;\nexport default class Fixed64 {\n    static deserialize(sr: StringReader) {\n        const f = new Fixed64();\n        let v = sr.read(8);\n        // f.value = hexstr2str(v)\n        v = reverseHex(v);\n        while (v.substr(0, 2) === '00' ) {\n            v = v.substring(2);\n        }\n        f.value = new BigNumber(v, 16).toString();\n        return f;\n    }\n\n    // 8 bytes\n    value: string;\n    constructor(value?: string) {\n        if (value && value.length > 16 || value && !/^[0-9]\\d*$/.test(value)) {\n            throw new Error('Invalid value.' + value);\n        }\n        this.value = value || '0000000000000000';\n    }\n\n    serialize() {\n        // return str2hexstr(this.value)\n        let hexstring = new BigNumber(this.value).toString(16);\n        const size = Fixed64Size * 2;\n\n        hexstring = hexstring.length % size === 0\n            ? hexstring\n            : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n\n        hexstring = reverseHex(hexstring);\n        return hexstring;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Parameter } from './parameter';\n\n/**\n * Describes the Abi function\n */\nexport default class AbiFunction {\n    name: string;\n    returntype: string;\n    parameters: Parameter[];\n\n    constructor(name: string, returntype: string, parameters: Parameter[]) {\n        this.name = name;\n        this.returntype = returntype;\n        this.parameters = parameters;\n    }\n\n    getParameter(name: string): any {\n        // const p = {} as Parameter;\n\n        for (const v of this.parameters) {\n            if (v.getName() === name) {\n                return v;\n            }\n        }\n        return null;\n    }\n\n    setParamsValue(...args: Parameter[]): void {\n        for (let i = 0, len = args.length; i < len; i++) {\n            // tslint:disable-next-line:prefer-for-of\n            for (let j = 0 ; j < this.parameters.length; j++) {\n                if (args[i].name === this.parameters[j].getName()) {\n                    this.parameters[j].setValue(args[i]);\n                }\n            }\n        }\n        // const parameters = [];\n        // for (let i = 0, len = args.length; i < len; i++) {\n        //     parameters.push(args[i]);\n        // }\n        // this.parameters = parameters;\n    }\n\n    toString(): string {\n        const json = {\n            name : this.name,\n            returntype : this.returntype,\n            parameters : this.parameters\n        };\n\n        return JSON.stringify(json);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nexport default abstract class Payload {\n    abstract serialize(): string;\n\n    // static can not use with abstract\n    abstract deserialize(ss: any): void;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport {\n    bool2VarByte,\n    hex2VarBytes,\n    hexstr2str,\n    str2VarBytes,\n    StringReader\n} from '../../utils';\nimport Payload from './payload';\n\n/**\n * Describes the payload of deploy code\n */\nexport default class DeployCode extends Payload {\n    /**\n     * Hex encoded contract content\n     */\n    code: string;\n\n    /**\n     * Decides if the contract need storage\n     */\n    needStorage: boolean;\n    /**\n     * Name of the smart contract\n     */\n    name: string;\n    /**\n     * Version of the contract\n     */\n    version: string;\n    /**\n     * Author of the contract\n     */\n    author: string;\n    /**\n     * Email of the author\n     */\n    email: string;\n    /**\n     * Description of the contract\n     */\n    description: string;\n\n    /**\n     * Serialize deploy code to hex string\n     */\n    serialize(): string {\n        let result = '';\n\n        // result += this.code.serialize();\n        result += hex2VarBytes(this.code);\n\n        result += bool2VarByte(this.needStorage);\n\n        result += str2VarBytes(this.name);\n\n        result += str2VarBytes(this.version);\n\n        result += str2VarBytes(this.author);\n\n        result += str2VarBytes(this.email);\n\n        result += str2VarBytes(this.description);\n\n        return result;\n    }\n\n    /**\n     * Deserialize deploy code\n     * @param sr\n     */\n    deserialize(sr: StringReader): void {\n\n        // const code = VmCode.deserialize(sr);\n        const code = sr.readNextBytes();\n        this.code = code;\n\n        const boolValue = sr.read(1);\n        this.needStorage = boolValue === '00' ? false : true;\n\n        const name = sr.readNextBytes();\n        this.name = hexstr2str(name);\n\n        const codeVersion = sr.readNextBytes();\n        this.version = hexstr2str(codeVersion);\n\n        const author = sr.readNextBytes();\n        this.author = hexstr2str(author);\n\n        const email = sr.readNextBytes();\n        this.email = hexstr2str(email);\n\n        const description = sr.readNextBytes();\n        this.description = hexstr2str(description);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { hex2VarBytes, StringReader } from '../../utils';\nimport Payload from './payload';\n\nexport default class InvokeCode extends Payload {\n    // the length is of bytes 20\n    /*\n    scriptHash : string\n    parameters : Array<Parameter> = []\n    functionName : string\n     */\n\n    /**\n     * Hex encoed string\n     */\n    code: string;\n\n    constructor() {\n        super();\n        // this.gasLimit = new Fixed64()\n    }\n\n/*     serialize() : string {\n        let payloadLength\n        let paramsLength = num2hexstring( 0x50 + this.parameters.length) //start from '0x50'\n        const paramsEnd = 'c1'\n        let funcNameHex = str2hexstr(this.functionName)\n        const funcNameLength = num2hexstring(funcNameHex.length/2)\n\n        let params = []\n        for(let i = this.parameters.length-1; i > -1; i--) {\n            let p = this.parameters[i]\n            let hexP = p.getValue()\n            let hexPLength = num2VarInt( hexP.length / 2)\n            let opcode = ''\n            if( hexP.length/2 < OPCODE.PUSHBYTES75) {\n\n            } else if (hexP.length / 2 < 0x100) {\n                opcode = num2VarInt( OPCODE.PUSHDATA1 )\n            } else if( hexP.length/2 < 0x1000 ) {\n                opcode = num2hexstring( OPCODE.PUSHDATA2, 2, true)\n            } else {\n                opcode = num2hexstring( OPCODE.PUSHDATA4, 4, true)\n            }\n            params.push ({\n                hexPLength,\n                hexP,\n                opcode\n            })\n        }\n\n        let result = ''\n        //scripthash\n        // result += this.scriptHash\n        //params\n        for(let v of params) {\n            if(v.opcode) {\n                result += v.opcode\n            }\n            result += v.hexPLength\n            result += v.hexP\n        }\n        result += paramsLength\n        //end\n        result += paramsEnd\n        //function\n        result += funcNameLength\n        result += funcNameHex\n        let totalParamsLength = num2VarInt(result.length / 2)\n        //result = this.scriptHash + totalParamsLength + result\n\n        console.log('invode serialze: '+ result)\n\n        return result\n    }  */\n\n    serialize() {\n        let result = '';\n        // if(this.gasLimit) {\n        //     result += this.gasLimit.serialize()\n        // }\n        // result += this.code.serialize();\n        result += hex2VarBytes(this.code);\n        return result;\n    }\n\n    /* deserialize(ss : StringReader) : void {\n        //scriptHash, fixed langth\n        this.scriptHash = ss.read(20)\n        //payload total lenght\n        const payloadLen = ss.readNextLen()\n\n        //read params start\n        let params = []\n        let nextByte = ss.readNextLen()\n        //params's length start from 0x50\n        while(nextByte < 0x50) {\n            let p = ss.read(nextByte)\n            params.push(p)\n            nextByte = ss.readNextLen()\n        }\n        //params end\n        let end = ss.read(1)\n        console.log('end :' + end)\n        if(end === 'c1') {\n            for(let i=0; i< params.length; i++) {\n                //TODO can only get value\n                this.parameters.push(new Parameter('','',params[i]))\n            }\n        }\n        //function name\n        let funNameLen = ss.readNextLen()\n        let func = ss.read(funNameLen)\n        func = hexstr2str(func)\n        //payload end\n        this.functionName = func\n\n    }  */\n\n    deserialize(sr: StringReader) {\n        // let gasLimit = Fixed64.deserialize(sr);\n        // const code = VmCode.deserialize(sr);\n        const code = sr.readNextBytes();\n        // this.gasLimit = gasLimit;\n        this.code = code;\n        return this;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { ERROR_CODE } from '../error';\nimport { hex2VarBytes, num2hexstring, StringReader } from '../utils';\n\nexport enum TransactionAttributeUsage {\n    Nonce           = 0x00,\n    Script          = 0x20,\n    DescriptionUrl  = 0x81,\n    Description     = 0x90\n}\n\n/**\n * @deprecated\n * TransactionAttribute\n * @property {number} usage - Identifying byte\n * @property {string} data - Data\n */\nexport class TransactionAttribute {\n    usage: TransactionAttributeUsage;\n    // hexstring\n    data: string;\n\n    serialize(): string {\n        let result = '';\n        result += num2hexstring(this.usage);\n        if (this.usage === TransactionAttributeUsage.Script) {\n            result += this.data;\n        } else if (this.usage === TransactionAttributeUsage.DescriptionUrl\n                || this.usage === TransactionAttributeUsage.Description\n                || this.usage === TransactionAttributeUsage.Nonce) {\n            result += hex2VarBytes(this.data);\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n\n        return result;\n    }\n\n    deserialize(ss: StringReader): void {\n        // usage\n        const usage = parseInt(ss.read(1), 16);\n        // nonce\n        // const nonce = ss.read(8);\n        // get hash with publicKey;\n        const dataLen = ss.readNextLen();\n        const data = ss.read(dataLen);\n        this.usage = usage;\n        // this.nonce = nonce;\n        this.data = data;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as cryptoJS from 'crypto-js';\nimport Fixed64 from '../common/fixed64';\nimport { Address } from '../crypto/address';\nimport { Signable } from '../crypto/signable';\nimport { ab2hexstring, generateRandomArray, num2hexstring, StringReader } from '../utils';\nimport DeployCode from './payload/deployCode';\nimport InvokeCode from './payload/invokeCode';\nimport Payload from './payload/payload';\nimport { TransactionAttribute } from './txAttribute';\nimport { TxSignature } from './txSignature';\n\nexport enum TxType  {\n    BookKeeper      = 0x02,\n    Claim           = 0x03,\n    Deploy          = 0xd0,\n    Invoke          = 0xd1,\n    Enrollment      = 0x04,\n    Vote            = 0x05\n}\n\nexport const TxName = {\n    BookKeeper: 'BookKeeper',\n    Claim: 'Claim',\n    Deploy: 'Deploy',\n    Invoke: 'Invoke',\n    Enrollment: 'Enrollment',\n    Vote: 'Vote'\n};\n\n/**\n * @deprecated. Transaction fee.\n */\nexport class Fee {\n    static deserialize(sr: StringReader): Fee {\n        const fee = new Fee();\n        const amount = Fixed64.deserialize(sr);\n        const payer = sr.read(20);\n        fee.amount = amount;\n        fee.payer = new Address(payer);\n        return fee;\n    }\n\n    amount: Fixed64;\n\n    // 20 bytes address\n    payer: Address;\n\n    serialize(): string {\n        let result = '';\n        result += this.amount.serialize();\n        result += this.payer.serialize();\n        return result;\n    }\n}\n\nexport class Transaction implements Signable {\n    static deserialize(hexstring: string): Transaction {\n        const tx = new Transaction();\n\n        // console.log(' hexstring' + hexstring)\n        const ss = new StringReader(hexstring);\n\n        tx.version = parseInt(ss.read(1), 16);\n        tx.type = parseInt(ss.read(1), 16);\n        tx.nonce = ss.read(4);\n        tx.gasPrice = Fixed64.deserialize(ss);\n        tx.gasLimit = Fixed64.deserialize(ss);\n        tx.payer = new Address(ss.read(20));\n        let payload;\n\n        switch (tx.type) {\n        case TxType.Invoke :\n            payload = new InvokeCode();\n            break;\n        case TxType.Deploy:\n            payload = new DeployCode();\n            break;\n        default :\n            payload = new InvokeCode();\n        }\n        payload.deserialize(ss);\n        tx.payload = payload;\n        tx.txAttributes = [];\n        tx.sigs = [];\n\n        const attributeLength = ss.readNextLen();\n        for (let i = 0; i < attributeLength; i++) {\n            const txAttribute = new TransactionAttribute();\n            txAttribute.deserialize(ss);\n            tx.txAttributes.push(txAttribute);\n        }\n\n        const sigLength = ss.readNextLen();\n        for (let i = 0; i < sigLength; i++) {\n            tx.sigs.push(TxSignature.deserialize(ss));\n        }\n\n        return tx;\n    }\n\n    /**\n     * Transaction type\n     */\n    type: TxType = 0xd1;\n\n    /**\n     * Version of transaction\n     */\n    version: number = 0x00;\n\n    /**\n     * Payload of transaction\n     */\n    payload: Payload;\n\n    /**\n     * Random hex string. 4 bytes.\n     */\n    nonce: string;\n\n    /**\n     * @deprecated\n     */\n    txAttributes: TransactionAttribute[] = [];\n\n    /**\n     * Gas price\n     */\n    gasPrice: Fixed64;\n\n    /**\n     * Gas limit\n     */\n    gasLimit: Fixed64;\n\n    /**\n     * Address to pay for gas\n     */\n    payer: Address;\n\n    /**\n     * Array of signatures\n     */\n    sigs: TxSignature[] = [];\n\n    constructor() {\n        this.nonce = ab2hexstring(generateRandomArray(4));\n        this.gasPrice = new Fixed64();\n\n        // const limit = num2hexstring(DEFAULT_GAS_LIMIT, 8, true);\n\n        this.gasLimit = new Fixed64();\n        this.payer = new Address('0000000000000000000000000000000000000000');\n    }\n\n    /**\n     * Serialize transaction to hex string\n     * The result is used to send to blockchain.\n     */\n    serialize(): string {\n        const unsigned = this.serializeUnsignedData();\n        const signed = this.serializeSignedData();\n\n        return unsigned + signed;\n    }\n\n    /**\n     * Serialize transaction data exclueds signatures\n     */\n    serializeUnsignedData() {\n        let result = '';\n        result += num2hexstring(this.version);\n        result += num2hexstring(this.type);\n\n        // nonce 4bytes\n        result += this.nonce;\n        result += this.gasPrice.serialize();\n        result += this.gasLimit.serialize();\n        result += this.payer.serialize();\n        result += this.payload.serialize();\n\n        // serialize transaction attributes\n        result += num2hexstring(this.txAttributes.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.txAttributes.length; i++) {\n            result += this.txAttributes[i].serialize();\n        }\n        // result += num2hexstring(this.fee.length)\n        // for (let i=0 ; i< this.fee.length; i++) {\n        //     result += this.fee[i].amount.serialize()\n        //     result += this.fee[i].payer.serialize()\n        // }\n\n        // if(this.networkFee) {\n        //     result += this.networkFee.serialize()\n        // }\n\n        return result;\n    }\n\n    /**\n     * Serialize signatures\n     */\n    serializeSignedData() {\n        let result = '';\n        // programs\n        result += num2hexstring(this.sigs.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.sigs.length; i++) {\n            result += this.sigs[i].serialize();\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the signable content\n     */\n    getSignContent() {\n        const data = this.serializeUnsignedData();\n\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\n\n        return ProgramSha2562;\n    }\n\n    /**\n     * Get the hash of transaction\n     * @deprecated Use getSignContent instead\n     */\n    getHash() {\n        return this.getSignContent();\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { PrivateKey, PublicKey, Signable, SignatureScheme } from '../crypto';\nimport { hex2VarBytes, StringReader } from '../utils';\nimport { getParamsFromProgram, getProgramInfo,\n    programFromMultiPubKey, programFromParams, programFromPubKey } from './program';\n\n/**\n * Signature generated by signing transaction hash with Private Keys.\n */\nexport class TxSignature {\n\n    /**\n     * Deserializes hex representation to Transaction Signature\n     *\n     * @param sr Hex string reader\n     */\n    static deserialize(sr: StringReader) {\n        const sig = new TxSignature();\n        // sig.pubKeys = [];\n        // const pubKeyLength = sr.readNextLen();\n\n        // for (let i = 0; i < pubKeyLength; i++) {\n        //     const serializedLength = sr.readNextLen();\n        //     const pk = PublicKey.deserializeHex(sr, serializedLength);\n        //     sig.pubKeys.push(pk);\n        // }\n\n        // sig.M = sr.readNextLen();\n        // sig.sigData = [];\n\n        // const dataLength = sr.readNextLen();\n        // for (let i = 0; i < dataLength; i++) {\n        //     const data = sr.readNextBytes();\n        //     sig.sigData.push(data);\n        // }\n        const invocationScript = sr.readNextBytes();\n        const verificationScript = sr.readNextBytes();\n        const sigData = getParamsFromProgram(invocationScript);\n        const info = getProgramInfo(verificationScript);\n        sig.M = info.M;\n        sig.pubKeys = info.pubKeys;\n        sig.sigData = sigData;\n        return sig;\n    }\n\n    /**\n     * Creates Transaction signature of hash with supplied private key and scheme.\n     *\n     * If the signature schemas is not provided, the default schemes for the key types are used.\n     *\n     * @param hash hash of the transaction or signable transaction\n     * @param privateKey Private key to use\n     * @param scheme Signature scheme to use\n     */\n    static create(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\n        const signature = new TxSignature();\n\n        signature.M = 1;\n        signature.pubKeys = [privateKey.getPublicKey()];\n        signature.sigData = [privateKey.sign(hash, scheme).serializeHex()];\n\n        return signature;\n    }\n\n    /**\n     * Creates Transaction signature of hash with supplied private key and scheme asynchroniously.\n     *\n     * If the signature schemas is not provided, the default schemes for the key types are used.\n     *\n     * @param hash hash of the transaction or signable transaction\n     * @param privateKey Private key to use\n     * @param scheme Signature scheme to use\n     */\n    static async createAsync(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\n        const signature = new TxSignature();\n\n        signature.M = 1;\n        signature.pubKeys = [privateKey.getPublicKey()];\n        signature.sigData = [(await privateKey.signAsync(hash, scheme)).serializeHex()];\n\n        return signature;\n    }\n\n    /**\n     * Public keys used to create this signature.\n     */\n    pubKeys: PublicKey[];\n\n    // Cardinality of the signature\n    M: number;\n\n    // Signature values\n    sigData: string[];\n\n    /**\n     * Serializes signature to Hex representation.\n     *\n     */\n    serialize(): string {\n        let result = '';\n        // result += num2hexstring(this.pubKeys.length);\n\n        // // tslint:disable-next-line:prefer-for-of\n        // for (let i = 0; i < this.pubKeys.length; i++) {\n        //     const serialized = this.pubKeys[i].serializeHex();\n        //     result += num2hexstring(serialized.length / 2);\n        //     result += serialized;\n        // }\n\n        // result += num2hexstring(this.M);\n\n        // result += num2hexstring(this.sigData.length);\n\n        // // tslint:disable-next-line:prefer-for-of\n        // for (let i = 0; i < this.sigData.length; i++) {\n        //     result += hex2VarBytes(this.sigData[i]);\n        // }\n        const invocationScript = programFromParams(this.sigData);\n        let verificationScript = '';\n        if (this.pubKeys.length === 0) {\n            throw new Error('No pubkeys in sig');\n        } else if (this.pubKeys.length === 1) {\n            verificationScript = programFromPubKey(this.pubKeys[0]);\n        } else {\n            verificationScript = programFromMultiPubKey(this.pubKeys, this.M);\n        }\n        result += hex2VarBytes(invocationScript);\n        result += hex2VarBytes(verificationScript);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { Address } from '../crypto/address';\nimport { Transaction } from './transaction';\n\nexport class Transfer extends Transaction {\n    amount: number | string;\n    tokenType: string;\n    from: Address;\n    to: Address;\n    method: string;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport Fixed64 from '../common/fixed64';\nimport { NATIVE_INVOKE_NAME, REST_API, TX_MAX_SIG_SIZE } from '../consts';\nimport { Address, PrivateKey, SignatureScheme } from '../crypto';\nimport { PublicKey } from '../crypto/PublicKey';\nimport { ERROR_CODE } from '../error';\nimport AbiFunction from '../smartcontract/abi/abiFunction';\nimport { Parameter } from '../smartcontract/abi/parameter';\nimport {\n    num2hexstring,\n    str2hexstr\n} from '../utils';\nimport opcode from './opcode';\nimport DeployCode from './payload/deployCode';\nimport InvokeCode from './payload/invokeCode';\nimport { comparePublicKeys } from './program';\nimport { pushHexString, pushInt, serializeAbiFunction } from './scriptBuilder';\nimport { Transaction, TxType } from './transaction';\nimport { Transfer } from './transfer';\nimport { TxSignature } from './txSignature';\n// const abiInfo = AbiInfo.parseJson(JSON.stringify(json));\n\n// tslint:disable-next-line:variable-name\nexport const Default_params = {\n    Action: 'sendrawtransaction',\n    Version: '1.0.0',\n    Type: '',\n    Op: 'test'\n};\n\n/**\n * Signs the transaction object.\n *\n * If there is already a signature, the new one will replace existing.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param privateKey Private key to sign with\n * @param schema Signature Schema to use\n */\nexport const signTransaction = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\n    const signature = TxSignature.create(tx, privateKey, schema);\n\n    tx.sigs = [signature];\n};\n\n/**\n * Signs the transaction object asynchroniously.\n *\n * If there is already a signature, the new one will replace existing.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param privateKey Private key to sign with\n * @param schema Signature Schema to use\n */\nexport const signTransactionAsync = async (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\n    const signature = await TxSignature.createAsync(tx, privateKey, schema);\n\n    tx.sigs = [signature];\n};\n\n/**\n * Signs the transaction object.\n *\n * If there is already a signature, the new one will be added to the end.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param privateKey Private key to sign with\n * @param schema Signature Schema to use\n */\nexport const addSign = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\n    const signature = TxSignature.create(tx, privateKey, schema);\n\n    tx.sigs.push(signature);\n};\n\nconst equalPks = (pks1: PublicKey[], pks2: PublicKey[]): boolean => {\n    if (pks1 === pks2) {\n        return true;\n    }\n    pks1.sort(comparePublicKeys);\n    pks2.sort(comparePublicKeys);\n    if (pks1.length !== pks2.length) {\n        return false;\n    }\n    for (let i = 0; i < pks1.length ; i++) {\n        if (pks1[i].key !== pks2[i].key) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Signs the transaction with multiple signatures with multi-sign keys.\n *\n * If there is already a signature, the new ones will be added to the end.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param M m of the (m ,n) multi sign address threshold\n * @param pubKeys Array of Public keys of (m,n) multi sign address, the number is n\n * @param privateKey Private key to sign the tx.\n * @param scheme Signature scheme to use\n */\nexport const signTx = (tx: Transaction, M: number, pubKeys: PublicKey[],\n                       privateKey: PrivateKey, scheme?: SignatureScheme) => {\n\n    if (tx.sigs.length === 0) {\n        tx.sigs = [];\n    } else {\n        if (tx.sigs.length > TX_MAX_SIG_SIZE || M > pubKeys.length || M <= 0 || pubKeys.length === 0) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < tx.sigs.length; i++) {\n            if (equalPks(tx.sigs[i].pubKeys, pubKeys)) {\n                if (tx.sigs[i].sigData.length + 1 > pubKeys.length) {\n                    throw new Error('Too many sigData');\n                }\n                const signData = privateKey.sign(tx, scheme).serializeHex();\n                tx.sigs[i].sigData.push(signData);\n                return;\n            }\n        }\n    }\n    const sig = new TxSignature();\n    sig.M = M;\n    sig.pubKeys = pubKeys;\n    sig.sigData = [privateKey.sign(tx, scheme).serializeHex()];\n    tx.sigs.push(sig);\n};\n\n/**\n * Creates transaction to invoke native contract\n * @param funcName Function name of contract to call\n * @param params Parameters serialized in hex string\n * @param contractAddr Adderss of contract\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for transaction gas\n */\nexport function makeNativeContractTx(\n    funcName: string,\n    params: string,\n    contractAddr: Address,\n    gasPrice?: string,\n    gasLimit?: string,\n    payer?: Address\n) {\n    let code = '';\n    code += params;\n    code += pushHexString(str2hexstr(funcName));\n    code += pushHexString(contractAddr.serialize());\n    code += pushInt(0);\n    code += num2hexstring(opcode.SYSCALL);\n    code += pushHexString(str2hexstr(NATIVE_INVOKE_NAME));\n    const payload = new InvokeCode();\n    payload.code = code;\n\n    let tx: Transaction;\n    if (funcName === 'transfer' || funcName === 'transferFrom') {\n        tx = new Transfer();\n    } else {\n        tx = new Transaction();\n    }\n\n    tx.type = TxType.Invoke;\n    tx.payload = payload;\n    if (gasLimit) {\n        tx.gasLimit = new Fixed64(gasLimit);\n    }\n    if (gasPrice) {\n        tx.gasPrice = new Fixed64(gasPrice);\n    }\n    if (payer) {\n        tx.payer = payer;\n    }\n    return tx;\n}\n\n/**\n * Creates transaction to inovke smart contract\n * @param funcName Function name of smart contract\n * @param params Array of Parameters or serialized parameters\n * @param contractAddr Address of contract\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for gas\n */\nexport const makeInvokeTransaction = (\n    funcName: string,\n    params: Parameter[] | string,\n    contractAddr: Address,\n    gasPrice?: string,\n    gasLimit?: string,\n    payer?: Address\n) => {\n    const tx = new Transaction();\n    tx.type = TxType.Invoke;\n\n    let args = '';\n    if (typeof params === 'string') {\n        args = params;\n    } else {\n        const abiFunc = new AbiFunction(funcName, '', params);\n        args = serializeAbiFunction(abiFunc);\n    }\n\n    let code = args + num2hexstring(opcode.APPCALL);\n    code += contractAddr.serialize();\n\n    const payload = new InvokeCode();\n    payload.code = code;\n    tx.payload = payload;\n\n    if (gasLimit) {\n        tx.gasLimit = new Fixed64(gasLimit);\n    }\n    if (gasPrice) {\n        tx.gasPrice = new Fixed64(gasPrice);\n    }\n    if (payer) {\n        tx.payer = payer;\n    }\n    return tx;\n};\n\n/**\n * Creates transaction to deploy smart contract\n * @param code Avm code of contract to deploy\n * @param name Name of contract\n * @param codeVersion version of contract\n * @param author Author of contract\n * @param email Email of author\n * @param desp Description of contract\n * @param needStorage Decides if the contract needs storage\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for gas\n */\nexport function makeDeployCodeTransaction(\n    code: string,\n    name: string= '',\n    codeVersion: string= '1.0',\n    author: string= '',\n    email: string= '',\n    desp: string= '', needStorage: boolean= true, gasPrice: string, gasLimit: string, payer?: Address) {\n    const dc = new DeployCode();\n    dc.author = author;\n    // const vmCode = new VmCode();\n    // vmCode.code = code;\n    // vmCode.vmType = vmType;\n    // dc.code = vmCode;\n    dc.code = code;\n    dc.version = codeVersion;\n    dc.description = desp;\n    dc.email = email;\n    dc.name = name;\n    dc.needStorage = needStorage;\n\n    const tx = new Transaction();\n    tx.version = 0x00;\n\n    tx.payload = dc;\n\n    tx.type = TxType.Deploy;\n    // gas\n    // if (DEFAULT_GAS_LIMIT === Number(0)) {\n    //     tx.gasPrice = new Fixed64();\n    // } else {\n    //     const price = new BigNumber(gas).multipliedBy(1e9).dividedBy(new BigNumber(DEFAULT_GAS_LIMIT)).toString();\n    //     tx.gasPrice = new Fixed64(price);\n    // }\n    tx.gasLimit = new Fixed64(gasLimit);\n    tx.gasPrice = new Fixed64(gasPrice);\n    if (payer) {\n        tx.payer = payer;\n    }\n\n    return tx;\n\n}\n\n/**\n * @deprecated\n * Creates params from transaction to send with websocket\n * @param tx Transactio to send\n * @param isPreExec Decides if it is pre-execute transaction\n */\nexport function buildTxParam(tx: Transaction, isPreExec: boolean = false) {\n    const op = isPreExec ? { PreExec: '1'} : {};\n    const serialized = tx.serialize();\n\n    return JSON.stringify(Object.assign({}, Default_params, { Data: serialized }, op));\n}\n\n/**\n * @deprecated\n * Creates params from transaction to send with rpc\n * @param tx Transaction\n * @param method Method name\n */\nexport function buildRpcParam(tx: Transaction, method?: string) {\n    const param = tx.serialize();\n    const result = {\n        jsonrpc: '2.0',\n        method: method || 'sendrawtransaction',\n        params: [param],\n        id: 10\n    };\n    return result;\n}\n\n/**\n * @deprecated\n * Creates params from transaction to send with restful\n * @param tx Transaction\n */\nexport function buildRestfulParam(tx: Transaction) {\n    const param = tx.serialize();\n    return {\n        Action : 'sendrawtransaction',\n        Version : '1.0.0',\n        Data : param\n    };\n}\n\n/**\n * @deprecated\n * @param url Url of blochchain node\n * @param preExec Decides if is a pre-execute request\n */\nexport function sendRawTxRestfulUrl(url: string, preExec: boolean = false) {\n    if (url.charAt(url.length - 1) === '/') {\n        url = url.substring(0, url.length - 1);\n    }\n\n    let restUrl = url + REST_API.sendRawTx;\n    if (preExec) {\n        restUrl += '?preExec=1';\n    }\n\n    return restUrl;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as bip39 from 'bip39';\nimport { ONT_BIP44_PATH } from './consts';\nimport { Address, PrivateKey } from './crypto';\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\nimport { ERROR_CODE } from './error';\nimport { ScryptParams } from './scrypt';\nimport { Transaction } from './transaction/transaction';\nimport { signTransaction } from './transaction/transactionBuilder';\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\n\n// tslint:disable-next-line:no-var-requires\nconst HDKey = require('@ont-community/hdkey-secp256r1');\n\nexport class Account {\n    /**\n     * Import account\n     * @param label Account's label\n     * @param encryptedPrivateKey Encrypted private key\n     * @param password User's password to decrypt private key\n     * @param address Account's address\n     * @param saltBase64 Salt to decrypt\n     * @param params Params used to decrypt\n     */\n    static importAccount(\n        label: string ,\n        encryptedPrivateKey: PrivateKey,\n        password: string,\n        address: Address,\n        saltBase64: string,\n        params?: ScryptParams\n    ): Account {\n        const account = new Account();\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\n\n        if (!label) {\n            label = ab2hexstring(generateRandomArray(4));\n        }\n        account.label = label;\n        account.lock = false;\n        account.isDefault = false;\n        account.salt = saltBase64;\n\n        account.encryptedKey = encryptedPrivateKey;\n\n        const publicKey = privateKey.getPublicKey();\n        account.publicKey = publicKey.key;\n\n        account.address = Address.fromPubKey(publicKey);\n\n        return account;\n    }\n\n    /**\n     * Import account with mnemonic\n     * @param label Account's label\n     * @param mnemonic User's mnemonic\n     * @param password user's password to encrypt the private key\n     * @param params Params used to encrypt the private key.\n     */\n    static importWithMnemonic(\n        label: string,\n        mnemonic: string,\n        password: string,\n        params?: ScryptParams\n    ): Account {\n        mnemonic = mnemonic.trim();\n        if (!bip39.validateMnemonic(mnemonic)) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\n        const pri = hdkey.derive(ONT_BIP44_PATH);\n        const key = Buffer.from(pri.privateKey).toString('hex');\n        const privateKey = new PrivateKey(key);\n        const account = Account.create(privateKey, password, label, params);\n        return account;\n    }\n\n    /**\n     * Creates Account object encrypting specified private key.\n     *\n     * The account does not need to be registered on blockchain.\n     *\n     * @param privateKey Private key associated with the account\n     * @param password Password use to encrypt the private key\n     * @param label Custom label\n     * @param params Optional scrypt params\n     */\n    static create(\n        privateKey: PrivateKey,\n        password: string,\n        label?: string,\n        params?: ScryptParams\n    ): Account {\n        const account = new Account();\n        if (!label) {\n            label = ab2hexstring(generateRandomArray(4));\n        }\n        account.label = label;\n        account.lock = false;\n        account.isDefault = false;\n\n        const salt = randomBytes(16);\n        const publicKey = privateKey.getPublicKey();\n        const address = Address.fromPubKey(publicKey);\n        account.publicKey = publicKey.serializeHex();\n        account.address = address;\n        account.encryptedKey = privateKey.encrypt(password, address, salt, params);\n        account.salt = Buffer.from(salt, 'hex').toString('base64');\n        return account;\n    }\n\n    static parseJson(json: string): Account {\n        return Account.parseJsonObj(JSON.parse(json));\n    }\n\n    /**\n     * Deserializes JSON object.\n     *\n     * Object should be real object, not stringified.\n     *\n     * @param obj JSON object\n     */\n    static parseJsonObj(obj: any): Account {\n        const account = new Account();\n        account.address = new Address(obj.address);\n        account.label = obj.label;\n        account.lock = obj.lock;\n        account.isDefault = obj.isDefault;\n        account.publicKey = obj.publicKey;\n        account.hash = obj.hash;\n        account.salt = obj.salt;\n        account.encryptedKey = deserializeFromJson({\n            algorithm: obj.algorithm,\n            parameters: obj.parameters,\n            key: obj.key,\n            external: obj.external\n        });\n        // account.contract = obj.contract\n        account.extra = obj.extra;\n        return account;\n    }\n\n    address: Address;\n    label: string;\n    lock: boolean;\n    encryptedKey: PrivateKey;\n    extra: null;\n\n    // to compatible with cli wallet\n    'enc-alg': string = 'aes-256-gcm';\n    hash: string = 'sha256';\n    salt: string;\n\n    publicKey: string;\n    isDefault: boolean;\n\n    toJson(): string {\n        return JSON.stringify(this.toJsonObj());\n    }\n\n    /**\n     * Serializes to JSON object.\n     *\n     * Returned object will not be stringified.\n     *\n     */\n    toJsonObj(): any {\n        const obj = {\n            'address': this.address.toBase58(),\n            'label': this.label,\n            'lock': this.lock,\n            ...this.encryptedKey.serializeJson(),\n            'enc-alg': this['enc-alg'],\n            'hash': this.hash,\n            'salt': this.salt,\n            'isDefault': this.isDefault,\n            'publicKey': this.publicKey,\n            'signatureScheme': this.encryptedKey.algorithm.defaultSchema.label\n        };\n        return obj;\n    }\n\n    exportPrivateKey(password: string, params?: ScryptParams) {\n        return this.encryptedKey.decrypt(password, this.address, this.salt, params);\n    }\n\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\n        const pri = this.exportPrivateKey(password, params);\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\n        return tx;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Restful api\n */\nexport default {\n    Url_send_transaction : '/api/v1/transaction',\n    Url_get_transaction : '/api/v1/transaction/',\n    Url_get_generate_block_time : '/api/v1/node/generateblocktime',\n    Url_get_node_count : '/api/v1/node/connectioncount',\n    Url_get_block_height : '/api/v1/block/height',\n    Url_get_block_by_height : '/api/v1/block/details/height/',\n    Url_get_block_by_hash : '/api/v1/block/details/hash/',\n    Url_get_account_balance : '/api/v1/balance/',\n    Url_get_contract_state : '/api/v1/contract/',\n    Url_get_smartcodeevent_txs_by_height : '/api/v1/smartcode/event/transactions/',\n    Url_get_smartcodeevent_by_txhash : '/api/v1/smartcode/event/txhash/',\n    Url_get_block_height_by_txhash : '/api/v1/block/height/txhash/',\n    Url_get_storage : '/api/v1/storage/',\n    Url_get_merkleproof : '/api/v1/merkleproof/',\n    Url_get_allowance: '/api/v1/allowance/'\n};\n","import { ERROR_CODE } from './../../error';\n/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport axios from 'axios';\nimport { TEST_ONT_URL } from '../../consts';\nimport { Address } from '../../crypto/address';\nimport UrlConsts from './urlConsts';\n\n/**\n * Wrapper class for restful api.\n */\nexport default class RestClient {\n    /**\n     * Url of the blockchain node\n     */\n    url: string;\n\n    /**\n     * Version of restful api\n     */\n    version: string = 'v1.0.0';\n\n    /**\n     * Action name of the request\n     */\n    action: string = 'sendrawtransaction';\n\n    constructor(url ?: string) {\n        this.url = url || TEST_ONT_URL.REST_URL;\n        if (this.url[this.url.length - 1] === '/') {\n            this.url = this.url.substring(0, this.url.length - 1);\n        }\n    }\n\n    /**\n     * Concat params as the query part\n     * @param params\n     */\n    concatParams(params: Map<string, string>) {\n        let result = '';\n        if (params.size === 0) {\n            return '';\n        }\n\n        for (const key of params.keys()) {\n            let value = params.get(key);\n            if (value) {\n                value = encodeURIComponent(value);\n            }\n            result += `&${key}=${value}`;\n        }\n\n        return '?' + result.substr(1);\n    }\n\n    /**\n     * Get the current blockchain node url\n     */\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * To send raw transaction to blockchian\n     * @param hexData Hex encoded data\n     * @param preExec Decides if it is a pre-execute transaction\n     * @param userId User's id\n     */\n    sendRawTransaction(hexData: string, preExec: boolean = false, userId ?: string): Promise<any> {\n        const param = new Map<string, string>();\n\n        if (userId) {\n            param.set('userid', userId);\n        }\n\n        if (preExec) {\n            param.set('preExec', '1');\n        }\n\n        let url = this.url + UrlConsts.Url_send_transaction;\n        url += this.concatParams(param);\n\n        const body = {\n            Action  : this.action,\n            Version : this.version,\n            Data    : hexData\n        };\n\n        return axios.post(url, body).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get raw transaction by transaction hash.\n     * The result is hex encoded transaction.\n     * @param txHash Transactin hash.Always use the reversed value of transaction hash to query.\n     *\n     * @example\n     *\n     * ```typescript\n     * import { utils, Transaction } from 'ontology-ts-sdk';\n     * const txHash = tx.getHash(); // tx is an instance of Transaction\n     * restClient.getRawTransaction(utils.reverseHex(txHash)).then(res => {\n     *   const tx = Transaction.deserialize(res.Result)\n     * })\n     *\n     * ````\n     */\n    getRawTransaction(txHash: string): Promise<any> {\n        const param = new Map<string, string>();\n\n        param.set('raw', '1');\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\n        url += this.concatParams(param);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get transaction by transaction hash.\n     * The result is transaction in json.\n     * @param txHash Reversed transaction hash\n     */\n    getRawTransactionJson(txHash: string): Promise<any> {\n        const param = new Map<string, string>();\n        param.set('raw', '0');\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\n        url += this.concatParams(param);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /** Deprecated\n     * Get the generation time for each block.\n     * If the blockchain node runs in vbft, the result is null.\n     */\n    // getGenerateBlockTime(): Promise<any> {\n    //     const url = this.url + UrlConsts.Url_get_generate_block_time;\n    //     return axios.get(url).then((res) => {\n    //         return res.data;\n    //     });\n    // }\n\n    /**\n     * Get the nodes count of the blockchain.\n     */\n    getNodeCount(): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_node_count;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the current height of the blockchain.\n     */\n    getBlockHeight(): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_block_height;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block by block's height or hash\n     * @param value Block height or block hash\n     */\n    getBlock(value: number | string): Promise<any> {\n        const params = new Map<string, string>();\n        params.set('raw', '1');\n\n        let url = '';\n        if (typeof value === 'number') {\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\n        } else if (typeof value === 'string') {\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\n        }\n        url += this.concatParams(params);\n\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by code hash.The result is hex encoded string.\n     * @param codeHash Code hash of contract.The value is reversed contract address.\n     */\n    getContract(codeHash: string): Promise<any> {\n        const params = new Map<string, string>();\n        params.set('raw', '1');\n\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n        url += this.concatParams(params);\n\n            // console.log('url: '+url);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by code hash. The result is json.\n     * @param codeHash Code hash of contract.\n     */\n    getContractJson(codeHash: string): Promise<any> {\n        const params = new Map<string, string>();\n        params.set('raw', '0');\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n        url += this.concatParams(params);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get smart contract event by Block height or reversed transaction hash.\n     * If the parameter is block height, the result includes all the transaction event of that block;\n     * If the parameter is transaction hash, the result is the event of that transaction.\n     * @param value Block height or reversed transaction hash\n     */\n    getSmartCodeEvent(value: string | number): Promise<any> {\n        let url = '';\n        if (typeof value === 'string') {\n            url = this.url + UrlConsts.Url_get_smartcodeevent_by_txhash + value;\n        } else if (typeof value === 'number') {\n            url = this.url + UrlConsts.Url_get_smartcodeevent_txs_by_height + value;\n        }\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the block height by reversed transaction hash.\n     * @param hash Reversed transaction hash.\n     */\n    getBlockHeightByTxHash(hash: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_block_height_by_txhash + hash;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the stored value in smart contract by the code hash and key.\n     * @param codeHash Code hash of the smart contract\n     * @param key Key of the stored value\n     */\n    getStorage(codeHash: string, key: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_storage + codeHash + '/' + key;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the merkle proof by transaction hash\n     * @param hash Reversed transaction hash\n     */\n    getMerkleProof(hash: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_merkleproof + hash;\n\n            // tslint:disable-next-line:no-console\n        console.log('url: ' + url);\n\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get balance of some address\n     * The result contains balance of ONT and ONG\n     * @param address Address\n     */\n    getBalance(address: Address): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_account_balance + address.toBase58();\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block info by block's height or hash.\n     * @param value Block's height or hash\n     */\n    getBlockJson(value: number | string): Promise<any> {\n        let url = '';\n        if (typeof value === 'number') {\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\n        } else if (typeof value === 'string') {\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\n        }\n\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get allowance by address\n     * @param asset Asset type. Only ONT or ONG.\n     * @param from Address of allowance sender.\n     * @param to Address of allowance receiver.\n     */\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\n        asset = asset.toLowerCase();\n        if (asset !== 'ont' && asset !== 'ong') {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const url = this.url + UrlConsts.Url_get_allowance +\n                    asset.toLowerCase() + '/' + from.toBase58() + '/' + to.toBase58();\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// tslint:disable:variable-name\nexport class Deferred<T> {\n    private _promise: Promise<T>;\n    private _resolve: (value?: T | PromiseLike<T>) => void;\n    private _reject: (reason?: any) => void;\n\n    constructor() {\n        this._promise = new Promise<T>((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n\n    get promise(): Promise<T> {\n        return this._promise;\n    }\n\n    public resolve = (value?: T | PromiseLike<T>): void => {\n        this._resolve(value);\n    }\n\n    public reject = (reason?: any): void => {\n        this._reject(reason);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as Html5WebSocket from '@ont-community/html5-websocket';\nimport * as WebSocketAsPromised from 'websocket-as-promised';\nimport { TEST_ONT_URL } from '../../consts';\n\n/**\n * We can import html5-websocket directly, because webpack will use html5-websocket/browser.js\n * in browser environment, which does not require 'ws'.\n */\n\n /**\n  * Websocket sender for send messages and handle notify.\n  */\nexport class WebsocketSender {\n    private static generateReqId() {\n        return Math.floor(Math.random() * 10e8);\n    }\n\n    debug: boolean;\n\n    private wsp: any;    // WebSocketAsPromised\n\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false) {\n        this.debug = debug;\n        this.wsp = new WebSocketAsPromised(url, {\n            createWebSocket: (socketUrl: string) => new Html5WebSocket(socketUrl),\n            attachRequestId: (data: any, id: number) => ({ Id: id, ...data }),\n            extractRequestId: (data: any) => data && data.Id,\n            packMessage: (data: any) => JSON.stringify(data),\n            unpackMessage: (message: string) => JSON.parse(message)\n        });\n\n        this.wsp.onOpen.addListener(() => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('connected');\n            }\n        });\n\n        this.wsp.onClose.addListener(() => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('disconnected');\n            }\n        });\n\n        this.wsp.onSend.addListener((message: any) => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('sent: ', message);\n            }\n        });\n\n        this.wsp.onMessage.addListener((message: any) => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('received: ', message);\n            }\n        });\n\n        this.wsp.onError.addListener((event: any) => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('error: ', event);\n            }\n        });\n    }\n\n    async send<T extends object>(param: T, close: boolean = true) {\n        try {\n            if (!param) {\n                return;\n            }\n\n            await this.wsp.open();\n            const response = await this.wsp.sendRequest(param, { requestId: WebsocketSender.generateReqId() });\n\n            return response;\n        } finally {\n            if (close) {\n                await this.wsp.close();\n            }\n        }\n    }\n\n    addListener(listener: (result: any) => void) {\n        this.wsp.onUnpackedMessage.addListener(listener);\n    }\n\n    close() {\n        this.wsp.close();\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { TEST_ONT_URL } from '../../consts';\nimport { Address } from '../../crypto/address';\nimport { Deferred } from './deferred';\nimport * as Builder from './websocketBuilder';\nimport { WebsocketSender } from './websocketSender';\n\n/**\n * Websocket client.\n *\n * TODO: correlate request and response with id, so socket can be reused.\n */\nexport class WebsocketClient {\n    sender: WebsocketSender;\n\n    autoClose: boolean;\n\n    promises: Map<string, Deferred<any>>;\n\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false, autoClose = true) {\n        this.autoClose = autoClose;\n        this.promises = new Map();\n        this.sender = new WebsocketSender(url, debug);\n        this.sender.addListener(this.notifyListener.bind(this));\n    }\n\n    /**\n     * Send heart beat request\n     */\n    async sendHeartBeat(): Promise<any> {\n        const raw = Builder.sendHeartBeat();\n        return this.send(raw);\n    }\n\n    /**\n     * Send subscribe request\n     * @param subscribeEvent\n     * @param subscribeJsonBlock\n     * @param subscribeRawBlock\n     * @param subscribeBlockTxHashes\n     */\n    async sendSubscribe(\n            subscribeEvent = false,\n            subscribeJsonBlock = false,\n            subscribeRawBlock = false,\n            subscribeBlockTxHashes = false\n        ): Promise<any> {\n        const raw = Builder.sendSubscribe(\n                subscribeEvent,\n                subscribeJsonBlock,\n                subscribeRawBlock,\n                subscribeBlockTxHashes\n            );\n\n        return this.send(raw);\n    }\n\n    /**\n     * Send raw transaction\n     * @param hexData Hex encoded data\n     * @param preExec Decides if it is a pre-executed transaction\n     * @param waitNotify Decides if client waits for notify from blockchain before closing\n     */\n    async sendRawTransaction(hexData: string, preExec = false, waitNotify = false) {\n        const raw = Builder.sendRawTransaction(hexData, preExec);\n        const sendResult = await this.send(raw, this.autoClose && !waitNotify);\n\n        if (sendResult.Error !== 0) {\n            // tslint:disable-next-line:no-console\n            console.log(sendResult);\n            throw new Error(JSON.stringify(sendResult));\n        }\n\n        if (waitNotify) {\n            const txHash: string = sendResult.Result;\n\n            const deferred = new Deferred<any>();\n            this.promises.set(txHash, deferred);\n            return deferred.promise;\n        } else {\n            return sendResult;\n        }\n    }\n\n    /**\n     * Get raw transaction by transaction hash.\n     * The result is hex encoded transaction.\n     * @param txHash Reversed transaction hash\n     */\n    async getRawTransaction(txHash: string): Promise<any> {\n        const raw = Builder.getRawTransaction(txHash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get transaction info by transaction hash.\n     * The result is json.\n     * @param txHash Reversed transaction hash\n     */\n    async getRawTransactionJson(txHash: string): Promise<any> {\n        const raw = Builder.getRawTransactionJson(txHash);\n        return this.send(raw);\n    }\n\n    /** Deprecated\n     * Get the generation time for each block.\n     * If the blockchain node runs in vbft, the result is null.\n     */\n    // async getGenerateBlockTime(): Promise<any> {\n    //     const raw = Builder.getGenerateBlockTime();\n    //     return this.send(raw);\n    // }\n\n    /**\n     * Get Nodes count\n     */\n    async getNodeCount(): Promise<any> {\n        const raw = Builder.getNodeCount();\n        return this.send(raw);\n    }\n\n    /**\n     * Get current block height\n     */\n    async getBlockHeight(): Promise<any> {\n        const raw = Builder.getBlockHeight();\n        return this.send(raw);\n    }\n\n    /**\n     * Get block's info by block's height or hash.\n     * The result is hex encoded string.\n     * @param value Block's height or hash\n     */\n    async getBlock(value: number | string): Promise<any> {\n        const raw = Builder.getBlock(value);\n        return this.send(raw);\n    }\n\n    /**\n     * Get block's info by block's height or hash.\n     * The result is json.\n     * @param value Block's height or hash\n     */\n    async getBlockJson(value: number | string): Promise<any> {\n        const raw = Builder.getBlockJson(value);\n        return this.send(raw);\n    }\n\n    /**\n     * Get the balance of some address.\n     * The result contains ONT and ONG.\n     * @param address Address\n     */\n    async getBalance(address: Address): Promise<any> {\n        const raw = Builder.getBalance(address);\n        return this.send(raw);\n    }\n\n    /**\n     * Get unbound ong of this address\n     * The result contains ONG.\n     * @param address Address\n     */\n    async getUnboundong(address: Address): Promise<any> {\n        const raw = Builder.getUnboundOng(address);\n        return this.send(raw);\n    }\n\n    /**\n     * Get contract info by code hash.\n     * The result is hex encoded string.\n     * @param hash Contract's code hash.\n     */\n    async getContract(hash: string): Promise<any> {\n        const raw = Builder.getContract(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get contract's info by code hash\n     * The result is json.\n     * @param hash Contract's code hash\n     */\n    async getContractJson(hash: string): Promise<any> {\n        const raw = Builder.getContractJson(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get smart conde event by transaction hash or block's height.\n     * If parameter is transaction hash, the result is the event of that transaction.\n     * If parameter is block's height, the result is all the events of that block.\n     * @param value Reversed transaction hash or block's height\n     */\n    async getSmartCodeEvent(value: number | string): Promise<any> {\n        const raw = Builder.getSmartCodeEvent(value);\n        return this.send(raw);\n    }\n\n    /**\n     * Get block's height by transaction hash\n     * @param hash Reversed transaction hash\n     */\n    async getBlockHeightByTxHash(hash: string): Promise<any> {\n        const raw = Builder.getBlockHeightByTxHash(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get stored value in smart contract by contract's code hash and the key.\n     * @param codeHash Contract's code hash\n     * @param key Key of stored value\n     */\n    async getStorage(codeHash: string, key: string): Promise<any> {\n        const raw = Builder.getStorage(codeHash, key);\n        return this.send(raw);\n    }\n\n    /**\n     * Get merkle proof by transaction hash.\n     * @param hash Reversed transaction hash\n     */\n    async getMerkleProof(hash: string): Promise<any> {\n        const raw = Builder.getMerkleProof(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get allowanece\n     * @param asset Asset's type.Only ONT and ONG supported.\n     * @param from Address of allowance's sender.\n     * @param to Address of allowance's receiver.\n     */\n    async getAllowance(asset: string, from: Address, to: Address) {\n        const raw = Builder.getAllowance(asset, from, to);\n        return this.send(raw);\n    }\n\n    /**\n     * Get block hash by block height\n     * @param height Height of the block\n     */\n    async getBlockHash(height: number): Promise<any> {\n        const raw = Builder.getBlockHash(height);\n        return this.send(raw);\n    }\n\n    /**\n     * Return all transaction hash contained in the block corresponding to this height\n     * @param height Height of the block\n     */\n    async getBlockTxsByHeight(height: number): Promise<any> {\n        const raw = Builder.getBlockTxsByHeight(height);\n        return this.send(raw);\n    }\n\n    /**\n     * Return the state of transaction locate in memory\n     */\n    async getGasPrice(): Promise<any> {\n        const raw = Builder.getGasPrice();\n        return this.send(raw);\n    }\n\n    /**\n     * Get grant ong\n     * @param address Address\n     */\n    async getGrantOng(address: Address): Promise<any> {\n        const raw = Builder.getGrantOng(address);\n        return this.send(raw);\n    }\n\n    /**\n     * Query the transaction count in the memory pool\n     */\n    async getMempoolTxCount(): Promise<any> {\n        const raw = Builder.getMempoolTxCount();\n        return this.send(raw);\n    }\n\n    /**\n     * Query the transaction state in the memory pool\n     */\n    async getMempoolTxState(txHash: string): Promise<any> {\n        const raw = Builder.getMempoolTxState(txHash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get the version information of the node\n     */\n    async getVersion(): Promise<any> {\n        const raw = Builder.getVersion();\n        return this.send(raw);\n    }\n\n    /**\n     * Get the network id\n     */\n    async getNetworkId(): Promise<any> {\n        const raw = Builder.getNetworkId();\n        return this.send(raw);\n    }\n\n    /**\n     * Adds listener for Notify messages.\n     *\n     * Be careful to not set autoClose = true and close the websocket on your own.\n     * @param listener Listener\n     */\n    addNotifyListener(listener: (result: any) => void) {\n        this.sender.addListener((result: any) => {\n            if (result.Action === 'Notify') {\n                listener(result);\n            }\n        });\n    }\n\n    /**\n     * Close the websocket manually.\n     */\n    close() {\n        this.sender.close();\n    }\n\n    /**\n     * Send msg to blockchain\n     * @param raw Message to send\n     * @param close Automaticly close connection if also autoClose is specified\n     */\n    private async send<T extends object>(raw: T, close: boolean = this.autoClose): Promise<any> {\n        return this.sender.send(raw, close);\n    }\n\n    private notifyListener(result: any) {\n        if (result.Action === 'Notify') {\n            const txHash: string | undefined = result.Result.TxHash;\n\n            if (txHash !== undefined) {\n                const promise = this.promises.get(txHash);\n\n                if (promise !== undefined) {\n                    this.promises.delete(txHash);\n                    promise.resolve(result);\n                } else {\n                    // tslint:disable-next-line:no-console\n                    console.warn('Received Notify event for unknown transaction');\n                }\n\n                if (this.autoClose) {\n                    this.sender.close();\n                }\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Address } from '../../crypto/address';\n\n// const generateReqId = () => {\n//     return Math.floor(Math.random() * 10e8);\n// };\n\nexport function sendHeartBeat() {\n    const param = {\n        Action : 'heartbeat',\n        Version : 'V1.0.0'\n    };\n    return param;\n}\n\nexport function sendSubscribe(\n    subscribeEvent: boolean = false,\n    subscribeJsonBlock: boolean = false,\n    subscribeRawBlock: boolean = false,\n    subscribeBlockTxHashes: boolean = false\n) {\n    const param = {\n        Action: 'subscribe',\n        Version: '1.0.0',\n        SubscribeEvent: subscribeEvent, // optional\n        SubscribeJsonBlock: subscribeJsonBlock, // optional\n        SubscribeRawBlock: subscribeRawBlock, // optional\n        SubscribeBlockTxHashs: subscribeBlockTxHashes // optional\n    };\n    return param;\n}\n\nexport function sendRawTransaction(hexData: string, preExec: boolean = false) {\n    let param = {\n        Action: 'sendrawtransaction',\n        Version: '1.0.0',\n        Data: hexData\n    };\n    if (preExec) {\n        param = Object.assign(param, { PreExec : '1' });\n    }\n    return param;\n}\n\nexport function getRawTransaction(txHash: string) {\n    const param = {\n        Action: 'gettransaction',\n        Version: '1.0.0',\n        Hash: txHash,\n        Raw : '1'\n    };\n    return param;\n}\n\nexport function getRawTransactionJson(txHash: string) {\n    const param = {\n        Action: 'gettransaction',\n        Version: '1.0.0',\n        Hash: txHash,\n        Raw: '0'\n    };\n    return param;\n}\n\n// export function getGenerateBlockTime() {\n//     const param = {\n//         Action: 'getgenerateblocktime',\n//         Version: '1.0.0'\n//     };\n//     return param;\n// }\n\nexport function getNodeCount() {\n    const param = {\n        Action: 'getconnectioncount',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getBlockHeight() {\n    const param = {\n        Action: 'getblockheight',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getBlock(value: number | string) {\n    let param = {};\n    if (typeof value === 'number') {\n        param = {\n            Action: 'getblockbyheight',\n            Version: '1.0.0',\n            Height: value,\n            Raw: '1'\n        };\n    } else if (typeof value === 'string') {\n        param = {\n            Action: 'getblockbyhash',\n            Version: '1.0.0',\n            Hash: value,\n            Raw: '1'\n        };\n    }\n    return param;\n}\n\nexport function getBlockJson(value: number | string) {\n    let param = {};\n    if (typeof value === 'number') {\n        param = {\n            Action: 'getblockbyheight',\n            Version: '1.0.0',\n            Height: value\n        };\n    } else if (typeof value === 'string') {\n        param = {\n            Action: 'getblockbyhash',\n            Version: '1.0.0',\n            Hash: value\n        };\n    }\n    return param;\n}\n\nexport function getBalance(address: Address) {\n    const param = {\n        Action: 'getbalance',\n        Version: '1.0.0',\n        Addr: address.toBase58()\n    };\n    return param;\n}\n\nexport function getUnboundOng(address: Address) {\n    const param = {\n        Action: 'getunboundong',\n        Version: '1.0.0',\n        Addr: address.toBase58()\n    };\n    return param;\n}\n\nexport function getContract(hash: string) {\n    const param = {\n        Action: 'getcontract',\n        Version: '1.0.0',\n        Hash: hash,\n        Raw: '1'\n    };\n    return param;\n}\n\nexport function getContractJson(hash: string) {\n    const param = {\n        Action: 'getcontract',\n        Version: '1.0.0',\n        Hash: hash,\n        Raw: '0'\n    };\n    return param;\n}\n\nexport function getSmartCodeEvent(value: number | string) {\n    let param = {};\n    if (typeof value === 'number') {\n        param = {\n            Action: 'getsmartcodeeventbyheight',\n            Version: '1.0.0',\n            Height: value\n        };\n    } else if (typeof value === 'string') {\n        param = {\n            Action: 'getsmartcodeeventbyhash',\n            Version: '1.0.0',\n            Hash: value\n        };\n    }\n    return param;\n}\n\nexport function getBlockHeightByTxHash(hash: string) {\n    const param = {\n        Action: 'getblockheightbytxhash',\n        Version: '1.0.0',\n        Hash: hash\n    };\n    return param;\n}\n\nexport function getStorage(codeHash: string, key: string) {\n    const param = {\n        Action: 'getstorage',\n        Version: '1.0.0',\n        Hash: codeHash,\n        Key : key\n    };\n    return param;\n}\n\nexport function getMerkleProof(hash: string) {\n    const param = {\n        Action: 'getmerkleproof',\n        Version: '1.0.0',\n        Hash: hash\n    };\n    return param;\n}\n\nexport function getAllowance(asset: string, from: Address, to: Address) {\n    const param = {\n        Action: 'getallowance',\n        Version: '1.0.0',\n        Asset: asset,\n        From: from.toBase58(),\n        To: to.toBase58()\n    };\n    return param;\n}\n\nexport function getBlockHash(value: number) {\n    const param = {\n        Action: 'getblockhash',\n        Version: '1.0.0',\n        Height: value\n    };\n    return param;\n}\n\nexport function getBlockTxsByHeight(value: number) {\n    const param = {\n        Action: 'getblocktxsbyheight',\n        Version: '1.0.0',\n        Height: value\n    };\n    return param;\n}\n\nexport function getGasPrice() {\n    const param = {\n        Action: 'getgasprice',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getGrantOng(address: Address) {\n    const param = {\n        Action: 'getgrantong',\n        Version: '1.0.0',\n        Addr: address.toBase58()\n    };\n    return param;\n}\n\nexport function getMempoolTxCount() {\n    const param = {\n        Action: 'getmempooltxcount',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getMempoolTxState(txHash: string) {\n    const param = {\n        Action: 'getmempooltxstate',\n        Version: '1.0.0',\n        Hash: txHash\n    };\n    return param;\n}\n\nexport function getVersion() {\n    const param = {\n        Action: 'getversion',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getNetworkId() {\n    const param = {\n        Action: 'getnetworkid',\n        Version: '1.0.0'\n    };\n    return param;\n}\n","\n/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport AbiFunction from './abiFunction';\nimport { Parameter } from './parameter';\n\n/**\n * Decribes the Abi info.\n */\nexport default class AbiInfo {\n    static parseJson(json: string): AbiInfo {\n        const a = new AbiInfo();\n        const obj = JSON.parse(json);\n        a.hash = obj.hash;\n        a.entrypoint = obj.entrypoint;\n        a.functions = obj.functions;\n\n        return a;\n    }\n\n    hash: string;\n    entrypoint: string;\n    functions: AbiFunction[] = [];\n\n    getHash(): string {\n        return this.hash;\n    }\n\n    getEntryPoint(): string {\n        return this.entrypoint;\n    }\n\n    getFunction(name: string): AbiFunction {\n        for (const v of this.functions) {\n            if (v.name === name) {\n                const parameters = v.parameters.map((p: any) => new Parameter(p.name, p.type, ''));\n                return new AbiFunction(v.name, v.returntype, parameters);\n            }\n        }\n        throw Error('not found');\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Address  } from '../../crypto';\nimport AbiInfo from '../../smartcontract/abi/abiInfo';\nimport { Parameter, ParameterType } from '../../smartcontract/abi/parameter';\n\nimport { makeInvokeTransaction } from '../../transaction/transactionBuilder';\nimport { reverseHex, str2hexstr } from '../../utils';\nimport { Transaction } from './../../transaction/transaction';\n\nimport abiJson from '../data/attestClaim';\nconst abiInfo = AbiInfo.parseJson(JSON.stringify(abiJson));\nconst contractHash = abiInfo.getHash().replace('0x', '');\nconst contractAddress = new Address(reverseHex(contractHash));\n/* TODO : Test */\n\n/**\n * Attests the claim.\n *\n * @param claimId Unique id of the claim\n * @param issuer Issuer's ONT ID\n * @param subject Subject's ONT ID\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer's address\n */\nexport function buildCommitRecordTx(claimId: string, issuer: string, subject: string,\n                                    gasPrice: string, gasLimit: string, payer: Address)  {\n    const f = abiInfo.getFunction('Commit');\n    if (issuer.substr(0, 3) === 'did') {\n        issuer = str2hexstr(issuer);\n    }\n    if (subject.substr(0, 3) === 'did') {\n        subject = str2hexstr(issuer);\n    }\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, issuer);\n    const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, subject);\n\n    let tx = new Transaction();\n    tx = makeInvokeTransaction(f.name, [p1, p2, p3], contractAddress, gasPrice, gasLimit, payer);\n    return tx;\n}\n\n/**\n * Revokes the claim.\n *\n * @param claimId Unique id of the claim\n * @param revokerOntid Revoker's ONT ID\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer's address\n */\nexport function buildRevokeRecordTx(claimId: string, revokerOntid: string,\n                                    gasPrice: string, gasLimit: string, payer: Address) {\n    const f = abiInfo.getFunction('Revoke');\n\n    const name1 = f.parameters[0].getName();\n    const type1 = ParameterType.ByteArray;\n\n    if (revokerOntid.substr(0, 3) === 'did') {\n        revokerOntid = str2hexstr(revokerOntid);\n    }\n\n    const p1 = new Parameter(name1, type1, str2hexstr(claimId));\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, revokerOntid);\n\n    return makeInvokeTransaction(f.name, [p1, p2], contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Queries the state of attest.\n *\n * @param claimId Unique id of the claim\n */\nexport function buildGetRecordStatusTx(claimId: string) {\n    const f = abiInfo.getFunction('GetStatus');\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\n    const tx = makeInvokeTransaction(f.name, [p1], contractAddress);\n    return tx;\n}\n","export default {\n    hash: '36bb5c053b6b839c8f6b923fe852f91239b9fccc',\n    entrypoint: 'Main',\n    functions: [{\n        name: 'Main',\n        parameters: [{\n            name: 'operation',\n            type: 'String'\n        }, {\n            name: 'args',\n            type: 'Array'\n        }],\n        returntype: 'Any'\n    }, {\n        name: 'Commit',\n        parameters: [{\n            name: 'claimId',\n            type: 'ByteArray'\n        }, {\n            name: 'commiterId',\n            type: 'ByteArray'\n        }, {\n            name: 'ownerId',\n            type: 'ByteArray'\n        }],\n        returntype: 'Boolean'\n    }, {\n        name: 'Revoke',\n        parameters: [{\n            name: 'claimId',\n            type: 'ByteArray'\n        }, {\n            name: 'ontId',\n            type: 'ByteArray'\n        }],\n        returntype: 'Boolean'\n    }, {\n        name: 'GetStatus',\n        parameters: [{\n            name: 'claimId',\n            type: 'ByteArray'\n        }],\n        returntype: 'ByteArray'\n    }],\n    events: [{\n        name: 'ErrorMsg',\n        parameters: [{\n            name: 'arg1',\n            type: 'ByteArray'\n        }, {\n            name: 'arg2',\n            type: 'String'\n        }],\n        returntype: 'Void'\n    }, {\n        name: 'Push',\n        parameters: [{\n            name: 'arg1',\n            type: 'ByteArray'\n        }, {\n            name: 'arg2',\n            type: 'String'\n        }, {\n            name: 'arg3',\n            type: 'ByteArray'\n        }],\n        returntype: 'Void'\n    }]\n};\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { hexstr2str } from '../utils';\n\n/**\n * Represents Notify event of attest creation of revocation.\n */\nexport class AttestNotifyEvent {\n    /**\n     * Deserializes Notify event.\n     *\n     * States in events are hex encoded.\n     *\n     * @param e encoded event\n     */\n    static deserialize(e: any): AttestNotifyEvent {\n        const event = new AttestNotifyEvent();\n\n        event.Action = e.Action;\n        event.Error = e.Error;\n        event.Desc = e.Desc;\n        event.Result = Result.deserialize(e.Result);\n\n        return event;\n    }\n\n    Action: string = 'Notify';\n    Desc: string;\n    Error: number;\n    Result: Result;\n}\n\n/**\n * Result of Notify event.\n */\nexport class Result {\n    /**\n     * Deserializes result from event.\n     *\n     * States are hex encoded.\n     *\n     * @param r encoded result\n     */\n    static deserialize(r: any): Result {\n        const result = new Result();\n\n        result.TxHash = r.TxHash;\n        result.State = r.State;\n        result.GasConsumed = r.GasConsumed;\n        result.Notify = r.Notify.map((n: any) => {\n            return {\n                ContractAddress: n.ContractAddress,\n                States: n.States.map( (s: any) => typeof s === 'string' ? hexstr2str(s) : s)\n            };\n        });\n        result.Version = r.Version;\n        return result;\n    }\n\n    TxHash: string;\n    /**\n     * State = 1 : smartcontract executation success\n     * State = 0 : smartcontract executation failure\n     */\n    State: number;\n    GasConsumed: number;\n    Notify: [{\n        ContractAddress: string;\n        /**\n         * The value of States are usually hex string\n         */\n        States: any[];\n    }];\n    Version: string;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport { Address } from '../../crypto/address';\nimport opcode from '../../transaction/opcode';\nimport { hex2VarBytes, num2hexstring, str2VarBytes } from '../../utils';\nimport { pushBigNum, pushBool, pushHexString, pushInt } from './../../transaction/scriptBuilder';\nimport { Parameter, ParameterType } from './parameter';\nimport Struct from './struct';\n\nexport function buildParams(params: Parameter[]): string {\n    let result = '';\n    for (const p of params) {\n        const type = p.getType();\n        switch (type) {\n        case ParameterType.ByteArray:\n            result += hex2VarBytes(p.value);\n            break;\n        case ParameterType.Int:\n            result += num2hexstring(p.value, 4, true);\n            break;\n        case ParameterType.String:\n            result += str2VarBytes(p.value);\n            break;\n        case ParameterType.Address:\n            result += p.value.serialize();\n        default:\n            break;\n        }\n    }\n    return result;\n}\n\nexport function createCodeParamScript(obj: any): string {\n    let result = '';\n    // Consider string as hexstr\n    if (typeof obj === 'string') {\n        result += pushHexString(obj);\n    } else if (typeof obj === 'boolean') {\n        result += pushBool(obj);\n    } else if (typeof obj === 'number') {\n        result += pushInt(obj);\n    } else if (obj instanceof BigNumber) {\n        result += pushBigNum(obj);\n    } else if (obj instanceof Address) {\n        result += pushHexString(obj.serialize());\n    } else if (obj instanceof Struct) {\n        for (const v of obj.list) {\n            result += createCodeParamScript(v);\n            result += num2hexstring(opcode.DUPFROMALTSTACK);\n            result += num2hexstring(opcode.SWAP);\n            result += num2hexstring(opcode.APPEND);\n        }\n    }\n    return result;\n}\n\nexport function buildNativeCodeScript(list: any[]) {\n    let result = '';\n    for (let i = list.length - 1; i >= 0; i--) {\n        const val = list[i];\n        // Consider string as hexstr\n        if (typeof val === 'string') {\n            result += pushHexString(val);\n        } else if (typeof val === 'boolean') {\n            result += pushBool(val);\n        } else if (typeof val === 'number') {\n            result += pushInt(val);\n        } else if (val instanceof BigNumber) {\n            result += pushBigNum(val);\n        } else if (val instanceof Address) {\n            result += pushHexString(val.serialize());\n        } else if (val instanceof Struct) {\n            result += pushInt(0);\n            result += num2hexstring(opcode.NEWSTRUCT);\n            result += num2hexstring(opcode.TOALTSTACK);\n            for (const v of val.list) {\n                result += createCodeParamScript(v);\n                result += num2hexstring(opcode.DUPFROMALTSTACK);\n                result += num2hexstring(opcode.SWAP);\n                result += num2hexstring(opcode.APPEND);\n            }\n            result += num2hexstring(opcode.FROMALTSTACK);\n        } else if (Array.isArray(val) && isTypedArray(val, Struct)) {\n            result += pushInt(0);\n            result += num2hexstring(opcode.NEWSTRUCT);\n            result += num2hexstring(opcode.TOALTSTACK);\n            for (const s of val) {\n                result += createCodeParamScript(s);\n            }\n            result += num2hexstring(opcode.FROMALTSTACK);\n            result += pushInt(val.length);\n            result += num2hexstring(opcode.PACK);\n        } else if (Array.isArray(val)) {\n            result += buildNativeCodeScript(val);\n            result += pushInt(val.length);\n            result += num2hexstring(opcode.PACK);\n        }\n    }\n    return result;\n}\n\nexport function isTypedArray(arr: any[], type: any) {\n    let result = true;\n    for (const a of arr) {\n        if (!(a instanceof type)) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Address, PublicKey } from '../../crypto';\nimport { DDOAttribute } from '../../transaction/ddo';\nimport { Transaction } from '../../transaction/transaction';\nimport { makeNativeContractTx } from '../../transaction/transactionBuilder';\nimport { num2hexstring, str2hexstr } from '../../utils';\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\nimport Struct from '../abi/struct';\n\n/**\n * Address of ONT ID contract\n */\nexport const ONTID_CONTRACT = '0000000000000000000000000000000000000003';\n\n/**\n * Method names in ONT ID contract\n */\nconst ONTID_METHOD  = {\n    regIDWithPublicKey: 'regIDWithPublicKey',\n    regIDWithAttributes: 'regIDWithAttributes',\n    addAttributes: 'addAttributes',\n    removeAttribute: 'removeAttribute',\n    getAttributes: 'getAttributes',\n    getDDO: 'getDDO',\n    addKey: 'addKey',\n    removeKey: 'removeKey',\n    getPublicKeys: 'getPublicKeys',\n    addRecovery: 'addRecovery',\n    changeRecovery: 'changeRecovery',\n    getKeyState: 'getKeyState'\n};\n\n/**\n * Registers Identity.\n *\n * GAS calculation: gasLimit * gasPrice is equal to the amount of gas consumed.\n *\n * @param ontid User's ONT ID\n * @param publicKey Public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildRegisterOntidTx(\n    ontid: string,\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.regIDWithPublicKey;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(ontid, publicKey.serializeHex());\n    const list = [struct];\n    const params = buildNativeCodeScript(list);\n\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n\n    return tx;\n}\n\n/**\n * Registers Identity with initial attributes.\n *\n * @param ontid User's ONT ID\n * @param attributes Array of DDOAttributes\n * @param publicKey User's public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildRegIdWithAttributes(\n    ontid: string,\n    attributes: DDOAttribute[],\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n) {\n    const method = ONTID_METHOD.regIDWithAttributes;\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    // let attrs = '';\n    // for (const a of attributes) {\n    //     attrs += a.serialize();\n    // }\n\n    // const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, ontid);\n    // const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, publicKey.serializeHex());\n    // const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, attrs);\n    // f.setParamsValue(p1, p2, p3);\n    const attrLen = attributes.length;\n    const struct = new Struct();\n    struct.add(ontid, publicKey.serializeHex(), attrLen);\n    for (const a of attributes) {\n        const key = str2hexstr(a.key);\n        const type = str2hexstr(a.type);\n        const value = str2hexstr(a.value);\n        struct.add(key, type, value);\n    }\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n\n    return tx;\n}\n\n/**\n * Adds attributes to ONT ID.\n *\n * @param ontid User's ONT ID\n * @param attributes Array of DDOAttributes\n * @param publicKey User's public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildAddAttributeTx(\n    ontid: string,\n    attributes: DDOAttribute[],\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.addAttributes;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(ontid, attributes.length);\n    for (const a of attributes) {\n        const key = str2hexstr(a.key);\n        const type = str2hexstr(a.type);\n        const value = str2hexstr(a.value);\n        struct.add(key, type, value);\n    }\n    struct.list.push(publicKey.serializeHex());\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n    return tx;\n}\n\n/**\n * Removes attribute from ONT ID.\n *\n * @param ontid User's ONT ID\n * @param key Key of attribute to remove\n * @param publicKey User's public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n *\n */\nexport function buildRemoveAttributeTx(\n    ontid: string,\n    key: string,\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.removeAttribute;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const struct = new Struct();\n    struct.add(ontid, str2hexstr(key), publicKey.serializeHex());\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n    return tx;\n}\n\n/**\n * Queries attributes attached to ONT ID.\n *\n * @param ontid User's ONT ID\n */\nexport function buildGetAttributesTx(ontid: string) {\n    const method = ONTID_METHOD.getAttributes;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const struct = new Struct();\n    struct.add(ontid);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n\n/**\n * Queries Description Object of ONT ID(DDO).\n *\n * @param ontid User's ONT ID\n */\nexport function buildGetDDOTx(ontid: string) {\n    const method = ONTID_METHOD.getDDO;\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const struct = new Struct();\n    struct.add(ontid);\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n/**\n * Adds a new public key to ONT ID.\n *\n * @param ontid User's ONT ID\n * @param newPk New public key to be added\n * @param userKey User's public key or address\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildAddControlKeyTx(\n    ontid: string,\n    newPk: PublicKey,\n    userKey: PublicKey | Address,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.addKey;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = newPk.serializeHex();\n    let p3;\n    if (userKey instanceof PublicKey) {\n        p3 = userKey.serializeHex();\n    } else if (userKey instanceof Address) {\n        p3 = userKey.serialize();\n    }\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n\n    return tx;\n}\n\n/**\n * Revokes a public key from ONT ID.\n *\n * @param ontid User's ONT ID\n * @param pk2Remove Public key to be removed\n * @param sender User's public key or address\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildRemoveControlKeyTx(\n    ontid: string,\n    pk2Remove: PublicKey,\n    sender: PublicKey | Address,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.removeKey;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = pk2Remove.serializeHex();\n    let p3;\n    if (sender instanceof PublicKey) {\n        p3 = sender.serializeHex();\n    } else if (sender instanceof Address) {\n        p3 = sender.serialize();\n    }\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n    return tx;\n}\n\n/**\n * Queries public keys attached to ONT ID.\n *\n * @param ontid User's ONT ID\n */\nexport function buildGetPublicKeysTx(ontid: string) {\n    const method = ONTID_METHOD.getPublicKeys;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(ontid);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n\n/**\n * Adds recovery address to ONT ID.\n *\n * @param ontid User's ONT ID\n * @param recovery Recovery address, must have not be set\n * @param publicKey User's public key, must be user's existing public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildAddRecoveryTx(\n    ontid: string,\n    recovery: Address,\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.addRecovery;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = recovery;\n    const p3 = publicKey.serializeHex();\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT), gasPrice, gasLimit, payer);\n    return tx;\n}\n\n/**\n * Changes recovery address of ONT ID.\n *\n * This contract call must be initiated by the original recovery address.\n *\n * @param ontid user's ONT ID\n * @param newrecovery New recovery address\n * @param oldrecovery Original recoevery address\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildChangeRecoveryTx(\n    ontid: string,\n    newrecovery: Address,\n    oldrecovery: Address,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.changeRecovery;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = newrecovery;\n    const p3 = oldrecovery;\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT),\n    gasPrice, gasLimit);\n    tx.payer = payer || oldrecovery;\n    return tx;\n}\n\n/**\n * Queries the state of the public key associated with ONT ID.\n *\n * @param ontid user's ONT ID\n * @param pkId User's public key Id\n */\nexport function buildGetPublicKeyStateTx(ontid: string, pkId: number) {\n    const method = ONTID_METHOD.getKeyState;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    // tslint:disable-next-line:no-console\n    console.log('did: ' + ontid);\n\n    const index = num2hexstring(pkId, 4, true);\n\n    // tslint:disable-next-line:no-console\n    console.log('index: ' + index);\n\n    const struct = new Struct();\n    struct.add(ontid, pkId);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { PublicKey } from '../crypto';\nimport { hexstr2str, str2VarBytes, StringReader } from '../utils';\n\n/**\n * Public key representation with recorded id from blockchain.\n *\n */\nexport class PublicKeyWithId {\n    /**\n     * Deserialize from hex string to PublicKeyWithId\n     * @param hexstr\n     */\n    static deserialize(hexstr: string): PublicKeyWithId[] {\n        const sr = new StringReader(hexstr);\n\n        const result: PublicKeyWithId[] = [];\n        while (!sr.isEmpty()) {\n            const index = sr.readUint32();\n            const data = sr.readNextBytes();\n            const p = new PublicKeyWithId();\n            p.id = index;\n            p.pk = PublicKey.deserializeHex(new StringReader(data));\n            result.push(p);\n        }\n        return result;\n    }\n\n    /**\n     * Id of the public key.\n     *\n     * Only numeric part is recorded. Full PublicKeyId will be constucted as follows:\n     * <ONTID>#keys-<id>\n     */\n    id: number;\n    pk: PublicKey;\n}\n\n/**\n * Description attribute of ONT ID\n */\nexport class DDOAttribute {\n    static deserialize(hexstr: string) {\n        const sr = new StringReader(hexstr);\n\n        const result: DDOAttribute[] = [];\n        while (!sr.isEmpty()) {\n            const key = hexstr2str(sr.readNextBytes());\n            const type = hexstr2str(sr.readNextBytes());\n            const value = hexstr2str(sr.readNextBytes());\n            const d = new DDOAttribute();\n            d.key = key;\n            d.type = type;\n            d.value = value;\n            result.push(d);\n        }\n\n        return result;\n    }\n\n    /**\n     * Key of the attribute\n     */\n    key: string;\n    /**\n     * Type of the attribute\n     */\n    type: string;\n    /**\n     * Value of the attribute\n     */\n    value: string;\n\n    /**\n     * Serialize DDO to hex string\n     */\n    serialize(): string {\n        let result = '';\n        result += str2VarBytes(this.key);\n        result += str2VarBytes(this.type);\n        result += str2VarBytes(this.value);\n        return result;\n    }\n}\n\n/**\n * Description object of ONT ID\n */\nexport class DDO {\n    /**\n     * Deserialize from hex string to DDO\n     * @param hexstr Hex encoded string\n     */\n    static deserialize(hexstr: string): DDO {\n        const ss = new StringReader(hexstr);\n\n        const ddo = new DDO();\n        const pkLen = ss.readNextLen();\n\n        if (pkLen > 0) {\n            ddo.publicKeys = PublicKeyWithId.deserialize(ss.read(pkLen));\n        }\n\n        const attrLen = ss.readNextLen();\n        if (attrLen > 0) {\n            ddo.attributes = DDOAttribute.deserialize(ss.read(attrLen));\n        }\n\n        const recoveryLen = ss.readNextLen();\n        if (recoveryLen > 0) {\n            ddo.recovery = ss.read(recoveryLen);\n        }\n        return ddo;\n    }\n\n    /**\n     * Array of public keys\n     */\n    publicKeys: PublicKeyWithId[] = [];\n    /**\n     * Array of attributes\n     */\n    attributes: DDOAttribute[] = [];\n    /**\n     * Recovery of DDO\n     */\n    recovery: string = '';\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as b64 from 'base64-url';\nimport { Address, PrivateKey, Signature, SignatureScheme } from '../crypto';\nimport RestClient from '../network/rest/restClient';\nimport { WebsocketClient } from '../network/websocket/websocketClient';\nimport {\n    buildCommitRecordTx,\n    buildGetRecordStatusTx,\n    buildRevokeRecordTx\n} from '../smartcontract/neovm/attestClaimTxBuilder';\nimport { signTransactionAsync } from '../transaction/transactionBuilder';\nimport { hexstr2str, StringReader } from '../utils';\nimport { AttestNotifyEvent } from './attestNotifyEvent';\nimport { ClaimProof } from './claimProof';\nimport { Message, Metadata } from './message';\n\n/**\n * Type of revocation.\n */\nexport enum RevocationType {\n    AttestContract = 'AttestContract',\n    RevocationList = 'RevocationList'\n}\n\n/**\n * Revocation definition.\n */\nexport interface Revocation {\n    /**\n     * Type of revocation.\n     */\n    type: RevocationType;\n\n    /**\n     * Url of revocation list if type is RevocationList\n     */\n    url?: string;\n\n    /**\n     * Address of attest contract if type is AttestContract\n     */\n    addr?: string;\n}\n\n/**\n * Verifiable claim.\n *\n * TODO: override verify to add claim proof verification.\n */\nexport class Claim extends Message {\n    static deserialize(jwt: string): Claim {\n        return super.deserializeInternal(jwt, (m: any, s: any) => new Claim(m, s));\n    }\n\n    version: string;\n    context: string;\n    content: any;\n    revocation?: Revocation;\n\n    useProof: boolean;\n    proof?: ClaimProof;\n\n    constructor(metadata: Metadata, signature?: Signature | undefined, useProof?: boolean) {\n        super(metadata, signature);\n        this.useProof = useProof === true;\n    }\n\n    /**\n     * Overrides default message verification with added attest verification.\n     *\n     * TODO: return more than boolean\n     *\n     * const VerifyOntidClaimResult = {\n     *   CLAIM_NOT_ONCHAIN : 'CLAIM_NOT_ONCHAIN',\n     *   INVALID_SIGNATURE : 'INVALID_SIGNATURE',\n     *   PK_IN_REVOKED     : 'PK_IN_REVOKED',\n     *   NO_ISSUER_PK      : 'NO_ISSUER_PK',\n     *   EXPIRED_CLAIM     : 'EXPIRED_CLAIM',\n     *   REVOKED_CLAIM     : 'REVOKED_CLAIM',\n     *   VALID_CLAIM       : 'VALID_CLAIM'\n     * };\n     *\n     * @param url Restful endpoint of Ontology node\n     * @param checkAttest Should be the attest tested\n     */\n    async verify(url: string, checkAttest = true): Promise<boolean> {\n        const result = await super.verify(url);\n\n        if (result && checkAttest) {\n            return this.getStatus(url);\n        } else {\n            return result;\n        }\n    }\n\n    /**\n     * Serializes the claim into JWT/JWT-X format.\n     *\n     * Override default implementation by adding proof if available.\n     */\n    serialize(): string {\n        if (this.useProof) {\n            const jwt = super.serialize();\n            const proof = this.serializeProof();\n\n            return jwt + '.' + proof;\n        } else {\n            return super.serialize();\n        }\n    }\n\n    /**\n     * Attests the claim onto blockchain.\n     *\n     * @param url Websocket endpoint of Ontology node\n     * @param privateKey Private key to sign the transaction\n     * @param gasPrice gasPrice\n     * @param gasLimit gasLimit\n     * @param payer payer\n     */\n    async attest(url: string, gasPrice: string, gasLimit: string,\n                 payer: Address, privateKey: PrivateKey): Promise<boolean> {\n        const attesterId = this.metadata.issuer;\n        const subjectId = this.metadata.subject;\n        const claimId = this.metadata.messageId;\n        if (claimId === undefined) {\n            throw new Error('Claim id not specified.');\n        }\n\n        const client = new WebsocketClient(url);\n        const tx = buildCommitRecordTx(claimId, attesterId, subjectId, gasPrice, gasLimit, payer);\n        await signTransactionAsync(tx, privateKey);\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\n\n        const event = AttestNotifyEvent.deserialize(response);\n        // tslint:disable-next-line:no-console\n        console.log(JSON.stringify(event));\n        return event.Result.Notify[0].States[0] === 'Push';\n    }\n\n    /**\n     * Revokes claim attest from blockchain.\n     *\n     * @param gas the cost of the transactoin\n     * @param payer the payer of the cost\n     * @param privateKey Private key to sign the transaction\n     * @param url Websocket endpoint of Ontology node\n     * @param gasPrice gasPrice\n     * @param gasLimit gasLimit\n     * @param payer payer\n     */\n    async revoke(url: string, gasPrice: string,\n                 gasLimit: string, payer: Address, privateKey: PrivateKey): Promise<boolean> {\n        const attesterId = this.metadata.issuer;\n        const claimId = this.metadata.messageId;\n        if (claimId === undefined) {\n            throw new Error('Claim id not specified.');\n        }\n        const client = new WebsocketClient(url);\n        const tx = buildRevokeRecordTx(claimId, attesterId, gasPrice, gasLimit, payer);\n        await signTransactionAsync(tx, privateKey);\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\n\n        const event = AttestNotifyEvent.deserialize(response);\n\n        return event.Result.Notify[0].States[0] === 'Push';\n    }\n\n    /**\n     * Gets status of the claim attest.\n     *\n     * @param url Restful endpoint of Ontology node\n     */\n    async getStatus(url: string): Promise<boolean> {\n        const attesterId = this.metadata.issuer;\n        const claimId = this.metadata.messageId;\n        if (claimId === undefined) {\n            throw new Error('Claim id not specified.');\n        }\n\n        const client = new RestClient(url);\n        const tx = buildGetRecordStatusTx(claimId);\n\n        const response = await client.sendRawTransaction(tx.serialize(), true);\n\n        const result = GetStatusResponse.deserialize(response);\n        // tslint:disable-next-line:no-console\n        console.log(result);\n\n        return result.status === Status.ATTESTED && result.issuerId === attesterId;\n    }\n\n    protected payloadToJSON(): any {\n        return {\n            'ver': this.version,\n            '@context': this.context,\n            'clm': this.content,\n            'clm-rev': this.revocation\n        };\n    }\n\n    protected payloadFromJSON(json: any): void {\n        this.version = json.ver;\n        this.context = json['@context'];\n        this.content = json.clm;\n        this.revocation = json['clm-rev'];\n    }\n\n    /**\n     * Serializes the header into JWT/JWT-X encoded header.\n     *\n     * Override default implementation by adding proof if available.\n     *\n     * @param algorithm Signature algorithm used\n     * @param publicKeyId The ID of a signature public key\n     */\n    protected serializeHeader(algorithm: SignatureScheme | undefined, publicKeyId: string | undefined): string {\n        if (this.useProof) {\n            if (algorithm === undefined || publicKeyId === undefined) {\n                throw new Error('Signature is needed fow JWT-X.');\n            } else {\n                const header = {\n                    alg: algorithm.labelJWS,\n                    typ: 'JWT-X',\n                    kid: publicKeyId\n                };\n\n                const stringified = JSON.stringify(header);\n                return b64.encode(stringified, 'utf-8');\n            }\n        } else {\n            return super.serializeHeader(algorithm, publicKeyId);\n        }\n    }\n\n    /**\n     * Serializes the proof into JWT-X.\n     */\n    protected serializeProof(): string {\n        const stringified = JSON.stringify(this.proof);\n        return b64.encode(stringified, 'utf-8');\n    }\n}\n\n/**\n * Helper class for deserializing GetStatus response.\n * fixme: Ontology node changed the response\n */\nexport class GetStatusResponse {\n    static deserialize(r: any): GetStatusResponse {\n        const response = new GetStatusResponse();\n\n        if (r.Result !== undefined && r.Result.Result === '') {\n            response.status = Status.NOTFOUND;\n            return response;\n        }\n        const sr = new StringReader(r.Result.Result);\n        sr.read(1); // data type\n        sr.readNextLen(); // data length\n        sr.read(1); // data type\n        const claimId = hexstr2str(sr.readNextBytes());\n        sr.read(1); // data type\n        const issuerId = hexstr2str(sr.readNextBytes());\n        sr.read(1); // data type\n        const subjectId = hexstr2str(sr.readNextBytes());\n        sr.read(1); // data type\n        let status = sr.readNextBytes();\n        response.claimId = claimId;\n        response.issuerId = issuerId;\n        response.subjectId = subjectId;\n        if (!status) {// status is revoked\n            status = '00';\n        }\n        response.status =  status as Status;\n        return response;\n    }\n\n    claimId: string;\n    issuerId: string;\n    subjectId: string;\n    status: Status;\n    // status: Status;\n    // attesterId: string;\n    // time: string;\n}\n\nexport enum Status {\n    REVOKED = '00',\n    ATTESTED = '01',\n    NOTFOUND = '-1'\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as b64 from 'base64-url';\nimport * as uuid from 'uuid';\nimport { PrivateKey, PublicKey, PublicKeyStatus, Signature, SignatureScheme } from '../crypto';\nimport RestClient from '../network/rest/restClient';\nimport { buildGetDDOTx, buildGetPublicKeyStateTx } from '../smartcontract/nativevm/ontidContractTxBuilder';\nimport { DDO } from '../transaction/ddo';\nimport { now } from '../utils';\n\n/**\n * Factory method type used for creating concrete instances of Message.\n */\nexport type MessageFactory<T extends Message> = (\n    metadata: Metadata,\n    signature: Signature | undefined\n) => T;\n\n/**\n * Metadata about the message.\n */\nexport interface Metadata {\n    /**\n     * Message id.\n     *\n     * Will be assigned if not provided.\n     */\n    messageId?: string;\n\n    /**\n     * Issuer.\n     */\n    issuer: string;\n\n    /**\n     * Recipient.\n     */\n    subject: string;\n\n    /**\n     * Creation time.\n     */\n    issuedAt: number;\n\n    /**\n     * Expiration time.\n     */\n    expireAt?: number;\n}\n\n/**\n * Common representation of Message in JWT form.\n */\nexport abstract class Message {\n\n    /**\n     * Deserializes the message from JWT format.\n     *\n     * A concrete instance will be creater through the message factory method. This method\n     * is called from concrete class.\n     *\n     * @param jwt Encoded message\n     * @param creator Factory method\n     */\n    protected static deserializeInternal<T extends Message>(jwt: string, creator: MessageFactory<T>): T {\n        const parts = jwt.split('.', 3);\n\n        if (parts.length < 2) {\n            throw new Error('Invalid message.');\n        }\n\n        const header = Message.deserializeHeader(parts[0]);\n        const payload = Message.deserializePayload(parts[1]);\n        let signature: Signature | undefined;\n\n        if (parts.length > 2) {\n            if (header.algorithm !== undefined && header.publicKeyId !== undefined) {\n                signature = Signature.deserializeJWT(parts[2], header.algorithm, header.publicKeyId);\n            } else {\n                throw new Error('Signature scheme was not specified.');\n            }\n        }\n\n        const msg = creator(payload.metadata, signature);\n        msg.payloadFromJSON(payload.rest);\n        return msg;\n    }\n\n    /**\n     * Deserializes payload part of JWT message.\n     *\n     * @param encoded JWT encoded payload\n     */\n    private static deserializePayload(encoded: string) {\n        const stringified = b64.decode(encoded);\n        const { jti, iss, sub, iat, exp, ...rest } = JSON.parse(stringified);\n\n        return {\n            metadata: {\n                messageId: jti,\n                issuer: iss,\n                subject: sub,\n                issuedAt: iat,\n                expireAt: exp\n            } as Metadata,\n            rest\n        };\n    }\n\n    /**\n     * Deserializes the header from JWT encoded header.\n     *\n     * @param encoded JWT encoded header\n     */\n    private static deserializeHeader(encoded: string) {\n        const stringified = b64.decode(encoded);\n        const header = JSON.parse(stringified);\n\n        return {\n            algorithm: header.alg !== undefined ? SignatureScheme.fromLabelJWS(header.alg) : undefined,\n            publicKeyId: header.kid\n        };\n    }\n\n    metadata: Metadata;\n    signature?: Signature;\n\n    constructor(metadata: Metadata, signature: Signature | undefined) {\n        this.metadata = metadata;\n        this.signature = signature;\n\n        if (this.metadata.messageId === undefined) {\n            this.metadata.messageId = uuid();\n        }\n    }\n\n    /**\n     * Signs the message and store the signature inside the request.\n     *\n     * If the algorithm is not specified, then default algorithm for Private key type is used.\n     *\n     * @param url Restful endpoint of Ontology node\n     * @param publicKeyId The ID of a signature public key\n     * @param privateKey Private key to sign the request with\n     * @param algorithm Signature algorithm used\n     */\n    async sign(\n        url: string,\n        publicKeyId: string,\n        privateKey: PrivateKey,\n        algorithm?: SignatureScheme\n    ): Promise<void> {\n        await retrievePublicKey(publicKeyId, url);\n\n        if (algorithm === undefined) {\n            algorithm = privateKey.algorithm.defaultSchema;\n        }\n\n        const msg = this.serializeUnsigned(algorithm, publicKeyId);\n        this.signature = await privateKey.signAsync(msg, algorithm, publicKeyId);\n    }\n\n    /**\n     * Verifies the signature and check ownership of specified ONT ID through smart contract call.\n     *\n     * @param url Restful endpoint of Ontology node\n     * @returns Boolean if the ownership is confirmed\n     */\n    async verify(url: string): Promise<boolean> {\n        const signature = this.signature;\n\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\n            try {\n                if (!this.verifyKeyOwnership()) {\n                    return false;\n                }\n\n                if (!this.verifyExpiration()) {\n                    return false;\n                }\n\n                const state = await retrievePublicKeyState(signature.publicKeyId, url);\n                if (state === PublicKeyStatus.REVOKED) {\n                    return false;\n                }\n\n                const publicKey = await retrievePublicKey(signature.publicKeyId, url);\n\n                const msg = this.serializeUnsigned(signature.algorithm, signature.publicKeyId);\n                return publicKey.verify(msg, signature);\n            } catch (e) {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Serializes the message without signature into JWT format.\n     *\n     * Header might contain algorithm and public key id.\n     *\n     * @param algorithm Signature algorithm used\n     * @param publicKeyId The ID of a signature public key\n     */\n    serializeUnsigned(algorithm?: SignatureScheme, publicKeyId?: string): string {\n        const headerEncoded = this.serializeHeader(algorithm, publicKeyId);\n        const payloadEncoded = this.serializePayload();\n\n        return headerEncoded + '.' + payloadEncoded;\n    }\n\n    /**\n     * Serializes the message into JWT format.\n     *\n     */\n    serialize(): string {\n        const signature = this.signature;\n\n        if (signature !== undefined) {\n            const signatureEncoded = signature.serializeJWT();\n            return this.serializeUnsigned(signature.algorithm, signature.publicKeyId) + '.' + signatureEncoded;\n        } else {\n            return this.serializeUnsigned();\n        }\n    }\n\n    /**\n     * Serializes the header into JWT encoded header.\n     *\n     * @param algorithm Signature algorithm used\n     * @param publicKeyId The ID of a signature public key\n     */\n    protected serializeHeader(\n        algorithm: SignatureScheme | undefined,\n        publicKeyId: string | undefined\n    ): string {\n        let header;\n        if (algorithm !== undefined) {\n            header = {\n                alg: algorithm.labelJWS,\n                typ: 'JWT',\n                kid: publicKeyId\n            };\n        } else {\n            header = {\n                typ: 'JWT'\n            };\n        }\n\n        const stringified = JSON.stringify(header);\n        return b64.encode(stringified, 'utf-8');\n    }\n\n    /**\n     * Converts claim data to JSON for serialization.\n     */\n    protected abstract payloadToJSON(): any;\n\n    /**\n     * Retrieves data from JSON.\n     *\n     * @param json JSON object with data\n     */\n    protected abstract payloadFromJSON(json: any): void;\n\n    /**\n     * Verifies if the expiration date has passed\n     */\n    private verifyExpiration(): boolean {\n        if (this.metadata.expireAt !== undefined) {\n            return now() < this.metadata.expireAt;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Verifies if the declared public key id belongs to issuer.\n     */\n    private verifyKeyOwnership(): boolean {\n        const signature = this.signature;\n\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\n            const ontId = extractOntId(signature.publicKeyId);\n\n            return ontId === this.metadata.issuer;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Serializes payload part of JWT message.\n     */\n    private serializePayload(): string {\n        const metadata = {\n            jti: this.metadata.messageId,\n            iss: this.metadata.issuer,\n            sub: this.metadata.subject,\n            iat: this.metadata.issuedAt,\n            exp: this.metadata.expireAt\n        };\n        const rest = this.payloadToJSON();\n\n        const stringified = JSON.stringify({...metadata, ...rest});\n        return b64.encode(stringified, 'utf-8');\n    }\n}\n\n/**\n * Gets the public key associated with ONT ID from blockchain.\n *\n * @param publicKeyId The ID of a signature public key\n * @param url Restful endpoint of Ontology node\n */\nexport async function retrievePublicKey(publicKeyId: string, url: string): Promise<PublicKey> {\n    const ontId = extractOntId(publicKeyId);\n    const keyId = extractKeyId(publicKeyId);\n\n    const client = new RestClient(url);\n    const tx = buildGetDDOTx(ontId);\n    const response = await client.sendRawTransaction(tx.serialize(), true);\n\n    if (response.Result && response.Result.Result) {\n        const ddo = DDO.deserialize(response.Result.Result);\n\n        const publicKey = ddo.publicKeys.find((pk) => pk.id === keyId);\n\n        if (publicKey === undefined) {\n            throw new Error('Not found');\n        }\n\n        return publicKey.pk;\n    } else {\n        throw new Error('Not found');\n    }\n}\n\n/**\n * Gets the state of public key associated with ONT ID from blockchain.\n *\n * @param publicKeyId The ID of a signature public key\n * @param url Restful endpoint of Ontology node\n */\nexport async function retrievePublicKeyState(publicKeyId: string, url: string): Promise<PublicKeyStatus> {\n    const ontId = extractOntId(publicKeyId);\n    const keyId = extractKeyId(publicKeyId);\n\n    const client = new RestClient(url);\n    const tx = buildGetPublicKeyStateTx(ontId, keyId);\n    const response = await client.sendRawTransaction(tx.serialize(), true);\n\n    if (response.Result && response.Result.Result) {\n        return PublicKeyStatus.fromHexLabel(response.Result.Result);\n    } else {\n        throw new Error('Not found');\n    }\n}\n\n/**\n * Extracts ONT ID from public key Id.\n *\n * @param publicKeyId The ID of a signature public key\n */\nexport function extractOntId(publicKeyId: string): string {\n    const index = publicKeyId.indexOf('#keys-');\n\n    if (index === -1) {\n        throw new Error('Is not a publicKeId.');\n    }\n\n    return publicKeyId.substr(0, index);\n}\n\n/**\n * Extracts key id from public key Id.\n *\n * @param publicKeyId The ID of a signature public key\n */\nexport function extractKeyId(publicKeyId: string): number {\n    const index = publicKeyId.indexOf('#keys-');\n\n    if (index === -1) {\n        throw new Error('Is not a publicKeId.');\n    }\n\n    // return num2hexstring(\n    //     Number(publicKeyId.substr(index + '#keys-'.length))\n    // );\n    return Number(publicKeyId.substr(index + '#keys-'.length));\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Address, JsonKey, PrivateKey } from './crypto';\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\nimport { ScryptParams } from './scrypt';\nimport { Transaction } from './transaction/transaction';\nimport { signTransaction } from './transaction/transactionBuilder';\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\n\n/**\n * Control data of identity\n */\nexport class ControlData {\n    static fromJson(json: any): ControlData {\n        const privateKey = deserializeFromJson(json as JsonKey);\n        const cd = new ControlData(json.id, privateKey, new Address(json.address), json.salt);\n        cd.publicKey = json.publicKey;\n        cd.hash = json.hash;\n        return cd;\n    }\n\n    /**\n     * Id of control data\n     */\n    id: string;\n    /**\n     * Encrypted private key\n     */\n    encryptedKey: PrivateKey;\n    /**\n     * Address of control data\n     */\n    address: Address;\n    /**\n     * Salt of control data\n     */\n    salt: string;\n    /**\n     * hash type\n     */\n    hash: string = 'sha256';\n    /**\n     * The public key\n     */\n    publicKey: string;\n\n    constructor(id: string, encryptedKey: PrivateKey, address: Address, salt: string) {\n        this.id = id;\n        this.encryptedKey = encryptedKey;\n        this.address = address;\n        this.salt = salt;\n    }\n\n    toJson(): object {\n        return {\n            id: this.id,\n            ...this.encryptedKey.serializeJson(),\n            address: this.address.toBase58(),\n            salt: this.salt,\n            ['enc-alg']: 'aes-256-gcm',\n            hash: this.hash,\n            publicKey: this.publicKey\n        };\n    }\n}\n\nexport class Identity {\n    /**\n     * Import identity\n     * @param label Name of identity\n     * @param encryptedPrivateKey Encrypted private key\n     * @param password User's password to decrypt\n     * @param address Address to decrypt\n     * @param saltBase64 Salt to decrypt\n     * @param params Optional params to decrypt\n     */\n    static importIdentity(\n        label: string,\n        encryptedPrivateKey: PrivateKey,\n        password: string,\n        address: Address,\n        saltBase64: string,\n        params?: ScryptParams\n    ): Identity {\n        // create identity\n        const identity = new Identity();\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\n        if (!label) {\n            label = ab2hexstring (generateRandomArray(4));\n        }\n\n        // generate ontid from p\n        const publicKey = privateKey.getPublicKey();\n        identity.ontid = Address.generateOntid(publicKey);\n        identity.label = label;\n        identity.lock = false;\n        identity.isDefault = false;\n\n        // control\n        const control = new ControlData('1', encryptedPrivateKey, Address.fromOntid(identity.ontid), saltBase64);\n        control.publicKey = publicKey.serializeHex();\n        identity.controls.push(control);\n\n        return identity;\n    }\n\n    /**\n     * Creates Identity object encrypting specified private key.\n     *\n     * The identity is not registered on the blockchain. Caller needs to register it.\n     *\n     * @param privateKey Private key associated with the identity\n     * @param keyphrase Password use to encrypt the private key\n     * @param label Custom label\n     * @param params Optional scrypt params\n     */\n    static create(privateKey: PrivateKey, keyphrase: string, label: string, params?: ScryptParams) {\n        const identity = new Identity();\n        identity.ontid = '';\n        identity.label = label;\n        identity.lock = false;\n        identity.isDefault = false;\n\n        // ontid\n        const publicKey = privateKey.getPublicKey();\n        identity.ontid = Address.generateOntid(publicKey);\n        const address = Address.fromOntid(identity.ontid);\n        const salt = randomBytes(16);\n        const encryptedPrivateKey = privateKey.encrypt(keyphrase, address, salt, params);\n        // start from 1\n        const saltBase64 = Buffer.from(salt, 'hex').toString('base64');\n        const control = new ControlData('1', encryptedPrivateKey, address, saltBase64);\n        control.publicKey = publicKey.serializeHex();\n        identity.controls.push(control);\n\n        return identity;\n    }\n\n    static parseJson(json: string): Identity {\n        return Identity.parseJsonObj(JSON.parse(json));\n    }\n\n    /**\n     * Deserializes JSON object.\n     *\n     * Object should be real object, not stringified.\n     *\n     * @param obj JSON object\n     */\n    static parseJsonObj(obj: any): Identity {\n        const id = new Identity();\n        id.ontid = obj.ontid;\n        id.label = obj.label;\n        id.lock = obj.lock;\n        id.isDefault = obj.isDefault;\n        id.controls = (obj.controls as any[]).map((c) => ControlData.fromJson(c));\n        id.extra = obj.extra;\n        return id;\n    }\n\n    ontid: string;\n    label: string;\n    lock: boolean;\n    isDefault: boolean;\n    controls: ControlData[] = [];\n    extra: null;\n\n    addControl(control: ControlData) {\n        for (const c of this.controls) {\n            if (c.address.toBase58() === control.address.toBase58()) {\n                return;\n            }\n        }\n        control.id = (this.controls.length + 1).toString();\n        this.controls.push(control);\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.toJsonObj());\n    }\n\n    /**\n     * Serializes to JSON object.\n     *\n     * Returned object will not be stringified.\n     *\n     */\n    toJsonObj(): any {\n        const obj = {\n            ontid: this.ontid,\n            label: this.label,\n            lock: this.lock,\n            isDefault: this.isDefault,\n            controls: this.controls.map((c) => c.toJson()),\n            extra: this.extra\n        };\n        return obj;\n    }\n\n    exportPrivateKey(password: string, params?: ScryptParams) {\n        const encryptedKey = this.controls[0].encryptedKey;\n        const address = this.controls[0].address;\n        const salt = this.controls[0].salt;\n        return encryptedKey.decrypt(password, address, salt, params);\n    }\n\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\n        const pri = this.exportPrivateKey(password, params);\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\n        return tx;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as cryptoJS from 'crypto-js';\nimport { Signable } from '../crypto/index';\nimport { PrivateKey } from '../crypto/PrivateKey';\nimport { TxType } from '../transaction/transaction';\nimport { SignatureScheme } from './../crypto/SignatureScheme';\nimport { TransactionAttribute } from './../transaction/txAttribute';\nimport { num2hexstring, num2VarInt } from './../utils';\nimport { Program } from './Program';\nimport { TransactionInput } from './TransactionInput';\nimport { TransactionOutput } from './TransactionOutput';\n\n/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport class TransactionNeo implements Signable {\n    /**\n     * Transaction type\n     */\n    type: TxType;\n\n    version: number = 0;\n\n    nonce: string;\n\n    attributes: TransactionAttribute[];\n\n    inputs: TransactionInput[];\n\n    outputs: TransactionOutput[];\n\n    scripts: Program[];\n\n    serialize() {\n        let result = this.serializeUnsigned();\n        result += num2VarInt(this.scripts.length);\n        for (const s of this.scripts) {\n            result += s.serialize();\n        }\n\n        return result;\n\n    }\n\n    serializeUnsigned() {\n        let result = '';\n        result += num2hexstring(this.type);\n        result += num2hexstring(this.version);\n\n        result += this.serializeExclusiveData();\n        result += num2VarInt(this.attributes.length);\n        for (const a of this.attributes) {\n            result += a.serialize();\n        }\n\n        result += num2VarInt(this.inputs.length);\n        for (const i of this.inputs) {\n            result += i.serialize();\n        }\n\n        result += num2VarInt(this.outputs.length);\n        for (const o of this.outputs) {\n            result += o.serialize();\n        }\n        return result;\n    }\n\n    getHash() {\n        const data = this.serializeUnsigned();\n\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\n\n        return ProgramSha2562;\n    }\n\n    getSignContent() {\n        return this.getHashData();\n    }\n\n    serializeUnsignedData() {\n        return this.getHashData();\n    }\n\n    getHashData() {\n        return this.serializeUnsigned();\n    }\n\n    sign(privateKey: PrivateKey, scheme: SignatureScheme = SignatureScheme.ECDSAwithSHA256) {\n        const sig = privateKey.sign(this.getHashData(), scheme).serializeHex();\n        const signature = sig.substring(2);\n        return signature;\n    }\n\n    protected serializeExclusiveData() {\n        return '';\n    }\n\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { hex2VarBytes } from '../utils';\nimport { TxType } from './../transaction/transaction';\nimport { num2hexstring } from './../utils';\nimport { TransactionNeo } from './TransactionNeo';\n\nexport class InvocationTransaction extends TransactionNeo {\n    script: string;\n    gas: number;\n    constructor() {\n        super();\n        this.type = TxType.Invoke;\n    }\n\n    serializeExclusiveData() {\n        let result = '';\n        result += hex2VarBytes(this.script);\n        result += num2hexstring(this.gas, 8, true);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport axios from 'axios';\nimport { Address } from './../crypto/address';\n\nexport class NeoRpc {\n\n    static sendRawTransaction(url: string, data: string) {\n        const req = this.makeRequest('sendrawtransaction', data);\n        return axios.post(url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    static makeRequest(method: string, ...params: any[]) {\n        const request = {\n            jsonrpc: '2.0',\n            method,\n            params,\n            id: 1\n        };\n\n        return request;\n    }\n\n    static getBalance(url: string, contractAddr: Address, address: Address) {\n        const req = this.makeRequest('getstorage', contractAddr.toHexString(), address.serialize());\n        return axios.post(url, req).then((res) => {\n            return res.data;\n        });\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { PublicKey } from '../crypto/PublicKey';\nimport { programFromMultiPubKey, programFromParams, programFromPubKey } from '../transaction/program';\nimport { hex2VarBytes, StringReader } from '../utils';\n\nexport class Program {\n    static deserialize(hexstring: string) {\n        const sr = new StringReader();\n        const program = new Program();\n        program.parameter = sr.readNextBytes();\n        program.code = sr.readNextBytes();\n        return program;\n    }\n\n    static programFromParams(sigData: string[]) {\n        return programFromParams(sigData);\n    }\n\n    static programFromPubKey(publicKey: PublicKey) {\n        return programFromPubKey(publicKey);\n    }\n\n    static programFromMultiPubKey(m: number, pks: PublicKey[]) {\n        return programFromMultiPubKey(pks, m);\n    }\n\n    parameter: string;\n\n    code: string;\n\n    serialize() {\n        let result = '';\n        result += hex2VarBytes(this.parameter);\n        result += hex2VarBytes(this.code);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport AbiFunction from '../smartcontract/abi/abiFunction';\nimport { serializeAbiFunction } from '../transaction/scriptBuilder';\nimport { num2hexstring, randomBytes } from '../utils';\nimport { Address } from './../crypto/address';\nimport { TransactionAttribute, TransactionAttributeUsage } from './../transaction/txAttribute';\nimport { InvocationTransaction } from './InvocationTransaction';\nexport class SmartContract {\n    static makeInvokeTransaction(contractAddr: Address, addr: Address, abiFunction: AbiFunction) {\n        let params = serializeAbiFunction(abiFunction);\n        params += num2hexstring(0x67);\n        params += contractAddr.serialize();\n        const tx = this.makeInvocationTransaction(params, addr);\n        return tx;\n    }\n\n    static makeInvocationTransaction(params: string, addr: Address) {\n        const tx = new InvocationTransaction();\n        tx.version = 1;\n        tx.attributes = [];\n        const attr1 = new TransactionAttribute();\n        attr1.usage = TransactionAttributeUsage.Script;\n        attr1.data = addr.serialize();\n        tx.attributes[0] = attr1;\n        const attr2 = new TransactionAttribute();\n        attr2.usage = TransactionAttributeUsage.DescriptionUrl;\n        attr2.data = randomBytes(16);\n        tx.attributes[1] = attr2;\n        tx.inputs = [];\n        tx.outputs = [];\n        tx.script = params;\n        tx.gas = 0;\n        return tx;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { reverseHex } from '../utils';\nimport { num2hexstring, StringReader } from './../utils';\n\nexport class TransactionInput {\n\n    static deserialize(hexstr: string) {\n        const sr = new StringReader(hexstr);\n        const input = new TransactionInput();\n        input.prevHash = sr.read(20);\n        input.prevIndex = parseInt(reverseHex(sr.read(2)), 16);\n        return input;\n    }\n    /**\n     * 32 bytes\n     */\n    prevHash: string;\n\n    prevIndex: number;\n\n    equals(o: any) {\n        if (o === this) {\n            return true;\n        }\n        if (null === o) {\n            return false;\n        }\n        if (!(o instanceof TransactionInput)) {\n            return false;\n        }\n        return this.prevHash === o.prevHash && this.prevIndex === o.prevIndex;\n    }\n\n    hashCode() {\n        return parseInt(reverseHex(this.prevHash) , 16) + this.prevIndex;\n    }\n\n    serialize() {\n        let result = '';\n        result += this.prevHash;\n        result += num2hexstring(this.prevIndex, 2, true);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Address } from './../crypto/address';\nimport { num2hexstring, StringReader } from './../utils';\nexport class TransactionOutput {\n\n    static deserialize(hexstring: string) {\n        const sr = new StringReader(hexstring);\n        const output = new TransactionOutput();\n        output.assetId = sr.read(32);\n        output.value = sr.readLong();\n        output.scriptHash = new Address(sr.read(20));\n        return output;\n    }\n\n    /**\n     * 32 bytes\n     */\n    assetId: string;\n\n    // long\n    value: number;\n\n    scriptHash: Address;\n\n    serialize() {\n        let result = '';\n        result += this.assetId;\n        result += num2hexstring(this.value, 8, true);\n        result += this.scriptHash.serialize();\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport axios from 'axios';\nimport { TEST_ONT_URL } from '../../consts';\nimport { Address } from '../../crypto/address';\nimport { ERROR_CODE } from '../../error';\n\n/**\n * Wrapper class for RPC apis.\n */\nexport default class RpcClient {\n    /**\n     * Url of the blockchain node\n     */\n    url: string;\n\n    constructor( url ?: string ) {\n        this.url = url || TEST_ONT_URL.RPC_URL;\n    }\n\n    /**\n     * Get the current blockchain node url.\n     */\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * Make request base on method and parameters\n     * @param method Method's name\n     * @param params Parameters\n     */\n    makeRequest(method: string, ...params: any[]) {\n        const request = {\n            jsonrpc: '2.0',\n            method,\n            params,\n            id: 1\n        };\n\n        return request;\n    }\n\n    /**\n     * Get the balance of some address.\n     * The result contains ONT and ONG.\n     * @param address Address\n     */\n    getBalance(address: Address): Promise<any> {\n        const req = this.makeRequest('getbalance', address.toBase58());\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Send ran transaction to blockchain.\n     * @param data Hex encoded data.\n     * @param preExec Decides if it is a pre-execute transaction.\n     */\n    sendRawTransaction(data: string, preExec: boolean = false): Promise<any> {\n        let req;\n\n        if (preExec) {\n            req = this.makeRequest('sendrawtransaction', data, 1);\n        } else {\n            req = this.makeRequest('sendrawtransaction', data);\n        }\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get raw transaction by transaction hash.\n     * The result is hex encoded string.\n     * @param txHash Reversed transaction hash\n     */\n    getRawTransaction(txHash: string): Promise<any> {\n        const req = this.makeRequest('getrawtransaction', txHash);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get transaction info by transaction hash.\n     * The result is json.\n     * @param txHash Reversed transaction hash.\n     */\n    getRawTransactionJson(txHash: string): Promise<any> {\n        const req = this.makeRequest('getrawtransaction', txHash, 1);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /** Deprecated\n     * Get the generation time for each block.\n     * If the blockchain node runs in vbft, the result is null cause the time is not fixed.\n     */\n    // getGenerateBlockTime(): Promise<any> {\n    //     const req = this.makeRequest('getgenerateblocktime');\n\n    //     return axios.post(this.url, req).then((res) => {\n    //         return res.data;\n    //     });\n    // }\n\n    /**\n     * Get the nodes count.\n     */\n    getNodeCount(): Promise<any> {\n        const req = this.makeRequest('getconnectioncount');\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the current block height.\n     */\n    getBlockHeight(): Promise<any> {\n        const req = this.makeRequest('getblockcount');\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the all blocks count.\n     */\n    getBlockCount(): Promise<any> {\n        const req = this.makeRequest('getblockcount');\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block info by block's height or hash.\n     * The result is json.\n     * @param value Block's hash or height\n     */\n    getBlockJson(value: string | number): Promise<any> {\n        const req = this.makeRequest('getblock', value, 1);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by contract' code hash.\n     * The result is hex encoded string.\n     * @param hash Contract's code hash.\n     */\n    getContract(hash: string): Promise<any> {\n        const req = this.makeRequest('getcontractstate', hash);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by contract's code hash.\n     * The result is json.\n     * @param codeHash Contract's code hash.\n     */\n    getContractJson(codeHash: string): Promise<any> {\n        const req = this.makeRequest('getcontractstate', codeHash, 1);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block info by block's height or hash.\n     * The result is hex encoded string.\n     *\n     * @param value Block's height or hash\n     */\n    getBlock(value: string | number): Promise<any> {\n        const req = this.makeRequest('getblock', value);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get smart contract event.\n     * If parameter is transaction's hash, the result is the event of that transaction.\n     * If parameter is block's height, the result is all the events of that block.\n     *\n     * @param value Transaction's hash or block's height\n     */\n    getSmartCodeEvent(value: string | number): Promise<any> {\n        const req = this.makeRequest('getsmartcodeevent', value);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block height by transaction hash\n     * @param txHash Reversed transaction hash\n     */\n    getBlockHeightByTxHash(txHash: string): Promise<any> {\n        const req = this.makeRequest('getblockheightbytxhash', txHash);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get stored value in smart contract by contract's code hash and the key.\n     * @param codeHash Contract's code hash\n     * @param key Key of stored value\n     */\n    getStorage(codeHash: string, key: string): Promise<any> {\n        const req = this.makeRequest('getstorage', codeHash, key);\n\n        // tslint:disable-next-line:no-console\n        console.log(req);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get merkle proof by transaction hash.\n     * @param hash Reversed transaction hash\n     */\n    getMerkleProof(hash: string): Promise<any> {\n        const req = this.makeRequest('getmerkleproof', hash);\n\n        // tslint:disable-next-line:no-console\n        console.log(this.url);\n        // tslint:disable-next-line:no-console\n        console.log(req);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get allowanece\n     * @param asset Asset's type.Only ONT and ONG supported.\n     * @param from Address of allowance's sender.\n     * @param to Address of allowance's receiver.\n     */\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\n        if (asset !== 'ont' && asset !== 'ong') {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const req = this.makeRequest('getallowance', asset, from.toBase58(), to.toBase58());\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BigNumber } from 'bignumber.js';\nimport BigInt from '../../common/bigInt';\nimport { TOKEN_TYPE } from '../../consts';\nimport { Address } from '../../crypto';\nimport { ERROR_CODE } from '../../error';\nimport { Transaction } from '../../transaction/transaction';\nimport { Transfer } from '../../transaction/transfer';\nimport { hex2VarBytes, hexstr2str, StringReader } from '../../utils';\nimport { makeNativeContractTx } from './../../transaction/transactionBuilder';\nimport { buildNativeCodeScript } from './../abi/nativeVmParamsBuilder';\nimport Struct from './../abi/struct';\n\nexport const ONT_CONTRACT = '0000000000000000000000000000000000000001';\nexport const ONG_CONTRACT = '0000000000000000000000000000000000000002';\n\n/**\n * Get the address of native asset contract\n * @param tokenType Token type. Can only be ONT or ONG\n */\nexport function getTokenContract(tokenType: string) {\n    if (tokenType === TOKEN_TYPE.ONT) {\n        return new Address(ONT_CONTRACT);\n    } else if (tokenType === TOKEN_TYPE.ONG) {\n        return new Address(ONG_CONTRACT);\n    } else {\n        throw new Error('Error token type.');\n    }\n}\n\n/**\n * Verify amount\n * @param amount Amount\n */\nexport function verifyAmount(amount: number | string) {\n    const value = new BigNumber(amount);\n\n    if (!value.isInteger() || value.lte(new BigNumber(0))) {\n        throw new Error('Amount is invalid.');\n    }\n}\n\n/**\n * Creates transaction to transfer native assets.\n * @param tokenType ONT or ONG\n * @param from sender's address\n * @param to receiver's address\n * @param amount Amount of amount to transfer\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for transaction's gas.\n */\nexport function makeTransferTx(\n    tokenType: string,\n    from: Address,\n    to: Address,\n    amount: number | string,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transfer {\n    verifyAmount(amount);\n    const num = new BigNumber(amount);\n    const struct = new Struct();\n    struct.add(from, to, num);\n    const list = [];\n    list.push([struct]);\n    const contract = getTokenContract(tokenType);\n    const params = buildNativeCodeScript(list);\n    const tx: Transfer = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit) as any;\n    tx.tokenType = tokenType;\n    tx.from = from;\n    tx.to = to;\n    tx.amount = amount;\n    tx.method = 'transfer';\n\n    if (payer) {\n        tx.payer = payer;\n    } else {\n        tx.payer = from;\n    }\n    return tx;\n}\n\n/**\n * transfer from multiple senders to one receiver\n * this tx needs multiple senders' signature.\n * @param tokenType\n * @param from array of senders' address\n * @param to receiver's address\n * @param amounts\n */\n/* export function makeTransferFromManyTx(\n    tokenType: string,\n    from: Address[],\n    to: Address,\n    amounts: string[],\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const states = new Array<State>(from.length);\n\n    if (from.length !== amounts.length) {\n        throw new Error('Params error.');\n    }\n    for (let i = 0; i < from.length; i++) {\n        verifyAmount(amounts[i]);\n        const s = new State(from[i], to, amounts[i]);\n        states[i] = s;\n    }\n\n    const transfers = new Transfers();\n    transfers.states = states;\n\n    const contract = getTokenContract(tokenType);\n    const params = transfers.serialize();\n    const tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\n    tx.payer = from[0];\n    return tx;\n} */\n\n/**\n * transfer from one sender to multiple receivers\n * @param tokenType\n * @param from\n * @param to\n * @param amounts\n */\n/* export function makeTransferToMany(\n    tokenType: string,\n    from: Address,\n    to: Address[],\n    amounts: string[],\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const states = new Array<State>(to.length);\n\n    if (to.length !== amounts.length) {\n        throw new Error('Params error.');\n    }\n\n    for (let i = 0; i < to.length; i++) {\n        verifyAmount(amounts[i]);\n        const s = new State(from, to[i], amounts[i]);\n        states[i] = s;\n    }\n\n    const transfers = new Transfers();\n    transfers.states = states;\n\n    const contract = getTokenContract(tokenType);\n    const params = transfers.serialize();\n    const tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\n    tx.payer = from;\n    return tx;\n} */\n\n/**\n * Withdraw ong from sender's address and send to receiver's address\n * @param from Sender's address\n * @param to Receiver's address\n * @param amount Amount of ONG to withdraw.The value needs to multiply 1e9 to keep precision\n * @param payer Address to pay for transaction's gas\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeWithdrawOngTx(from: Address, to: Address, amount: number | string, payer: Address,\n                                  gasPrice: string, gasLimit: string): Transfer {\n    verifyAmount(amount);\n    const num = new BigNumber(amount);\n\n    // const tf = new TransferFrom(from, new Address(ONT_CONTRACT), to, amount);\n    // const params = tf.serialize();\n    const list = [];\n    const struct = new Struct();\n    struct.add(from, new Address(ONT_CONTRACT), to, num);\n    list.push(struct);\n    const args = buildNativeCodeScript(list);\n    const tx: Transfer = makeNativeContractTx(\n        'transferFrom', args, new Address(ONG_CONTRACT) , gasPrice, gasLimit) as any;\n    tx.payer = payer;\n    tx.tokenType = 'ONG';\n    tx.from = from;\n    tx.to = to;\n    tx.amount = amount;\n    tx.method = 'transferFrom';\n    return tx;\n}\n\n/**\n * Creates transaction to query allowance that can be sent from sender to receiver\n * @param asset Asset type. Only ONT or ONg.\n * @param from Sender's address\n * @param to Receiver's address\n */\nexport function makeQueryAllowanceTx(asset: string, from: Address, to: Address): Transaction {\n    asset = asset.toLowerCase();\n    if (asset !== 'ont' && asset !== 'ong') {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    let contract = '';\n    if (asset === 'ong') {\n        contract = ONG_CONTRACT;\n    } else {\n        contract = ONT_CONTRACT;\n    }\n    const list = [];\n    const struct = new Struct();\n    struct.add(from, to);\n    list.push(struct);\n    const params = buildNativeCodeScript(list);\n    const tx = makeNativeContractTx('allowance', params, new Address(contract), '0', '0');\n    return tx;\n}\n\n/**\n * Creates transaction to query balance.\n * @param asset Token type,ont or ong\n * @param address Address to query balance\n */\nexport function makeQueryBalanceTx(asset: string,  address: Address): Transaction {\n    asset = asset.toLowerCase();\n    if (asset !== 'ont' && asset !== 'ong') {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    let contract = '';\n    if (asset === 'ong') {\n        contract = ONG_CONTRACT;\n    } else {\n        contract = ONT_CONTRACT;\n    }\n    const params = hex2VarBytes(address.serialize());\n    const tx = makeNativeContractTx('balanceOf', params, new Address(contract), '0', '0');\n    return tx;\n}\n\nexport function deserializeTransferTx(str: string): Transfer {\n    const tx: Transfer = Transaction.deserialize(str) as any;\n    const code = tx.payload.serialize();\n    const contractIndex1 = code.lastIndexOf('14' + '000000000000000000000000000000000000000');\n    const contractIndex2 = code.lastIndexOf('14' + '0000000000000000000000000000000000000002');\n    if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '1') {\n        tx.tokenType = 'ONT';\n    } else if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '2') {\n        tx.tokenType = 'ONG';\n    } else {\n        throw new Error('Not a transfer tx');\n    }\n    const contractIndex = Math.max(contractIndex1, contractIndex2);\n    const params = code.substring(0, contractIndex);\n    const paramsEnd = params.indexOf('6a7cc86c') + 8;\n    if (params.substr(paramsEnd, 4) === '51c1') { // transfer\n        const methodStr = params.substring(paramsEnd + 6);\n        tx.method = hexstr2str(methodStr);\n    } else {\n        const methodStr = params.substring(paramsEnd + 2);\n        tx.method = hexstr2str(methodStr);\n    }\n\n    if (tx.method === 'transfer') {\n        const sr = new StringReader(params);\n        // const codeLength = sr.readNextLen();\n        // const bytes = sr.read(4);\n        sr.pos += 10;\n        const from = new Address(sr.read(20));\n        tx.from = from;\n        // const bytes2 = sr.read(4);\n        sr.pos += 8;\n        const to = new Address(sr.read(20));\n        tx.to = to;\n        // const bytes3 = sr.read(3);\n        sr.pos += 6;\n        const numTmp = parseInt(sr.read(1), 16);\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\n            tx.amount = numTmp - 80;\n        } else {\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\n            tx.amount = new BigNumber(amount).toString();\n        }\n    } else if (tx.method === 'transferFrom') {\n        const sr = new StringReader(params);\n        // const codeLength = sr.readNextLen();\n        // const bytes = sr.read(4);\n        sr.pos += 10;\n        const from = new Address(sr.read(20));\n        tx.from = from;\n        // const bytes1 = sr.read(4);\n        // const contract = new Address(sr.read(20));\n        // const bytes2 = sr.read(4);\n        sr.pos += 56;\n        const to = new Address(sr.read(20));\n        tx.to = to;\n        // const bytes3 = sr.read(3);\n        sr.pos += 6;\n        const numTmp = parseInt(sr.read(1), 16);\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\n            tx.amount = numTmp - 80;\n        } else {\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\n            tx.amount = new BigNumber(amount).toString();\n        }\n    } else {\n        throw new Error('Not a transfer tx');\n    }\n\n    return tx;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BigNumber } from 'bignumber.js';\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\nimport { Transaction } from '../../transaction/transaction';\nimport { str2hexstr } from '../../utils';\nimport { Address } from './../../crypto/address';\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\nimport { num2hexstring } from './../../utils';\nimport { Parameter, ParameterType } from './../abi/parameter';\n\nexport class Oep8State {\n    public from: string;\n    public to: string;\n    public tokenId: string;\n    public value: BigNumber;\n\n    public constructor(from: Address, to: Address, tokenId: number, value: string) {\n        this.from = from.serialize();\n        this.to = to.serialize();\n        this.tokenId = num2hexstring(tokenId);\n        this.value = new BigNumber(value);\n    }\n}\n\nexport class TransferFrom {\n    spender: string;\n    from: string;\n    to: string;\n    tokenId: string;\n    value: BigNumber;\n    constructor(spender: Address, from: Address, to: Address, tokenId: number, value: string) {\n        this.spender = spender.serialize();\n        this.from = from.serialize();\n        this.to = to.serialize();\n        this.tokenId = num2hexstring(tokenId);\n        this.value = new BigNumber(value);\n    }\n}\n\nconst FunctionNames = {\n    Name: 'name',\n    Symbol: 'symbol',\n    TotalSupply: 'totalSupply',\n    BalanceOf: 'balanceOf',\n    Transfer: 'transfer',\n    TransferMulti: 'transferMulti',\n    Approve: 'approve',\n    ApproveMulti: 'approveMulti',\n    Allowance: 'allowance',\n    TransferFrom: 'transferFrom',\n    TransferFromMulti: 'transferFromMulti',\n    Compound: 'compound',\n    Concatkey: 'concatkey',\n    Init: 'init',\n    CreateMultiKindsPumpkin: 'createMultiKindsPumpkin',\n    CheckTokenPrefix: 'checkTokenPrefix',\n    BalancesOf: 'balancesOf',\n    TotalBalanceOf: 'totalBalanceOf',\n    CheckTokenId: 'checkTokenId'\n};\n\nexport class Oep8TxBuilder {\n    contractAddr: Address;\n\n    constructor(contractAddr: Address) {\n        this.contractAddr = contractAddr;\n    }\n\n    makeInitTx(\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Init;\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferTx(\n        sendAddr: Address,\n        recvAddr: Address,\n        tokenId: number,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Transfer;\n        const params = [\n            new Parameter('sender', ParameterType.ByteArray, sendAddr.serialize()),\n            new Parameter('recv', ParameterType.ByteArray, recvAddr.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferMultiTx(\n        states: Oep8State[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const list = [];\n        list.push(str2hexstr(FunctionNames.TransferMulti));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.from,\n                state.to,\n                state.tokenId,\n                state.value\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeApproveTx(\n        owner: Address,\n        spender: Address,\n        tokenId: number,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Approve;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeApproveMulti(\n        states: Oep8State[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.ApproveMulti;\n        const list = [];\n        list.push(str2hexstr(func));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.from,\n                state.to,\n                state.tokenId,\n                state.value\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferFromMulti(\n        states: TransferFrom[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.TransferFromMulti;\n        const list = [];\n        list.push(str2hexstr(func));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.spender,\n                state.from,\n                state.to,\n                state.tokenId,\n                state.value\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferFromTx(\n        sender: Address,\n        from: Address,\n        to: Address,\n        tokenId: number,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.TransferFrom;\n        const params = [\n            new Parameter('sender', ParameterType.ByteArray, sender.serialize()),\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Compound tokens\n     * @param account User's address\n     * @param compoundNum 0 - compound all tokens that can be compounded; 1 - compound 1 token of each type.\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer to pay for gas\n     */\n    makeCompoundTx(\n        account: Address,\n        compoundNum: number,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Compound;\n        const params = [\n            new Parameter('account', ParameterType.ByteArray, account.serialize()),\n            new Parameter('compoundNum', ParameterType.Integer, compoundNum)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeQueryAllowanceTx(\n        owner: Address,\n        spender: Address,\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.Allowance;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryBalanceOfTx(\n        addr: Address,\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.BalanceOf;\n        const params = [\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTotalSupplyTx(\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.TotalSupply;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryNameTx(\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.Name;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryDecimalsTx(): Transaction {\n        const func = FunctionNames.Symbol;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n    makeQuerySymbolTx(\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.Symbol;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryBalancesTx(\n        account: Address\n    ): Transaction {\n        const func = FunctionNames.BalancesOf;\n        const params = [\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTotalBalanceTx(\n        account: Address\n    ): Transaction {\n        const func = FunctionNames.TotalBalanceOf;\n        const params = [\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { Account } from './account';\nimport { DEFAULT_SCRYPT } from './consts';\nimport { Identity } from './identity';\n\n/**\n * Class to manage Accounts and Identity\n */\nexport class Wallet {\n\n    static parseJson(json: string): Wallet {\n        return Wallet.parseJsonObj(JSON.parse(json));\n    }\n\n    /**\n     * Deserializes JSON object.\n     *\n     * Object should be real object, not stringified.\n     *\n     * @param obj JSON object\n     */\n    static parseJsonObj(obj: any): Wallet {\n        const wallet = new Wallet();\n        wallet.name = obj.name;\n        wallet.defaultOntid = obj.defaultOntid;\n        wallet.defaultAccountAddress = obj.defaultAccountAddress;\n        wallet.createTime = obj.createTime;\n        wallet.version = obj.version;\n        wallet.scrypt = obj.scrypt;\n        wallet.identities = obj.identities && (obj.identities as any[]).map((i) => Identity.parseJsonObj(i));\n        wallet.accounts = obj.accounts && (obj.accounts as any[]).map((a) => Account.parseJsonObj(a));\n        wallet.extra = obj.extra;\n        return wallet;\n    }\n\n    static fromWalletFile(obj: any): Wallet {\n        const wallet = Wallet.parseJsonObj(obj);\n        return wallet;\n    }\n\n    /**\n     * @example\n     * ```typescript\n     *\n     * import { Wallet } from 'ontology-ts-sdk';\n     * const wallet = Wallet.create('test');\n     * ```\n     *\n     * @param name Wallet's name\n     */\n    static create(name: string): Wallet {\n        const wallet = new Wallet();\n        wallet.name = name;\n\n        // createtime\n        wallet.createTime = (new Date()).toISOString();\n        wallet.version = '1.0';\n        wallet.scrypt = {\n            n: DEFAULT_SCRYPT.cost,\n            r: DEFAULT_SCRYPT.blockSize,\n            p: DEFAULT_SCRYPT.parallel,\n            dkLen: DEFAULT_SCRYPT.size\n        };\n\n        return wallet;\n    }\n\n    name: string;\n    defaultOntid: string = '';\n    defaultAccountAddress: string = '';\n    createTime: string;\n    version: string;\n    scrypt: {\n        n: number;\n        r: number;\n        p: number;\n        dkLen: number;\n    };\n    identities: Identity[] = [];\n    accounts: Account[] = [];\n    extra: null;\n\n    addAccount(account: Account): void {\n        for (const ac of this.accounts) {\n            if (ac.address.toBase58() === account.address.toBase58()) {\n                return;\n            }\n        }\n        this.accounts.push(account);\n    }\n\n    addIdentity(identity: Identity): void {\n        for (const item of this.identities) {\n            if (item.ontid === identity.ontid) {\n                return;\n            }\n        }\n        this.identities.push(identity);\n    }\n\n    setDefaultAccount(address: string): void {\n        this.defaultAccountAddress = address;\n    }\n\n    setDefaultIdentity(ontid: string): void {\n        this.defaultOntid = ontid;\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.toJsonObj());\n    }\n\n    /**\n     * Serializes to JSON object.\n     *\n     * Returned object will not be stringified.\n     *\n     */\n    toJsonObj(): any {\n        const obj = {\n            name: this.name,\n            defaultOntid: this.defaultOntid,\n            defaultAccountAddress: this.defaultAccountAddress,\n            createTime: this.createTime,\n            version: this.version,\n            scrypt: this.scrypt,\n            identities: this.identities.map((i) => i.toJsonObj()),\n            accounts: this.accounts.map((a) => a.toJsonObj()),\n            extra: null\n        };\n\n        return obj;\n    }\n\n    signatureData(): string {\n        return '';\n    }\n\n    /*\n    *generate a wallet file that is compatible with cli wallet.\n    */\n    toWalletFile(): any {\n        const obj = this.toJsonObj();\n        return obj;\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/*\n********************************* Notice ********************************************\n*************************************************************************************\n* All the methods in this file is only for our native app development!!!\n* We do not recommend you to use these methods directly.\n* You can refer to these methods or the test cases to implement the same methods.\n*************************************************************************************\n*************************************************************************************\n*/\nimport axios from 'axios';\nimport * as bip39 from 'bip39';\nimport { Account } from '../account';\nimport { Claim } from '../claim/claim';\nimport { HTTP_REST_PORT, HTTP_WS_PORT, ONT_BIP44_PATH, REST_API, TEST_NODE } from '../consts';\nimport { Address, PgpSignature, PrivateKey, PublicKey } from '../crypto';\nimport { ERROR_CODE } from '../error';\nimport { Identity } from '../identity';\nimport { NeoRpc } from '../neocore/NeoRpc';\nimport { Program } from '../neocore/Program';\nimport { SmartContract } from '../neocore/SmartContract';\nimport RestClient from '../network/rest/restClient';\nimport { ScryptParams } from '../scrypt';\nimport * as scrypt from '../scrypt';\nimport AbiInfo from '../smartcontract/abi/abiInfo';\nimport { Parameter } from '../smartcontract/abi/parameter';\nimport { makeTransferTx, makeWithdrawOngTx, ONT_CONTRACT } from '../smartcontract/nativevm/ontAssetTxBuilder';\nimport { buildAddAttributeTx, buildGetDDOTx, buildRegisterOntidTx\n} from '../smartcontract/nativevm/ontidContractTxBuilder';\nimport { Oep8TxBuilder } from '../smartcontract/neovm/oep8TxBuilder';\nimport { DDOAttribute } from '../transaction/ddo';\nimport { Transaction } from '../transaction/transaction';\nimport {\n    buildRestfulParam,\n    sendRawTxRestfulUrl,\n    signTransaction,\n    signTx\n} from '../transaction/transactionBuilder';\nimport { generateMnemonic, hexstr2str, isBase64, isHexString, now, reverseHex,\n    sendBackResult2Native, str2hexstr, StringReader } from '../utils';\nimport { Wallet } from '../wallet';\nimport { ParameterType } from './../smartcontract/abi/parameter';\n\n// tslint:disable-next-line:no-var-requires\nconst HDKey = require('@ont-community/hdkey-secp256r1');\n\n// tslint:disable:no-unused-expression\n// tslint:disable:no-shadowed-variable\n\n// neo contract\nconst CONTRACT_HASH = 'ceab719b8baa2310f232ee0d277c061704541cfb';\n// neo node\nconst NEO_NODE = 'http://neonode1.ont.network:10332';\n// neo abi\n// tslint:disable-next-line:max-line-length\nconst NEP5_ABI = '{\"hash\":\"0x5bb169f915c916a5e30a3c13a5e0cd228ea26826\",\"entrypoint\":\"Main\",\"functions\":[{\"name\":\"Name\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Symbol\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Decimals\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Main\",\"parameters\":[{\"name\":\"operation\",\"type\":\"String\"},{\"name\":\"args\",\"type\":\"Array\"}],\"returntype\":\"Any\"},{\"name\":\"Init\",\"parameters\":[],\"returntype\":\"Boolean\"},{\"name\":\"TotalSupply\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Transfer\",\"parameters\":[{\"name\":\"from\",\"type\":\"ByteArray\"},{\"name\":\"to\",\"type\":\"ByteArray\"},{\"name\":\"value\",\"type\":\"Integer\"}],\"returntype\":\"Boolean\"},{\"name\":\"BalanceOf\",\"parameters\":[{\"name\":\"address\",\"type\":\"ByteArray\"}],\"returntype\":\"Integer\"}],\"events\":[{\"name\":\"transfer\",\"parameters\":[{\"name\":\"arg1\",\"type\":\"ByteArray\"},{\"name\":\"arg2\",\"type\":\"ByteArray\"},{\"name\":\"arg3\",\"type\":\"Integer\"}],\"returntype\":\"Void\"}]}';\n// neo swap address\n// const RECEIVER_ADDR = 'AFmseVrdL9f9oyCzZefL9tG6UbvhPbdYzM';\n\nconst NEO_TRAN = 100000000;\n\nexport class SDK {\n    static SERVER_NODE: string = TEST_NODE;\n    static REST_PORT: string = HTTP_REST_PORT;\n    static SOCKET_PORT: string = HTTP_WS_PORT;\n    static restClient: RestClient = new RestClient();\n\n    static setServerNode(node: string) {\n        if (node) {\n            let url = '';\n            if (node.indexOf('http') > -1) {\n                url = node.substr('http://'.length);\n            } else {\n                url = node;\n            }\n            SDK.SERVER_NODE = url;\n            return;\n        }\n\n        throw new Error('Can not set ' + node + 'as server node');\n    }\n\n    static setRestPort(port: string) {\n        if (port) {\n            SDK.REST_PORT = port;\n            SDK.restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n            return;\n        }\n\n        throw new Error('Can not set ' + port + ' as restful port');\n    }\n\n    static setSocketPort(port: string) {\n        if (port) {\n            SDK.SOCKET_PORT = port;\n            return;\n        }\n        throw new Error('Can not set ' + port + 'as socket port');\n    }\n\n    static getDecryptError(err: any) {\n        return {\n            error: ERROR_CODE.Decrypto_ERROR,\n            result: ''\n        };\n    }\n\n    static transformPassword(password: string) {\n        if (isBase64(password)) {\n            return Buffer.from(password, 'base64').toString();\n        }\n        return password;\n    }\n\n    static createWallet(name: string,\n                        password: string, payer: string, gasPrice: string, gasLimit: string, callback?: string) {\n        const wallet = Wallet.create(name);\n        password = this.transformPassword(password);\n        const privateKey = PrivateKey.random();\n        const identity = Identity.create(privateKey, password, name);\n\n        wallet.defaultOntid = identity.ontid;\n        wallet.addIdentity(identity);\n\n        // let account = new Account()\n        // account.create(privateKey, password, name)\n        // wallet.addAccount(account)\n\n        const walletDataStr = wallet.toJson();\n        let obj: any = {\n            error: 0,\n            result: walletDataStr,\n            tx : ''\n        };\n\n        const publicKey = privateKey.getPublicKey();\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        // add preExec\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            // preExec success, send real request\n            if (res.Result.Result === '01') {\n                // restClient.sendRawTransaction(tx.serialize(), false)\n                obj.tx = tx.serialize();\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            } else {\n                const errResult = {\n                    error: ERROR_CODE.PreExec_ERROR,\n                    result: ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\n                }\n                return errResult;\n            }\n        }).catch((err: any) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static importIdentityWithWallet(\n        label: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ) {\n        let obj: any;\n        let identity = new Identity();\n        try {\n            // TODO check ontid\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n            const addr = new Address(address);\n            password = this.transformPassword(password);\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\n        } catch (err) {\n            obj  = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }\n        obj = {\n            error : ERROR_CODE.SUCCESS,\n            result : identity.toJson()\n        };\n        // check ontid on chain\n        const tx = buildGetDDOTx(identity.ontid);\n        const param = buildRestfulParam(tx);\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\n        const url = sendRawTxRestfulUrl(restUrl, true);\n        // clear privateKey and password\n        password = '';\n        return axios.post(url, param).then((res: any) => {\n            const result = res.data.Result;\n            if (result.Result) {\n                //\n            } else {\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\n                obj.result = '';\n            }\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result : ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    // send http post to check\n    static importIdentityAndCreateWallet(\n        label: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ) {\n        let identity = new Identity();\n        let error = {};\n        let obj: any;\n        try {\n            password = this.transformPassword(password);\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n            const addr = new Address(address);\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\n            const wallet = Wallet.create(identity.label);\n            wallet.defaultOntid = identity.ontid;\n            wallet.addIdentity(identity);\n            const walletStr = wallet.toJson();\n            obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: walletStr\n            };\n            // check ontid on chain\n            const tx = buildGetDDOTx(identity.ontid);\n            const param = buildRestfulParam(tx);\n            const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\n            const url = sendRawTxRestfulUrl(restUrl, true);\n            return axios.post(url, param).then((res: any) => {\n                const result = res.data.Result;\n                if (result.Result) {\n                    //\n                } else {\n                    obj.error = ERROR_CODE.UNKNOWN_ONTID;\n                    obj.result = '';\n                }\n                // clear privateKey and password\n                password = '';\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            }).catch((err) => {\n                obj = {\n                    error: ERROR_CODE.NETWORK_ERROR,\n                    result : ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n            });\n            // callback && sendBackResult2Native(JSON.stringify(obj), callback)\n            // return obj\n        } catch (err) {\n            error = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(error), callback);\n            }\n            return Promise.reject(error);\n        }\n    }\n\n    static createIdentity(label: string, password: string, payer: string,\n                          gasPrice: string, gasLimit: string, callback?: string) {\n        const privateKey = PrivateKey.random();\n        password = this.transformPassword(password);\n        const identity = Identity.create(privateKey, password, label);\n        const result = identity.toJson();\n        let obj: any = {\n            error: ERROR_CODE.SUCCESS,\n            result,\n            tx : ''\n        };\n        // register ontid\n        const publicKey = privateKey.getPublicKey();\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        password = '';\n        privateKey.key = '';\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            // preExec success, send real request\n            if (res.Result.Result === '01') {\n                // restClient.sendRawTransaction(tx.serialize(), false)\n                obj.tx = tx.serialize();\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                // clear privateKey and password\n                privateKey.key = '';\n                password = '';\n                return obj;\n            } else {\n                const errResult = {\n                    error: ERROR_CODE.PreExec_ERROR,\n                    result: ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\n                }\n                return errResult;\n            }\n        }).catch((err: any) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static createAccount(label: string, password: string, callback?: string) {\n        // generate mnemnic\n        let mnemonic = generateMnemonic();\n        password = this.transformPassword(password);\n        const mnemonicHex = str2hexstr(mnemonic);\n        const privateKey = PrivateKey.generateFromMnemonic(mnemonic);\n        const account = Account.create(privateKey, password, label);\n        const addr = account.address;\n        const salt = Buffer.from(account.salt, 'base64').toString('hex');\n        const mnemonicEnc = scrypt.encryptWithGcm(mnemonicHex, addr, salt, password);\n        const result = account.toJson();\n        const obj = {\n            error : ERROR_CODE.SUCCESS,\n            result,\n            mnemonicEnc\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        mnemonic = '';\n        return obj;\n    }\n\n    static decryptMnemonicEnc(mnemonicEnc: string,\n                              address: string, salt: string, password: string, callback?: string) {\n        let obj;\n        password = this.transformPassword(password);\n        const addr = new Address(address);\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\n        const decMneHex = scrypt.decryptWithGcm(mnemonicEnc, addr, saltHex, password);\n        const decMne = hexstr2str(decMneHex);\n        obj = {\n            error: ERROR_CODE.SUCCESS,\n            result: decMne\n        };\n        // tslint:disable-next-line:no-unused-expression\n        callback && sendBackResult2Native(JSON.stringify(obj), callback);\n        return obj;\n    }\n\n    static importAccountWithWallet(\n        label: string,\n        encryptedPrivateKey: string,\n        address: string,\n        salt: string,\n        password: string,\n        callback?: string\n    ) {\n        let account = new Account();\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(address);\n            account = Account.importAccount(label, encryptedPrivateKeyObj, password, addr, salt);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const obj = {\n            error: ERROR_CODE.SUCCESS,\n            result: account.toJson()\n        };\n        // add address check\n        if (address !== account.address.toBase58()) {\n            obj.error = ERROR_CODE.INVALID_ADDR,\n            obj.result = '';\n        }\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        password = '';\n        return obj;\n    }\n\n    static signSelfClaim(\n        context: string,\n        claimData: string,\n        ontid: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    )  {\n        let privateKey: PrivateKey;\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.sendRawTx}`;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        // const claimDataObj = JSON.parse(claimData);\n        const metadata = {\n            issuer: ontid,\n            subject: ontid,\n            issuedAt: now()\n        };\n\n        // todo: pass real public key id\n        const publicKeyId = ontid + '#keys-1';\n        const claim = new Claim(metadata, undefined, undefined);\n        claim.sign(restUrl, publicKeyId, privateKey);\n        const obj = {\n            error : 0,\n            result : claim\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return obj;\n    }\n\n    static decryptEncryptedPrivateKey(\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ) {\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        let pri;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            pri = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const obj = {\n            error : 0,\n            result : pri.key\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        password = '';\n        return obj;\n    }\n\n    static getClaim(\n        claimId: string,\n        context: string,\n        issuer: string,\n        subject: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        payer: string,\n        gasPrice: string,\n        gasLimit: string,\n        callback ?: string\n    ) {\n        let privateKey: PrivateKey;\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n\n            return result;\n        }\n        const path = 'claim' + claimId;\n        const valueObj = {\n            Type : 'JSON',\n            Value : {\n                Context: context,\n                Issuer: issuer\n            }\n        };\n        // const type = 'JSON';\n        const value = JSON.stringify(valueObj);\n        const attr = new DDOAttribute();\n        attr.key = path;\n        attr.type = 'JSON';\n        attr.value = value;\n        const publicKey = privateKey.getPublicKey();\n        const tx = buildAddAttributeTx(subject, [attr], publicKey, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            if (res.Result.Result === '01') {\n                // user agent will do this\n                // restClient.sendRawTransaction(tx.serialize(), false)\n                // const hash = sha256(sha256(tx.serializeUnsignedData()))\n                const obj = {\n                    error: ERROR_CODE.SUCCESS,\n                    result: '',\n                    tx: tx.serialize()\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                // clear privateKey and password\n                privateKey.key = '';\n                password = '';\n                return obj;\n            } else {\n                const obj = {\n                    error: ERROR_CODE.PreExec_ERROR,\n                    result: ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            }\n        }\n        ).catch((err: any) => {\n            const obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static signData(\n        content: string, // hex string\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ): PgpSignature | object {\n        let privateKey: PrivateKey;\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        let result;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const signature = privateKey.sign(content);\n        result = signature.serializePgp();\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static getBalance(address: string, callback?: string) {\n        const addressObj = new Address(address);\n        const request = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.getBalance}/${addressObj.toBase58()}`;\n        return axios.get(request).then((res: any) => {\n            if (res.data.Error === 0) {\n                const result = res.data.Result;\n                const obj = {\n                    error : 0,\n                    result\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            } else {\n                const obj = {\n                    error: res.data.Error,\n                    result : ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            }\n        }).catch( (err: any) => {\n            const obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return Promise.reject(obj);\n        });\n    }\n\n    // pls check balance before transfer\n    static transferAssets(\n        token: string,\n        from: string,\n        to: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback?: string) {\n\n        let fromAddress: Address;\n        let toAddress: Address;\n        password = this.transformPassword(password);\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n        } catch (err) {\n            const result = {\n                error : ERROR_CODE.INVALID_PARAMS,\n                result : ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(from);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        const tx = makeTransferTx(token, fromAddress, toAddress, value, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static claimOng(\n        address: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback?: string\n    ) {\n        let addressObj: Address;\n        password = this.transformPassword(password);\n        try {\n            addressObj = new Address(address);\n\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addressObj, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        const tx = makeWithdrawOngTx(addressObj, addressObj, value, new Address(payer), gasPrice, gasLimit);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static exportIdentityToQrcode(identityDataStr: string, callback?: string) {\n        const obj = Identity.parseJson(identityDataStr);\n        let salt = obj.controls[0].salt;\n        if (!isBase64(salt)) {\n            salt = Buffer.from(salt, 'hex').toString('base64');\n        }\n        const result = {\n            type : 'I',\n            label : obj.label,\n            algorithm : 'ECDSA',\n            scrypt : {\n                n : 4096,\n                p : 8,\n                r : 8,\n                dkLen : 64\n            },\n            key : obj.controls[0].encryptedKey.key,\n            salt,\n            address: obj.controls[0].address.toBase58(),\n            parameters : {\n                curve : 'secp256r1'\n            }\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static exportIdentityToKeystring(identityDataStr: string, callback?: string) {\n        const obj = Identity.parseJson(identityDataStr);\n        const address = obj.controls[0].address.toBase58();\n        const salt = obj.controls[0].salt;\n        const key = obj.controls[0].encryptedKey.key;\n        const result = salt + address + key;\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static exportAccountToQrcode(accountDataStr: string, callback?: string) {\n        const obj = Account.parseJson(accountDataStr);\n        const result = {\n            type: 'A',\n            label: obj.label,\n            algorithm: 'ECDSA',\n            scrypt: {\n                n: 4096,\n                p: 8,\n                r: 8,\n                dkLen: 64\n            },\n            key: obj.encryptedKey.key,\n            salt: obj.salt,\n            address: obj.address.toBase58(),\n            parameters: {\n                curve: 'secp256r1'\n            }\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static exportAccountToKeystring(accountDataStr: string, callback?: string) {\n        const obj = Account.parseJson(accountDataStr);\n        const salt = obj.salt;\n        const address = obj.address.toBase58();\n        const key = obj.encryptedKey.key;\n        const result = salt + address + key;\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static importAccountMnemonic(label: string, mnemonic: string, password: string, callback?: string) {\n        mnemonic = mnemonic.trim();\n        password = this.transformPassword(password);\n        if (!bip39.validateMnemonic(mnemonic)) {\n            // tslint:disable-next-line:no-shadowed-variable\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            // tslint:disable-next-line:no-unused-expression\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\n        const pri = hdkey.derive(ONT_BIP44_PATH);\n        const key = Buffer.from(pri.privateKey).toString('hex');\n        const privateKey = new PrivateKey(key);\n        const account = Account.create(privateKey, password, label);\n        const result = account.toJson();\n        const obj = {\n            error: ERROR_CODE.SUCCESS,\n            result\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        mnemonic = '';\n        return obj;\n    }\n\n    static exportWifPrivakeKey(encryptedKey: string, password: string,\n                               address: string, salt: string, callback?: string) {\n        if (address.length !== 34 && address.length !== 40) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        password = this.transformPassword(password);\n        const encrypt = new PrivateKey(encryptedKey);\n        const addr = new Address(address);\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\n        const privateKey = encrypt.decrypt(password, addr, saltHex);\n        let wif = privateKey.serializeWIF();\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: wif\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        wif = '';\n        password = '';\n        return result;\n    }\n\n    static importAccountWithWif(label: string, wif: string, password: string, callback?: string) {\n        let privateKey;\n        password = this.transformPassword(password);\n        try {\n            privateKey = PrivateKey.deserializeWIF(wif);\n        } catch (err) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const account = Account.create(privateKey, password, label);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: account.toJson()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static importAccountWithPrivateKey(label: string, privateKey: string, password: string, callback?: string) {\n        privateKey = privateKey.trim();\n        password = this.transformPassword(password);\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const pri = new PrivateKey(privateKey);\n        const account = Account.create(pri, password, label);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: account.toJson()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey = '';\n        password = '';\n        return result;\n    }\n\n    /**\n     * Actually import with Qrcode\n     */\n    static importAccountWithKeystore(keystore: string, password: string, callback?: string) {\n        let keyStoreObj;\n        password = this.transformPassword(password);\n        try {\n            keyStoreObj = JSON.parse(keystore);\n        } catch (err) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        if (keyStoreObj.type !== 'A') {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        } else {\n            let account = new Account();\n            const encryptedPrivateKeyObj = new PrivateKey(keyStoreObj.key);\n            try {\n                const params = {\n                    cost: keyStoreObj.scrypt.n || 4096,\n                    blockSize: keyStoreObj.scrypt.p || 8,\n                    parallel: keyStoreObj.scrypt.r || 8,\n                    size: keyStoreObj.scrypt.dkLen || 64\n                };\n                const addr = new Address(keyStoreObj.address);\n                account = Account.importAccount(\n                    keyStoreObj.label, encryptedPrivateKeyObj, password, addr, keyStoreObj.salt, params);\n                const obj = {\n                    error: ERROR_CODE.SUCCESS,\n                    result: account.toJson()\n                };\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                // clear privateKey and password\n                password = '';\n                return obj;\n            } catch (err) {\n                const result = this.getDecryptError(err);\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(result), callback);\n                }\n                return result;\n            }\n        }\n    }\n\n    static getUnclaimedOng(address: string, callback?: string) {\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.getAllowance('ong', new Address(ONT_CONTRACT), new Address(address)).then((res) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: res.Result\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static querySmartCodeEventByTxhash(txHash: string, callback?: string) {\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.getSmartCodeEvent(txHash).then((res) => {\n            const obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: res\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static createSharedWallet(requiredSignatureNum: string, allRelatedPks: string, callback?: string) {\n        const M  = parseInt(requiredSignatureNum, 10);\n        let pks = [];\n        let pubs = [];\n        let error = ERROR_CODE.SUCCESS;\n        try {\n            pks = JSON.parse(allRelatedPks);\n            pubs = pks.map((p: string) => PublicKey.deserializeHex(new StringReader(p)));\n        } catch (err) {\n            error = ERROR_CODE.INVALID_PARAMS;\n        }\n        if (M < 2 || pks.length < M || pks.length > 12) {\n            error = ERROR_CODE.INVALID_PARAMS;\n        }\n        let address = '';\n        try {\n            address = Address.fromMultiPubKeys(M, pubs).toBase58();\n        } catch (err) {\n            error = ERROR_CODE.INVALID_PARAMS;\n        }\n        if (callback) {\n            const result = {\n                error,\n                result: address\n            };\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return address;\n    }\n\n    static adderssFromPublicKey(publicKey: string, callback?: string) {\n        const pk = PublicKey.deserializeHex(new StringReader(publicKey));\n        const address = Address.fromPubKey(pk).toBase58();\n        const result = {\n            error : ERROR_CODE.SUCCESS,\n            result: address\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return address;\n    }\n\n    static makeMultiSignTransaction(asset: string, from: string, to: string, amount: string, gasPrice: string,\n                                    gasLimit: string, callback?: string) {\n        let fromAddress: Address;\n        let toAddress: Address;\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const tx = makeTransferTx(asset, fromAddress, toAddress, amount, gasPrice, gasLimit);\n        tx.payer = fromAddress;\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            txHash: reverseHex(tx.getSignContent()),\n            txData: tx.serialize()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        return result;\n    }\n\n    static signMultiAddrTransaction(\n        encryptedPrivateKey: string,\n        address: string,\n        salt: string,\n        password: string,\n        allRelatedPks: string,\n        requiredSignatureNum: string,\n        txDada: string,\n        callback?: string) {\n        password = this.transformPassword(password);\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const M = parseInt(requiredSignatureNum, 10);\n        const tx = Transaction.deserialize(txDada);\n        const pubs = JSON.parse(allRelatedPks);\n        const pks = pubs.map((p: string) => new PublicKey(p));\n        signTx(tx, M, pks, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            signedHash: tx.serialize()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        return tx;\n    }\n\n    /**\n     * Neo transfer\n     */\n    static neoTransfer(\n        from: string,\n        to: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        callback?: string,\n        params ?: ScryptParams\n    ) {\n        password = this.transformPassword(password);\n        const recv = new Address(to);\n        const addr = new Address(from);\n        const abiInfo = AbiInfo.parseJson(NEP5_ABI);\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\n        const amount = parseInt(value, 10);\n        const func = abiInfo.getFunction('Transfer');\n        func.name = func.name.toLowerCase();\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex, params);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const p1 = new Parameter('from', ParameterType.ByteArray, addr.serialize());\n        const p2 = new Parameter('to', ParameterType.ByteArray, recv.serialize());\n        const p3 = new Parameter('value', ParameterType.Integer, amount * NEO_TRAN);\n        func.setParamsValue(p1, p2, p3);\n        const tx = SmartContract.makeInvokeTransaction(contractAddr, addr, func);\n        const p = new Program();\n        p.parameter = Program.programFromParams([tx.sign(privateKey)]);\n        p.code = Program.programFromPubKey(privateKey.getPublicKey());\n        tx.scripts = [p];\n\n        return NeoRpc.sendRawTransaction(NEO_NODE, tx.serialize()).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: ''\n            };\n            if (res.result) {\n                result.result = reverseHex(tx.getHash());\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\n            } else {\n                result.error = ERROR_CODE.NETWORK_ERROR;\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static getNeoBalance(address: string, callback?: string) {\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\n        const addr = new Address(address);\n        return NeoRpc.getBalance(NEO_NODE, contractAddr, addr).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.result) {\n                const balance = parseInt(reverseHex(res.result), 16);\n                result.result = balance;\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static sendTransaction(txData: string, callback?: string) {\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(txData).then((res) => {\n            const obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: res\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    // ope8 apis for ONTO\n    static queryOep8Balance(\n        contractHash: string,\n        account: string,\n        tokenId: number,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep8.makeQueryBalanceOfTx(addr, tokenId);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.Result.Result) {\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static queryOep8Balances(\n        contractHash: string,\n        account: string,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep8.makeQueryBalancesTx(addr);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: [0, 0, 0, 0, 0, 0, 0, 0]\n            };\n            if (res.Result.Result) {\n                const vals = res.Result.Result.map((v: string) => v ? parseInt(reverseHex(v), 16) : 0);\n                result.result = vals;\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static queryOep8TotalBalance(\n        contractHash: string,\n        account: string,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep8.makeQueryTotalBalanceTx(addr);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.Result.Result) {\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static transferOep8(\n        contractHash: string,\n        from: string,\n        to: string,\n        value: string,\n        tokenId: number,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback?: string\n    ) {\n        let fromAddress: Address;\n        let toAddress: Address;\n        let payerAddress: Address;\n        password = this.transformPassword(password);\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n            payerAddress = new Address(payer);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(from);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            return result;\n        }\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const tx = oep8.makeTransferTx(fromAddress, toAddress, tokenId, value, gasPrice, gasLimit, payerAddress);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static compoundOep8(\n        contractHash: string,\n        account: string,\n        compoundNum: number,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback: string\n    ) {\n        let addr: Address;\n        password = this.transformPassword(password);\n        try {\n            addr = new Address(account);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            return result;\n        }\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const tx = oep8.makeCompoundTx(addr, compoundNum, gasPrice, gasLimit, addr);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport BigInt from '../../common/bigInt';\nimport { GENESIS_BLOCK_TIMESTAMP } from '../../consts';\nimport { Address } from '../../crypto';\nimport { ERROR_CODE } from '../../error';\nimport RestClient from '../../network/rest/restClient';\nimport { Transaction } from '../../transaction/transaction';\nimport { makeNativeContractTx } from '../../transaction/transactionBuilder';\nimport { calcUnboundOng, hex2VarBytes, hexstr2str,\n    num2hexstring, str2hexstr, str2VarBytes, StringReader, varifyPositiveInt } from '../../utils';\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\nimport Struct from '../abi/struct';\n\nconst GOVERNANCE_CONTRACT = '0000000000000000000000000000000000000007';\nconst PEER_ATTRIBUTES = 'peerAttributes';\nconst SPLIT_FEE_ADDRESS = 'splitFeeAddress';\nconst AUTHORIZE_INFO_POOL = 'voteInfoPool';\nconst GLOBAL_PARAM = 'globalParam';\nconst TOTAL_STAKE = 'totalStake';\nconst contractAddress = new Address(GOVERNANCE_CONTRACT);\n\n/* TODO: Test */\n\n// tslint:disable:no-console\n\n/**\n * Register to be candidate node.\n * This tx needs signatures from userAddr and payer if these two address are not the same.\n * @param ontid user's ONT ID, must be assigned with the role.\n * @param peerPubKey public key of user's peer\n * @param userAddr user's address to pledge ONT&ONG. This address must have enough ONT & ONG.\n * @param keyNo user's pk id\n * @param initPos Initial state\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeRegisterCandidateTx(\n    ontid: string,\n    peerPubKey: string,\n    keyNo: number,\n    userAddr: Address,\n    initPos: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    varifyPositiveInt(initPos);\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), initPos, ontid, keyNo);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('registerCandidate', params, contractAddress,\n                                     gasPrice, gasLimit, payer);\n}\n\n/**\n *\n * @param userAddr User's address to pledge ONT&ONG.\n * @param peerPubKey Public key of user's peer\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeUnregisterCandidateTx(\n    userAddr: Address,\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('unRegisterCandidate', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Creates transaction to approve candidate\n * @param peerPubKey Public key of user's peer\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeApproveCandidateTx(\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey));\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('approveCandidate', params, contractAddress,\n                                     gasPrice, gasLimit, payer);\n}\n\n/**\n * Creates transaction to reject candidate\n * @param peerPubKey Public key of user's peer\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeRejectCandidateTx(\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey));\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('rejectCandidate', params, contractAddress,\n        gasPrice, gasLimit, payer);\n}\n\n/**\n * Creates transaction to vote for some peers.\n * Can only vote for peers that with status 1 or 2\n * This tx needs signatures from userAddr and payer if these two address are not the same.\n * @param userAddr User's address\n * @param peerPubKeys Public keys of peers that to be voted\n * @param posList Array of token that to vote\n * @param payer Address to pay for transaction's gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeVoteForPeerTx(\n    userAddr: Address,\n    peerPubKeys: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    if (peerPubKeys.length !== posList.length) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeys.length);\n    for (const p of peerPubKeys) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const n of posList) {\n        struct.add(n);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('voteForPeer', params, contractAddress,\n       gasPrice, gasLimit, payer);\n}\n\n/**\n * User unvotes peer nodes\n * @param userAddr user's address\n * @param peerPubKeys peer's pks\n * @param posList amount of ONT to unvote\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeUnvoteForPeerTx(\n    userAddr: Address,\n    peerPubKeys: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    if (peerPubKeys.length !== posList.length) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeys.length);\n    for (const p of peerPubKeys) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const n of posList) {\n        struct.add(n);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('unVoteForPeer', params, contractAddress,\n         gasPrice, gasLimit, payer);\n}\n\n/**\n * Withdraw the unvote ONT\n * Need two signatures if userAddr and payer are not the same\n * @param userAddr\n * @param peerPubKeys\n * @param withdrawList\n */\nexport function makeWithdrawTx(\n    userAddr: Address,\n    peerPubKeys: string[],\n    withdrawList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    if (peerPubKeys.length !== withdrawList.length) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeys.length);\n    for (const p of peerPubKeys) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(withdrawList.length);\n    for (const w of withdrawList) {\n        struct.add(w);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('withdraw', params, contractAddress,\n        gasPrice, gasLimit, payer);\n}\n\n/** Quit node register\n * Need two signatures if userAddr and payer are not the same\n */\nexport function makeQuitNodeTx(\n    userAddr: Address,\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('quitNode', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Peer change the status of authorization\n * @param peerPubKey Peer's public key\n * @param userAddr User's address\n * @param maxAuthorize Allowed max amount of stake authorization\n * @param payer Payer of the transaction fee\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeChangeAuthorizationTx(\n    peerPubKey: string,\n    userAddr: Address,\n    maxAuthorize: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), maxAuthorize);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('changeMaxAuthorization', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Update allocation proportion of peer\n * @param peerPubKey\n * @param userAddr\n * @param peerCost\n * @param payer\n * @param gasPrice\n * @param gasLimit\n */\nexport function makeSetPeerCostTx(\n    peerPubKey: string,\n    userAddr: Address,\n    peerCost: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), peerCost);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('setPeerCost', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Withdraw fee to user's address\n * @param userAddr User's address\n * @param payer\n * @param gasPrice\n * @param gasLimit\n */\nexport function makeWithdrawFeeTx(\n    userAddr: Address,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('withdrawFee', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * User authorize some peers\n * @param userAddr\n * @param peerPubKeyList\n * @param posList\n * @param payer\n * @param gasPrice\n * @param gasLimit\n */\nexport function makeAuthorizeForPeerTx(\n    userAddr: Address,\n    peerPubKeyList: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeyList.length);\n    for (const p of peerPubKeyList) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const w of posList) {\n        struct.add(w);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('authorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * User cancels the authorization of peer\n */\nexport function makeUnauthorizeForPeerTx(\n    userAddr: Address,\n    peerPubKeyList: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeyList.length);\n    for (const p of peerPubKeyList) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const w of posList) {\n        struct.add(w);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('unAuthorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Peer add the init pos\n * @param peerPubkey Peer's public key\n * @param userAddr Stake wallet address\n * @param pos Amount of pos to add\n * @param payer Payer of the transaction\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeAddInitPosTx(\n    peerPubkey: string,\n    userAddr: Address,\n    pos: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('addInitPos', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Peer reduce the init pos\n * @param peerPubkey Peer's public key\n * @param userAddr Stake wallet address\n * @param pos Amount of pos to reduce\n * @param payer Payer of the transaction\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeReduceInitPosTx(\n    peerPubkey: string,\n    userAddr: Address,\n    pos: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('reduceInitPos', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\nexport function makeWithdrawPeerUnboundOngTx(\n    userAddr: Address,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n) {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('withdrawOng', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * If not set ifAuthorize or cost before, query result will be empty.\n * @param peerPubKey\n * @param url\n */\nexport async function getAttributes(peerPubKey: string, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(PEER_ATTRIBUTES) + peerPubKey;\n    const res = await restClient.getStorage(codeHash, key);\n    const result = res.Result;\n    if (result) {\n        return PeerAttributes.deserialize(new StringReader(result));\n    } else {\n        return new PeerAttributes();\n    }\n}\n\n/**\n * Get the reward fee of address\n * @param address User's address\n * @param url Node's restfull url\n */\nexport async function getSplitFeeAddress(address: Address, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(SPLIT_FEE_ADDRESS) + address.serialize();\n    const res = await restClient.getStorage(codeHash, key);\n    const result = res.Result;\n    if (result) {\n        return SplitFeeAddress.deserialize(new StringReader(result));\n    } else {\n        return new SplitFeeAddress();\n    }\n}\n\n/**\n * Get authorization of user's address\n * @param peerPubKey Peer's public key\n * @param address User's address\n * @param url Node's restful url\n */\nexport async function getAuthorizeInfo(peerPubKey: string, address: Address, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(AUTHORIZE_INFO_POOL) + peerPubKey + address.serialize();\n    const res = await restClient.getStorage(codeHash, key);\n    const result = res.Result;\n    if (result) {\n        return AuthorizeInfo.deserialize(new StringReader(result));\n    } else {\n        return new AuthorizeInfo();\n    }\n}\n\n/**\n * Query the governance view\n * @param url Url of restful api\n */\nexport async function getGovernanceView(url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr('governanceView');\n    const viewRes = await restClient.getStorage(codeHash, key);\n    const view = viewRes.Result;\n    const governanceView = GovernanceView.deserialize(new StringReader(view));\n    return governanceView;\n}\n\n/**\n * Query all the peer's state. The result is a map.\n * @param url Url of blockchain node\n */\nexport async function getPeerPoolMap(url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const governanceView = await getGovernanceView(url);\n    const key1 = str2hexstr('peerPool');\n    const key2 = num2hexstring(governanceView.view, 4, true);\n    const keyP = key1 + key2;\n    const res = await restClient.getStorage(codeHash, keyP);\n    const sr = new StringReader(res.Result);\n    const length = sr.readInt();\n    const result: any = {};\n    for (let i = 0; i < length; i++) {\n        const p = PeerPoolItem.deserialize(sr);\n        result[p.peerPubkey] = p;\n    }\n    return result;\n}\n\nexport async function getGlobalParam(url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(GLOBAL_PARAM);\n    const res = await restClient.getStorage(codeHash, key);\n    if (res.Result) {\n        return GlobalParam.deserialize(new StringReader(res.Result));\n    } else {\n        return new GlobalParam();\n    }\n\n}\n\nexport async function getTotalStake(userAddr: Address, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(TOTAL_STAKE) + userAddr.serialize();\n    const res = await restClient.getStorage(codeHash, key);\n    if (res.Result) {\n        return TotalStake.deserialize(new StringReader(res.Result));\n    } else {\n        return new TotalStake();\n    }\n}\n\nexport async function getPeerUnboundOng(userAddr: Address, url?: string) {\n    const totalStake = await getTotalStake(userAddr, url);\n    if (!totalStake.address) {\n        return 0;\n    }\n    const restClient = new RestClient(url);\n    const blockHeight = (await restClient.getBlockHeight()).Result;\n    const block = (await restClient.getBlockJson(blockHeight)).Result;\n    const timeStamp = block.Header.Timestamp - GENESIS_BLOCK_TIMESTAMP;\n    return calcUnboundOng(totalStake.stake, totalStake.timeOffset, timeStamp);\n}\n\n/**\n * Use to store governance state.\n */\nexport class GovernanceView {\n    static deserialize(sr: StringReader): GovernanceView {\n        const g = new GovernanceView();\n        g.view = sr.readUint32();\n        g.height = sr.readUint32();\n        g.txhash = sr.read(64); // uint256\n        return g;\n    }\n    view: number = 0;\n    height: number = 0;\n    txhash: string = '';\n\n    serialize(): string {\n        let result = '';\n        result += num2hexstring(this.view, 4, true);\n        result += num2hexstring(this.height, 4, true);\n        result += hex2VarBytes(this.txhash);\n        return result;\n    }\n}\n\n/**\n * Describs the peer's state in the pool.\n */\nexport class PeerPoolItem {\n    static deserialize(sr: StringReader): PeerPoolItem {\n        const p = new PeerPoolItem();\n        p.index = sr.readInt();\n        p.peerPubkey = hexstr2str(sr.readNextBytes());\n        p.address = Address.deserialize(sr);\n        p.status = parseInt(sr.read(1), 16);\n        p.initPos = sr.readLong();\n        p.totalPos = sr.readLong();\n        return p;\n    }\n\n    index: number = 0;\n    peerPubkey: string = '';\n    address: Address;\n    status: number = 0;\n    initPos: number = 0;\n    totalPos: number = 0;\n\n    serialize(): string {\n        let result = '';\n        result += num2hexstring(this.index, 4, true);\n        result += str2VarBytes(this.peerPubkey);\n        result += this.address.serialize();\n        result += num2hexstring(this.status);\n        result += num2hexstring(this.initPos, 8, true);\n        result += num2hexstring(this.totalPos, 8, true);\n        return result;\n    }\n}\n\nexport class PeerAttributes {\n    static deserialize(sr: StringReader): PeerAttributes {\n        const pr = new PeerAttributes();\n        pr.peerPubkey = hexstr2str(sr.readNextBytes());\n\n        pr.maxAuthorize = sr.readLong();\n\n        pr.t2PeerCost = sr.readLong();\n        pr.t1PeerCost = sr.readLong();\n        pr.tPeerCost = sr.readLong();\n\n        if (sr.isEmpty) {\n            return pr;\n        }\n        pr.field1 = sr.readNextBytes();\n        pr.field2 = sr.readNextBytes();\n        pr.field3 = sr.readNextBytes();\n        pr.field4 = sr.readNextBytes();\n\n        return pr;\n    }\n    peerPubkey: string = '';\n    maxAuthorize: number = 0;\n    t2PeerCost: number = 100; // peer cost, active in view T + 2\n    t1PeerCost: number = 100; // peer cost, active in view T + 1\n    tPeerCost: number = 0; // peer cost, active in view T\n    field1: string = '';\n    field2: string = '';\n    field3: string = '';\n    field4: string = '';\n\n    serialize(): string {\n        return '';\n    }\n}\n\nexport class SplitFeeAddress {\n    static deserialize(sr: StringReader) {\n        const sfa = new SplitFeeAddress();\n        sfa.address = Address.deserialize(sr);\n        sfa.amount = sr.readLong();\n        return sfa;\n    }\n\n    address: Address;\n    amount: number = 0;\n}\n\nexport class AuthorizeInfo {\n    static deserialize(sr: StringReader) {\n        const ai = new AuthorizeInfo();\n        ai.peerPubkey = hexstr2str(sr.readNextBytes());\n        ai.address = Address.deserialize(sr);\n        ai.consensusPos = sr.readLong();\n        ai.freezePos = sr.readLong();\n        ai.newPos = sr.readLong();\n        ai.withdrawPos = sr.readLong();\n        ai.withdrawFreezePos = sr.readLong();\n        ai.withdrawUnfreezePos = sr.readLong();\n        return ai;\n    }\n\n    peerPubkey: string = '';\n    address: Address;\n    consensusPos: number = 0;\n    freezePos: number = 0;\n    newPos: number = 0;\n    withdrawPos: number = 0;\n    withdrawFreezePos: number = 0;\n    withdrawUnfreezePos: number = 0;\n}\n\nexport class GlobalParam {\n    static deserialize(sr: StringReader) {\n        const gp = new GlobalParam();\n        const feeHexStr = sr.readNextBytes();\n        const candidateFeeStr = BigInt.fromHexstr(feeHexStr).value;\n        gp.candidateFee = Number(candidateFeeStr);\n        const minStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        gp.minInitState = Number(minStr);\n        const candidateNumStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const candidateNum = Number(candidateNumStr);\n        gp.candidateNum = candidateNum;\n        const posLimitStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        gp.posLimit = Number(posLimitStr);\n        const aStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const a = Number(aStr);\n        const bStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const b = Number(bStr);\n        const yStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const yita = Number(yStr);\n        const pStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const penalty = Number(pStr);\n        gp.A = a;\n        gp.B = b;\n        gp.yita = yita;\n        gp.penalty = penalty;\n        return gp;\n    }\n\n    candidateFee: number;\n    candidateNum: number;\n    minInitState: number;\n    posLimit: number;\n    A: number;\n    B: number;\n    yita: number;\n    penalty: number;\n}\n\nexport class TotalStake {\n    static deserialize(sr: StringReader): TotalStake {\n        const ts = new TotalStake();\n        ts.address = Address.deserialize(sr);\n        ts.stake = sr.readLong();\n        ts.timeOffset = sr.readUint32();\n        return ts;\n    }\n    address: Address;\n    stake: number;\n    timeOffset: number;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { BigNumber } from 'bignumber.js';\nimport BigInt from '../../common/bigInt';\nimport { Address } from '../../crypto/address';\nimport { ERROR_CODE } from '../../error';\nimport { hex2VarBytes, hexstr2str, num2hexstring, str2VarBytes, StringReader } from '../../utils';\n\nexport class Transfers {\n    static deserialize(sr: StringReader) {\n        const t = new Transfers();\n        // const version = sr.read(1);\n        // t.version = version;\n        const states = [];\n        const stateLen = sr.readNextLen();\n        for (let i = 0; i < stateLen; i++) {\n            const state = State.deserialize(sr);\n            states.push(state);\n        }\n        t.states = states;\n        return t;\n    }\n\n    // byte\n    // version : string\n    states: State[] = [];\n\n    constructor() {\n        // this.version = '00';\n    }\n\n    serialize() {\n        let result = '';\n        // result += this.version\n        result += num2hexstring(this.states.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.states.length; i++) {\n            result += this.states[i].serialize();\n        }\n        return result;\n    }\n}\n\nexport class TokenTransfer {\n    static deserialize(sr: StringReader) {\n        const tf = new TokenTransfer();\n        tf.states = [];\n        const contract = sr.read(20);\n        tf.contract = contract;\n\n        const len = sr.readNextLen();\n        for (let i = 0; i < len; i++) {\n            const state = State.deserialize(sr);\n            tf.states.push(state);\n        }\n        return tf;\n    }\n\n    // 20 bytes\n    contract: string;\n    states: State[];\n\n    serialize() {\n        let result = '';\n        result += this.contract;\n        const len = num2hexstring(this.states.length);\n        result += len;\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0 ; i < this.states.length; i++) {\n            result += this.states[i].serialize();\n        }\n        return result;\n    }\n}\n\nexport class State {\n    static deserialize(sr: StringReader) {\n        // const version = sr.read(1);\n        const from = new Address(sr.readNextBytes());\n        const to   = new Address(sr.readNextBytes());\n        // const value = (new BigNumber(sr.readNextBytes(), 16)).toString();\n        // const value = sr.read(8);\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\n\n        return new State(from, to, value.toString());\n    }\n\n    // byte\n    // version : string\n    // 20 bytes address\n    from: Address;\n    to: Address;\n    value: string;\n\n    constructor(from: Address, to: Address, value: string) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n\n    serialize() {\n        let result = '';\n        // result += this.version\n        result += hex2VarBytes(this.from.serialize());\n        result += hex2VarBytes(this.to.serialize());\n        const bi = new BigInt(this.value).toHexstr();\n        result += hex2VarBytes(bi);\n        return result;\n    }\n}\n\nexport class Contract {\n    static deserialize(sr: StringReader) {\n        const c = new Contract();\n        const version = sr.read(1);\n        const address = Address.deserialize(sr);\n        const method = sr.readNextBytes();\n        const args = sr.readNextBytes();\n        c.version = version;\n        c.address = address;\n        c.method = hexstr2str(method);\n        c.args = args;\n        return c;\n    }\n\n    // byte\n    version: string;\n\n    // 20 bytes\n    address: Address;\n\n    method: string;\n\n    // byte\n    args: string;\n\n    constructor() {\n        this.version = '00';\n    }\n\n    serialize() {\n        let result = '';\n        result += this.version;\n\n        result += this.address.serialize();\n\n        result += str2VarBytes(this.method);\n\n        result += hex2VarBytes(this.args);\n\n        return result;\n    }\n}\n\nexport class TransferFrom {\n    static deserialize(sr: StringReader): TransferFrom {\n        // const version = sr.read(1);\n        const sender = new Address(sr.readNextBytes());\n        const from = new Address(sr.readNextBytes());\n        const to = new Address(sr.readNextBytes());\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const tf = new TransferFrom(sender, from, to, value.toString());\n        return tf;\n    }\n\n    // version : string = '00'\n\n    sender: Address;\n\n    from: Address;\n\n    to: Address;\n\n    value: string;\n\n    constructor(sender: Address, from: Address, to: Address, value: string) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || !bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.sender = sender;\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n\n    serialize(): string {\n        let result = '';\n        // result += this.version\n        result += hex2VarBytes(this.sender.serialize());\n        result += hex2VarBytes(this.from.serialize());\n        result += hex2VarBytes(this.to.serialize());\n        const biHex = new BigInt(this.value).toHexstr();\n        result += hex2VarBytes(biHex);\n        return result;\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BigNumber } from 'bignumber.js';\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\nimport { Transaction } from '../../transaction/transaction';\nimport { str2hexstr } from '../../utils';\nimport { Parameter, ParameterType } from '../abi/parameter';\nimport { Address } from './../../crypto/address';\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\n\nconst functionNames = {\n    Init: 'init',\n    Transfer: 'transfer',\n    TransferMulti: 'transferMulti',\n    Approve: 'approve',\n    TransferFromm: 'transferFrom',\n    Allowance: 'allowance',\n    BalanceOf: 'balanceOf',\n    TotalSupply: 'totalSupply',\n    Symbol: 'symbol',\n    Decimals: 'decimals',\n    Name: 'name'\n};\n\nexport class Oep4State  {\n    from: string;\n    to: string;\n    amount: BigNumber;\n\n    constructor(from: Address, to: Address, amount: string) {\n        this.from = from.serialize();\n        this.to = to.serialize();\n        this.amount = new BigNumber(amount);\n    }\n}\n/**\n * Transaction builder for oep-4 contracts\n */\nexport class Oep4TxBuilder {\n\n    contractAddr: Address;\n\n    constructor(contractAddr: Address) {\n        this.contractAddr = contractAddr;\n    }\n\n    /**\n     * Init the oep-4 smart contract\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer's address to pay for gas\n     */\n    init(gasPrice: string, gasLimit: string, payer?: Address): Transaction {\n        const funcName = functionNames.Init;\n        return makeInvokeTransaction(funcName, [], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Make transaction for transfer\n     * @param from Sender's address\n     * @param to Receiver's address\n     * @param amount Amountof asset to transfer\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer's address to pay for gas\n     */\n    makeTransferTx(\n        from: Address,\n        to: Address,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const funcName = functionNames.Transfer;\n        const p1 = new Parameter('from', ParameterType.ByteArray, from.serialize());\n        const p2 = new Parameter('to', ParameterType.ByteArray, to.serialize());\n        const p3 = new Parameter('value', ParameterType.Long, amount);\n        return makeInvokeTransaction(funcName, [p1, p2, p3], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Make transaction for multi transfer.\n     * The transaction needs signatures of each sender in states and the signature of the payer.\n     * @param states Array of State(sender, receiver, amount)\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer to pay for gas\n     */\n    makeTransferMultiTx(\n        states: Oep4State[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const list = [];\n        list.push(str2hexstr(functionNames.TransferMulti));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.from,\n                state.to,\n                state.amount\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Make transaction for approve\n     * @param owner Owner's address\n     * @param spender Spender's address\n     * @param amount Amount\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer to pay for gas\n     */\n    makeApproveTx(\n        owner: Address,\n        spender: Address,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const funcName = functionNames.Approve;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferFromTx(\n        sender: Address,\n        from: Address,\n        to: Address,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const funcName = functionNames.TransferFromm;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, sender.serialize()),\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeQueryAllowanceTx(\n        owner: Address,\n        spender: Address\n    ): Transaction {\n        const funcName = functionNames.Allowance;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize())\n        ];\n        return makeInvokeTransaction(funcName, params, this.contractAddr);\n    }\n\n    /**\n     * Query the balance\n     * @param address Address to query balance\n     */\n    queryBalanceOf(address: Address): Transaction {\n        const funcName = functionNames.BalanceOf;\n        const p1 = new Parameter('from', ParameterType.ByteArray, address.serialize());\n\n        return makeInvokeTransaction(funcName, [p1], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    queryTotalSupply(): Transaction {\n        const funcName = functionNames.TotalSupply;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    queryDecimals(): Transaction {\n        const funcName = functionNames.Decimals;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    querySymbol(): Transaction {\n        const funcName = functionNames.Symbol;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    queryName(): Transaction {\n        const funcName = functionNames.Name;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\nimport { Transaction } from '../../transaction/transaction';\nimport { str2hexstr } from '../../utils';\nimport { Address } from './../../crypto/address';\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\nimport { Parameter, ParameterType } from './../abi/parameter';\n\nexport class Oep5Param {\n    public toAcct: string; // hex string\n    public tokenId: string; // hex string\n\n    public constructor(toAcct: Address, tokenId: string ) {\n        this.toAcct = toAcct.serialize();\n        this.tokenId = tokenId;\n    }\n}\n\nconst FunctionNames = {\n    Init: 'init',\n    Name: 'name',\n    Symbol: 'symbol',\n    TotalSupply: 'totalSupply',\n    BalanceOf: 'balanceOf',\n    OwnerOf: 'ownerOf',\n    Transfer: 'transfer',\n    TransferMulti: 'transferMulti',\n    Approve: 'approve',\n    ApproveMulti: 'approveMulti',\n    TakeOwnership: 'takeOwnership',\n    QueryTokenIDByIndex: 'queryTokenIDByIndex',\n    QueryTokenByID: 'queryTokenByID',\n    GetApproved: 'getApproved',\n    CreateMultiTokens: 'createMultiTokens',\n    CreateOneToken: 'createOneToken'\n};\n\nexport class Oep5TxBuilder {\n    contractAddr: Address;\n\n    constructor(contractAddr: Address) {\n        this.contractAddr = contractAddr;\n    }\n\n    makeInitTx(\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Init;\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeOwnerOfTx(\n        tokenId: string\n    ): Transaction {\n        const func = FunctionNames.OwnerOf;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    /**\n     * Transfer the control to someone else\n     * @param oep5Param\n     * @param gasPrice\n     * @param gasLimit\n     * @param payer\n     */\n    makeTransferTx(\n        oep5Param: Oep5Param,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Transfer;\n        const params = [\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Transfer the control to multi people\n     */\n    makeTransferMultiTx(\n        oep5Params: Oep5Param[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const list = [];\n        list.push(str2hexstr(FunctionNames.TransferMulti));\n        const temp = [];\n        for (const param of oep5Params) {\n            temp.push([\n                param.toAcct,\n                param.tokenId\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Approve the token to toAcct address, it can overwrite older approved address\n     * @param oep5Param\n     * @param gasPrice\n     * @param gasLimit\n     * @param payer\n     */\n    makeApproveTx(\n        oep5Param: Oep5Param,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Approve;\n        const params = [\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Take the approved token.\n     * @param oep5Param\n     * @param gasPrice\n     * @param gasLimit\n     * @param payer\n     */\n    makeTakeOwnershipTx(\n        oep5Param: Oep5Param,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.TakeOwnership;\n        const params = [\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeQueryBalanceOfTx(\n        addr: Address\n    ): Transaction {\n        const func = FunctionNames.BalanceOf;\n        const params = [\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize())\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTotalSupplyTx(): Transaction {\n        const func = FunctionNames.TotalSupply;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n    makeQueryTokenIDByIndexTx(\n        index: number\n    ): Transaction {\n        const func = FunctionNames.QueryTokenIDByIndex;\n        const params = [\n            new Parameter('index', ParameterType.Long, index)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTokenByIDTx(\n        tokenId: string\n    ): Transaction {\n        const func = FunctionNames.QueryTokenByID;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeGetApprovedTx(\n        tokenId: string\n    ): Transaction {\n        const func = FunctionNames.GetApproved;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryNameTx(): Transaction {\n        const func = FunctionNames.Name;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n    makeQuerySymbolTx(): Transaction {\n        const func = FunctionNames.Symbol;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Account } from './account';\nimport { Claim, retrievePublicKey } from './claim';\nimport * as CONST from './consts';\nimport * as Crypto from './crypto';\nimport { Identity } from './identity';\nimport * as NeoCore from './neocore';\nimport RestClient from './network/rest/restClient';\nimport RpcClient from './network/rpc/rpcClient';\nimport { WebsocketClient } from './network/websocket/websocketClient';\nimport * as scrypt from './scrypt';\nimport { SDK } from './sdk/index';\nimport AbiFunction from './smartcontract/abi/abiFunction';\nimport AbiInfo from './smartcontract/abi/abiInfo';\nimport { Parameter, ParameterType } from './smartcontract/abi/parameter';\nimport Struct from './smartcontract/abi/struct';\nimport * as GovernanceTxBuilder from './smartcontract/nativevm/governanceContractTxBuilder';\nimport * as OntAssetTxBuilder from './smartcontract/nativevm/ontAssetTxBuilder';\nimport * as OntidContract from './smartcontract/nativevm/ontidContractTxBuilder';\nimport * as Token from './smartcontract/nativevm/token';\nimport * as Oep4 from './smartcontract/neovm/oep4TxBuilder';\nimport * as Oep5 from './smartcontract/neovm/oep5TxBuilder';\nimport * as Oep8 from './smartcontract/neovm/oep8TxBuilder';\nimport { DDO, DDOAttribute } from './transaction/ddo';\nimport * as ScriptBuilder from './transaction/scriptBuilder';\nimport { Transaction } from './transaction/transaction';\nimport * as TransactionBuilder from './transaction/transactionBuilder';\nimport { Transfer } from './transaction/transfer';\nimport { TxSignature } from './transaction/txSignature';\nimport * as utils from './utils';\nimport { Wallet } from './wallet';\n\nclass ONT {\n    Account: any;\n    Identity: any;\n    Claim: any;\n    DDO: any;\n    DDOAttribute: any;\n    Transaction: any;\n    Transfer: any;\n    TxSignature: any;\n    TransactionBuilder: any;\n    OntAssetTxBuilder: any;\n    Parameter: any;\n    ParameterType: any;\n    AbiFunction: any;\n    AbiInfo: any;\n    utils: any;\n    scrypt: any;\n    CONST: any;\n    Wallet: any;\n    SDK: any;\n    Token: any;\n    OntidContract: any;\n    GovernanceTxBuilder: any;\n    RestClient: any;\n    RpcClient: any;\n    WebsocketClient: any;\n    Crypto: any;\n    Struct: any;\n    ScriptBuilder: any;\n    NeoCore: any;\n    Oep4: any;\n    Oep8: any;\n    Oep5: any;\n\n    constructor() {\n        this.Account = Account;\n        this.Identity = Identity;\n        this.Claim = Claim;\n        this.DDO = DDO;\n        this.DDOAttribute = DDOAttribute;\n        this.Transaction = Transaction;\n        this.Transfer = Transfer;\n        this.TxSignature = TxSignature;\n        this.TransactionBuilder = TransactionBuilder;\n        this.OntAssetTxBuilder = OntAssetTxBuilder;\n        this.GovernanceTxBuilder = GovernanceTxBuilder;\n        this.Parameter = Parameter;\n        this.ParameterType = ParameterType;\n        this.AbiFunction = AbiFunction;\n        this.AbiInfo = AbiInfo;\n        this.utils = utils;\n        this.scrypt = scrypt;\n        this.CONST = CONST;\n        this.Wallet = Wallet;\n        this.SDK = SDK;\n        this.Token = Token;\n        this.OntidContract = OntidContract;\n        this.RestClient = RestClient;\n        this.RpcClient = RpcClient;\n        this.WebsocketClient = WebsocketClient;\n        this.Crypto = Crypto;\n        this.Struct = Struct;\n        this.ScriptBuilder = ScriptBuilder;\n        this.NeoCore = NeoCore;\n        this.Oep4 = Oep4;\n        this.Oep8 = Oep8;\n        this.Oep5 = Oep5;\n    }\n    setNode(url: string) {\n        this.CONST.TEST_NODE = url;\n    }\n\n    setRpcPort(port: string) {\n        this.CONST.HTTP_JSON_PORT = port;\n    }\n\n    setRestPort(port: string) {\n        this.CONST.HTTP_REST_PORT = port;\n    }\n\n    setSocketPort(port: string) {\n        this.CONST.HTTP_WS_PORT = port;\n    }\n}\n\nexport default ONT;\n\nexport {\n    Account,\n    Identity,\n    Claim,\n    retrievePublicKey,\n    DDO,\n    DDOAttribute,\n    Transaction,\n    Transfer,\n    TxSignature,\n    Parameter,\n    ParameterType,\n    AbiFunction,\n    AbiInfo,\n    TransactionBuilder,\n    OntAssetTxBuilder,\n    GovernanceTxBuilder,\n    utils,\n    scrypt,\n    CONST,\n    Wallet,\n    SDK,\n    Token,\n    OntidContract,\n    RestClient,\n    RpcClient,\n    WebsocketClient,\n    Crypto,\n    Struct,\n    ScriptBuilder,\n    NeoCore,\n    Oep4,\n    Oep8,\n    Oep5\n};\n"],"sourceRoot":""}